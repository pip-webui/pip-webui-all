{"version":3,"sources":["chance.js","angular-mocks.js"],"names":[],"mappingstfile":"pip-webui-lib-test.js","sourcesContent":["//  Chance.js 1.0.4\r\n//  http://chancejs.com\r\n//  (c) 2013 Victor Quinn\r\n//  Chance may be freely distributed or modified under the MIT license.\r\n\r\n(function () {\r\n\r\n    // Constants\r\n    var MAX_INT = 9007199254740992;\r\n    var MIN_INT = -MAX_INT;\r\n    var NUMBERS = '0123456789';\r\n    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';\r\n    var CHARS_UPPER = CHARS_LOWER.toUpperCase();\r\n    var HEX_POOL  = NUMBERS + \"abcdef\";\r\n\r\n    // Cached array helpers\r\n    var slice = Array.prototype.slice;\r\n\r\n    // Constructor\r\n    function Chance (seed) {\r\n        if (!(this instanceof Chance)) {\r\n            return seed == null ? new Chance() : new Chance(seed);\r\n        }\r\n\r\n        // if user has provided a function, use that as the generator\r\n        if (typeof seed === 'function') {\r\n            this.random = seed;\r\n            return this;\r\n        }\r\n\r\n        if (arguments.length) {\r\n            // set a starting value of zero so we can add to it\r\n            this.seed = 0;\r\n        }\r\n\r\n        // otherwise, leave this.seed blank so that MT will receive a blank\r\n\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            var seedling = 0;\r\n            if (Object.prototype.toString.call(arguments[i]) === '[object String]') {\r\n                for (var j = 0; j < arguments[i].length; j++) {\r\n                    // create a numeric hash for each argument, add to seedling\r\n                    var hash = 0;\r\n                    for (var k = 0; k < arguments[i].length; k++) {\r\n                        hash = arguments[i].charCodeAt(k) + (hash << 6) + (hash << 16) - hash;\r\n                    }\r\n                    seedling += hash;\r\n                }\r\n            } else {\r\n                seedling = arguments[i];\r\n            }\r\n            this.seed += (arguments.length - i) * seedling;\r\n        }\r\n\r\n        // If no generator function was provided, use our MT\r\n        this.mt = this.mersenne_twister(this.seed);\r\n        this.bimd5 = this.blueimp_md5();\r\n        this.random = function () {\r\n            return this.mt.random(this.seed);\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    Chance.prototype.VERSION = \"1.0.4\";\r\n\r\n    // Random helper functions\r\n    function initOptions(options, defaults) {\r\n        options || (options = {});\r\n\r\n        if (defaults) {\r\n            for (var i in defaults) {\r\n                if (typeof options[i] === 'undefined') {\r\n                    options[i] = defaults[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    function testRange(test, errorMessage) {\r\n        if (test) {\r\n            throw new RangeError(errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encode the input string with Base64.\r\n     */\r\n    var base64 = function() {\r\n        throw new Error('No Base64 encoder available.');\r\n    };\r\n\r\n    // Select proper Base64 encoder.\r\n    (function determineBase64Encoder() {\r\n        if (typeof btoa === 'function') {\r\n            base64 = btoa;\r\n        } else if (typeof Buffer === 'function') {\r\n            base64 = function(input) {\r\n                return new Buffer(input).toString('base64');\r\n            };\r\n        }\r\n    })();\r\n\r\n    // -- Basics --\r\n\r\n    /**\r\n     *  Return a random bool, either true or false\r\n     *\r\n     *  @param {Object} [options={ likelihood: 50 }] alter the likelihood of\r\n     *    receiving a true or false value back.\r\n     *  @throws {RangeError} if the likelihood is out of bounds\r\n     *  @returns {Bool} either true or false\r\n     */\r\n    Chance.prototype.bool = function (options) {\r\n        // likelihood of success (true)\r\n        options = initOptions(options, {likelihood : 50});\r\n\r\n        // Note, we could get some minor perf optimizations by checking range\r\n        // prior to initializing defaults, but that makes code a bit messier\r\n        // and the check more complicated as we have to check existence of\r\n        // the object then existence of the key before checking constraints.\r\n        // Since the options initialization should be minor computationally,\r\n        // decision made for code cleanliness intentionally. This is mentioned\r\n        // here as it's the first occurrence, will not be mentioned again.\r\n        testRange(\r\n            options.likelihood < 0 || options.likelihood > 100,\r\n            \"Chance: Likelihood accepts values from 0 to 100.\"\r\n        );\r\n\r\n        return this.random() * 100 < options.likelihood;\r\n    };\r\n\r\n    /**\r\n     *  Return a random character.\r\n     *\r\n     *  @param {Object} [options={}] can specify a character pool, only alpha,\r\n     *    only symbols, and casing (lower or upper)\r\n     *  @returns {String} a single random character\r\n     *  @throws {RangeError} Can only specify alpha or symbols, not both\r\n     */\r\n    Chance.prototype.character = function (options) {\r\n        options = initOptions(options);\r\n        testRange(\r\n            options.alpha && options.symbols,\r\n            \"Chance: Cannot specify both alpha and symbols.\"\r\n        );\r\n\r\n        var symbols = \"!@#$%^&*()[]\",\r\n            letters, pool;\r\n\r\n        if (options.casing === 'lower') {\r\n            letters = CHARS_LOWER;\r\n        } else if (options.casing === 'upper') {\r\n            letters = CHARS_UPPER;\r\n        } else {\r\n            letters = CHARS_LOWER + CHARS_UPPER;\r\n        }\r\n\r\n        if (options.pool) {\r\n            pool = options.pool;\r\n        } else if (options.alpha) {\r\n            pool = letters;\r\n        } else if (options.symbols) {\r\n            pool = symbols;\r\n        } else {\r\n            pool = letters + NUMBERS + symbols;\r\n        }\r\n\r\n        return pool.charAt(this.natural({max: (pool.length - 1)}));\r\n    };\r\n\r\n    // Note, wanted to use \"float\" or \"double\" but those are both JS reserved words.\r\n\r\n    // Note, fixed means N OR LESS digits after the decimal. This because\r\n    // It could be 14.9000 but in JavaScript, when this is cast as a number,\r\n    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are\r\n    // needed\r\n    /**\r\n     *  Return a random floating point number\r\n     *\r\n     *  @param {Object} [options={}] can specify a fixed precision, min, max\r\n     *  @returns {Number} a single floating point number\r\n     *  @throws {RangeError} Can only specify fixed or precision, not both. Also\r\n     *    min cannot be greater than max\r\n     */\r\n    Chance.prototype.floating = function (options) {\r\n        options = initOptions(options, {fixed : 4});\r\n        testRange(\r\n            options.fixed && options.precision,\r\n            \"Chance: Cannot specify both fixed and precision.\"\r\n        );\r\n\r\n        var num;\r\n        var fixed = Math.pow(10, options.fixed);\r\n\r\n        var max = MAX_INT / fixed;\r\n        var min = -max;\r\n\r\n        testRange(\r\n            options.min && options.fixed && options.min < min,\r\n            \"Chance: Min specified is out of range with fixed. Min should be, at least, \" + min\r\n        );\r\n        testRange(\r\n            options.max && options.fixed && options.max > max,\r\n            \"Chance: Max specified is out of range with fixed. Max should be, at most, \" + max\r\n        );\r\n\r\n        options = initOptions(options, { min : min, max : max });\r\n\r\n        // Todo - Make this work!\r\n        // options.precision = (typeof options.precision !== \"undefined\") ? options.precision : false;\r\n\r\n        num = this.integer({min: options.min * fixed, max: options.max * fixed});\r\n        var num_fixed = (num / fixed).toFixed(options.fixed);\r\n\r\n        return parseFloat(num_fixed);\r\n    };\r\n\r\n    /**\r\n     *  Return a random integer\r\n     *\r\n     *  NOTE the max and min are INCLUDED in the range. So:\r\n     *  chance.integer({min: 1, max: 3});\r\n     *  would return either 1, 2, or 3.\r\n     *\r\n     *  @param {Object} [options={}] can specify a min and/or max\r\n     *  @returns {Number} a single random integer number\r\n     *  @throws {RangeError} min cannot be greater than max\r\n     */\r\n    Chance.prototype.integer = function (options) {\r\n        // 9007199254740992 (2^53) is the max integer number in JavaScript\r\n        // See: http://vq.io/132sa2j\r\n        options = initOptions(options, {min: MIN_INT, max: MAX_INT});\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);\r\n    };\r\n\r\n    /**\r\n     *  Return a random natural\r\n     *\r\n     *  NOTE the max and min are INCLUDED in the range. So:\r\n     *  chance.natural({min: 1, max: 3});\r\n     *  would return either 1, 2, or 3.\r\n     *\r\n     *  @param {Object} [options={}] can specify a min and/or max\r\n     *  @returns {Number} a single random integer number\r\n     *  @throws {RangeError} min cannot be greater than max\r\n     */\r\n    Chance.prototype.natural = function (options) {\r\n        options = initOptions(options, {min: 0, max: MAX_INT});\r\n        testRange(options.min < 0, \"Chance: Min cannot be less than zero.\");\r\n        return this.integer(options);\r\n    };\r\n\r\n    /**\r\n     *  Return a random string\r\n     *\r\n     *  @param {Object} [options={}] can specify a length\r\n     *  @returns {String} a string of random length\r\n     *  @throws {RangeError} length cannot be less than zero\r\n     */\r\n    Chance.prototype.string = function (options) {\r\n        options = initOptions(options, { length: this.natural({min: 5, max: 20}) });\r\n        testRange(options.length < 0, \"Chance: Length cannot be less than zero.\");\r\n        var length = options.length,\r\n            text = this.n(this.character, length, options);\r\n\r\n        return text.join(\"\");\r\n    };\r\n\r\n    // -- End Basics --\r\n\r\n    // -- Helpers --\r\n\r\n    Chance.prototype.capitalize = function (word) {\r\n        return word.charAt(0).toUpperCase() + word.substr(1);\r\n    };\r\n\r\n    Chance.prototype.mixin = function (obj) {\r\n        for (var func_name in obj) {\r\n            Chance.prototype[func_name] = obj[func_name];\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *  Given a function that generates something random and a number of items to generate,\r\n     *    return an array of items where none repeat.\r\n     *\r\n     *  @param {Function} fn the function that generates something random\r\n     *  @param {Number} num number of terms to generate\r\n     *  @param {Object} options any options to pass on to the generator function\r\n     *  @returns {Array} an array of length `num` with every item generated by `fn` and unique\r\n     *\r\n     *  There can be more parameters after these. All additional parameters are provided to the given function\r\n     */\r\n    Chance.prototype.unique = function(fn, num, options) {\r\n        testRange(\r\n            typeof fn !== \"function\",\r\n            \"Chance: The first argument must be a function.\"\r\n        );\r\n\r\n        var comparator = function(arr, val) { return arr.indexOf(val) !== -1; };\r\n\r\n        if (options) {\r\n            comparator = options.comparator || comparator;\r\n        }\r\n\r\n        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);\r\n\r\n        while (arr.length < num) {\r\n            var clonedParams = JSON.parse(JSON.stringify(params));\r\n            result = fn.apply(this, clonedParams);\r\n            if (!comparator(arr, result)) {\r\n                arr.push(result);\r\n                // reset count when unique found\r\n                count = 0;\r\n            }\r\n\r\n            if (++count > MAX_DUPLICATES) {\r\n                throw new RangeError(\"Chance: num is likely too large for sample set\");\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *  Gives an array of n random terms\r\n     *\r\n     *  @param {Function} fn the function that generates something random\r\n     *  @param {Number} n number of terms to generate\r\n     *  @returns {Array} an array of length `n` with items generated by `fn`\r\n     *\r\n     *  There can be more parameters after these. All additional parameters are provided to the given function\r\n     */\r\n    Chance.prototype.n = function(fn, n) {\r\n        testRange(\r\n            typeof fn !== \"function\",\r\n            \"Chance: The first argument must be a function.\"\r\n        );\r\n\r\n        if (typeof n === 'undefined') {\r\n            n = 1;\r\n        }\r\n        var i = n, arr = [], params = slice.call(arguments, 2);\r\n\r\n        // Providing a negative count should result in a noop.\r\n        i = Math.max( 0, i );\r\n\r\n        for (null; i--; null) {\r\n            arr.push(fn.apply(this, params));\r\n        }\r\n\r\n        return arr;\r\n    };\r\n\r\n    // H/T to SO for this one: http://vq.io/OtUrZ5\r\n    Chance.prototype.pad = function (number, width, pad) {\r\n        // Default pad to 0 if none provided\r\n        pad = pad || '0';\r\n        // Convert number to a string\r\n        number = number + '';\r\n        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;\r\n    };\r\n\r\n    // DEPRECATED on 2015-10-01\r\n    Chance.prototype.pick = function (arr, count) {\r\n        if (arr.length === 0) {\r\n            throw new RangeError(\"Chance: Cannot pick() from an empty array\");\r\n        }\r\n        if (!count || count === 1) {\r\n            return arr[this.natural({max: arr.length - 1})];\r\n        } else {\r\n            return this.shuffle(arr).slice(0, count);\r\n        }\r\n    };\r\n\r\n    // Given an array, returns a single random element\r\n    Chance.prototype.pickone = function (arr) {\r\n        if (arr.length === 0) {\r\n          throw new RangeError(\"Chance: Cannot pickone() from an empty array\");\r\n        }\r\n        return arr[this.natural({max: arr.length - 1})];\r\n    };\r\n\r\n    // Given an array, returns a random set with 'count' elements\r\n    Chance.prototype.pickset = function (arr, count) {\r\n        if (count === 0) {\r\n            return [];\r\n        }\r\n        if (arr.length === 0) {\r\n            throw new RangeError(\"Chance: Cannot pickset() from an empty array\");\r\n        }\r\n        if (count < 0) {\r\n            throw new RangeError(\"Chance: count must be positive number\");\r\n        }\r\n        if (!count || count === 1) {\r\n            return [ this.pickone(arr) ];\r\n        } else {\r\n            return this.shuffle(arr).slice(0, count);\r\n        }\r\n    };\r\n\r\n    Chance.prototype.shuffle = function (arr) {\r\n        var old_array = arr.slice(0),\r\n            new_array = [],\r\n            j = 0,\r\n            length = Number(old_array.length);\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            // Pick a random index from the array\r\n            j = this.natural({max: old_array.length - 1});\r\n            // Add it to the new array\r\n            new_array[i] = old_array[j];\r\n            // Remove that element from the original array\r\n            old_array.splice(j, 1);\r\n        }\r\n\r\n        return new_array;\r\n    };\r\n\r\n    // Returns a single item from an array with relative weighting of odds\r\n    Chance.prototype.weighted = function (arr, weights, trim) {\r\n        if (arr.length !== weights.length) {\r\n            throw new RangeError(\"Chance: length of array and weights must match\");\r\n        }\r\n\r\n        // scan weights array and sum valid entries\r\n        var sum = 0;\r\n        var val;\r\n        for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\r\n            val = weights[weightIndex];\r\n            if (val > 0) {\r\n                sum += val;\r\n            }\r\n        }\r\n\r\n        if (sum === 0) {\r\n            throw new RangeError(\"Chance: no valid entries in array weights\");\r\n        }\r\n\r\n        // select a value within range\r\n        var selected = this.random() * sum;\r\n\r\n        // find array entry corresponding to selected value\r\n        var total = 0;\r\n        var lastGoodIdx = -1;\r\n        var chosenIdx;\r\n        for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {\r\n            val = weights[weightIndex];\r\n            total += val;\r\n            if (val > 0) {\r\n                if (selected <= total) {\r\n                    chosenIdx = weightIndex;\r\n                    break;\r\n                }\r\n                lastGoodIdx = weightIndex;\r\n            }\r\n\r\n            // handle any possible rounding error comparison to ensure something is picked\r\n            if (weightIndex === (weights.length - 1)) {\r\n                chosenIdx = lastGoodIdx;\r\n            }\r\n        }\r\n\r\n        var chosen = arr[chosenIdx];\r\n        trim = (typeof trim === 'undefined') ? false : trim;\r\n        if (trim) {\r\n            arr.splice(chosenIdx, 1);\r\n            weights.splice(chosenIdx, 1);\r\n        }\r\n\r\n        return chosen;\r\n    };\r\n\r\n    // -- End Helpers --\r\n\r\n    // -- Text --\r\n\r\n    Chance.prototype.paragraph = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var sentences = options.sentences || this.natural({min: 3, max: 7}),\r\n            sentence_array = this.n(this.sentence, sentences);\r\n\r\n        return sentence_array.join(' ');\r\n    };\r\n\r\n    // Could get smarter about this than generating random words and\r\n    // chaining them together. Such as: http://vq.io/1a5ceOh\r\n    Chance.prototype.sentence = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var words = options.words || this.natural({min: 12, max: 18}),\r\n            punctuation = options.punctuation,\r\n            text, word_array = this.n(this.word, words);\r\n\r\n        text = word_array.join(' ');\r\n\r\n        // Capitalize first letter of sentence\r\n        text = this.capitalize(text);\r\n\r\n        // Make sure punctuation has a usable value\r\n        if (punctuation !== false && !/^[\\.\\?;!:]$/.test(punctuation)) {\r\n            punctuation = '.';\r\n        }\r\n\r\n        // Add punctuation mark\r\n        if (punctuation) {\r\n            text += punctuation;\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    Chance.prototype.syllable = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var length = options.length || this.natural({min: 2, max: 3}),\r\n            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones\r\n            vowels = 'aeiou', // vowels\r\n            all = consonants + vowels, // all\r\n            text = '',\r\n            chr;\r\n\r\n        // I'm sure there's a more elegant way to do this, but this works\r\n        // decently well.\r\n        for (var i = 0; i < length; i++) {\r\n            if (i === 0) {\r\n                // First character can be anything\r\n                chr = this.character({pool: all});\r\n            } else if (consonants.indexOf(chr) === -1) {\r\n                // Last character was a vowel, now we want a consonant\r\n                chr = this.character({pool: consonants});\r\n            } else {\r\n                // Last character was a consonant, now we want a vowel\r\n                chr = this.character({pool: vowels});\r\n            }\r\n\r\n            text += chr;\r\n        }\r\n\r\n        if (options.capitalize) {\r\n            text = this.capitalize(text);\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    Chance.prototype.word = function (options) {\r\n        options = initOptions(options);\r\n\r\n        testRange(\r\n            options.syllables && options.length,\r\n            \"Chance: Cannot specify both syllables AND length.\"\r\n        );\r\n\r\n        var syllables = options.syllables || this.natural({min: 1, max: 3}),\r\n            text = '';\r\n\r\n        if (options.length) {\r\n            // Either bound word by length\r\n            do {\r\n                text += this.syllable();\r\n            } while (text.length < options.length);\r\n            text = text.substring(0, options.length);\r\n        } else {\r\n            // Or by number of syllables\r\n            for (var i = 0; i < syllables; i++) {\r\n                text += this.syllable();\r\n            }\r\n        }\r\n\r\n        if (options.capitalize) {\r\n            text = this.capitalize(text);\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    // -- End Text --\r\n\r\n    // -- Person --\r\n\r\n    Chance.prototype.age = function (options) {\r\n        options = initOptions(options);\r\n        var ageRange;\r\n\r\n        switch (options.type) {\r\n            case 'child':\r\n                ageRange = {min: 0, max: 12};\r\n                break;\r\n            case 'teen':\r\n                ageRange = {min: 13, max: 19};\r\n                break;\r\n            case 'adult':\r\n                ageRange = {min: 18, max: 65};\r\n                break;\r\n            case 'senior':\r\n                ageRange = {min: 65, max: 100};\r\n                break;\r\n            case 'all':\r\n                ageRange = {min: 0, max: 100};\r\n                break;\r\n            default:\r\n                ageRange = {min: 18, max: 65};\r\n                break;\r\n        }\r\n\r\n        return this.natural(ageRange);\r\n    };\r\n\r\n    Chance.prototype.birthday = function (options) {\r\n        var age = this.age(options);\r\n        var currentYear = new Date().getFullYear();\r\n\r\n        if (options && options.type) {\r\n            var min = new Date();\r\n            var max = new Date();\r\n            min.setFullYear(currentYear - age - 1);\r\n            max.setFullYear(currentYear - age);\r\n\r\n            options = initOptions(options, {\r\n                min: min,\r\n                max: max\r\n            });\r\n        } else {\r\n            options = initOptions(options, {\r\n                year: currentYear - age\r\n            });\r\n        }\r\n\r\n        return this.date(options);\r\n    };\r\n\r\n    // CPF; ID to identify taxpayers in Brazil\r\n    Chance.prototype.cpf = function (options) {\r\n        options = initOptions(options, {\r\n            formatted: true\r\n        });\r\n\r\n        var n = this.n(this.natural, 9, { max: 9 });\r\n        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;\r\n        d1 = 11 - (d1 % 11);\r\n        if (d1>=10) {\r\n            d1 = 0;\r\n        }\r\n        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;\r\n        d2 = 11 - (d2 % 11);\r\n        if (d2>=10) {\r\n            d2 = 0;\r\n        }\r\n        var cpf = ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;\r\n        return options.formatted ? cpf : cpf.replace(/\\D/g,'');\r\n    };\r\n\r\n    // CNPJ: ID to identify companies in Brazil\r\n    Chance.prototype.cnpj = function (options) {\r\n        options = initOptions(options, {\r\n            formatted: true\r\n        });\r\n\r\n        var n = this.n(this.natural, 12, { max: 12 });\r\n        var d1 = n[11]*2+n[10]*3+n[9]*4+n[8]*5+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\r\n        d1 = 11 - (d1 % 11);\r\n        if (d1<2) {\r\n            d1 = 0;\r\n        }\r\n        var d2 = d1*2+n[11]*3+n[10]*4+n[9]*5+n[8]*6+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\r\n        d2 = 11 - (d2 % 11);\r\n        if (d2<2) {\r\n            d2 = 0;\r\n        }\r\n        var cnpj = ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/'+n[8]+n[9]+n[10]+n[11]+'-'+d1+d2;\r\n        return options.formatted ? cnpj : cnpj.replace(/\\D/g,'');\r\n    };\r\n\r\n    Chance.prototype.first = function (options) {\r\n        options = initOptions(options, {gender: this.gender(), nationality: 'en'});\r\n        return this.pick(this.get(\"firstNames\")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);\r\n    };\r\n\r\n    Chance.prototype.gender = function (options) {\r\n        options = initOptions(options, {extraGenders: []});\r\n        return this.pick(['Male', 'Female'].concat(options.extraGenders));\r\n    };\r\n\r\n    Chance.prototype.last = function (options) {\r\n        options = initOptions(options, {nationality: 'en'});\r\n        return this.pick(this.get(\"lastNames\")[options.nationality.toLowerCase()]);\r\n    };\r\n\r\n    Chance.prototype.israelId=function(){\r\n        var x=this.string({pool: '0123456789',length:8});\r\n        var y=0;\r\n        for (var i=0;i<x.length;i++){\r\n            var thisDigit=  x[i] *  (i/2===parseInt(i/2) ? 1 : 2);\r\n            thisDigit=this.pad(thisDigit,2).toString();\r\n            thisDigit=parseInt(thisDigit[0]) + parseInt(thisDigit[1]);\r\n            y=y+thisDigit;\r\n        }\r\n        x=x+(10-parseInt(y.toString().slice(-1))).toString().slice(-1);\r\n        return x;\r\n    };\r\n\r\n    Chance.prototype.mrz = function (options) {\r\n        var checkDigit = function (input) {\r\n            var alpha = \"<ABCDEFGHIJKLMNOPQRSTUVWXYXZ\".split(''),\r\n                multipliers = [ 7, 3, 1 ],\r\n                runningTotal = 0;\r\n\r\n            if (typeof input !== 'string') {\r\n                input = input.toString();\r\n            }\r\n\r\n            input.split('').forEach(function(character, idx) {\r\n                var pos = alpha.indexOf(character);\r\n\r\n                if(pos !== -1) {\r\n                    character = pos === 0 ? 0 : pos + 9;\r\n                } else {\r\n                    character = parseInt(character, 10);\r\n                }\r\n                character *= multipliers[idx % multipliers.length];\r\n                runningTotal += character;\r\n            });\r\n            return runningTotal % 10;\r\n        };\r\n        var generate = function (opts) {\r\n            var pad = function (length) {\r\n                return new Array(length + 1).join('<');\r\n            };\r\n            var number = [ 'P<',\r\n                           opts.issuer,\r\n                           opts.last.toUpperCase(),\r\n                           '<<',\r\n                           opts.first.toUpperCase(),\r\n                           pad(39 - (opts.last.length + opts.first.length + 2)),\r\n                           opts.passportNumber,\r\n                           checkDigit(opts.passportNumber),\r\n                           opts.nationality,\r\n                           opts.dob,\r\n                           checkDigit(opts.dob),\r\n                           opts.gender,\r\n                           opts.expiry,\r\n                           checkDigit(opts.expiry),\r\n                           pad(14),\r\n                           checkDigit(pad(14)) ].join('');\r\n\r\n            return number +\r\n                (checkDigit(number.substr(44, 10) +\r\n                            number.substr(57, 7) +\r\n                            number.substr(65, 7)));\r\n        };\r\n\r\n        var that = this;\r\n\r\n        options = initOptions(options, {\r\n            first: this.first(),\r\n            last: this.last(),\r\n            passportNumber: this.integer({min: 100000000, max: 999999999}),\r\n            dob: (function () {\r\n                var date = that.birthday({type: 'adult'});\r\n                return [date.getFullYear().toString().substr(2),\r\n                        that.pad(date.getMonth() + 1, 2),\r\n                        that.pad(date.getDate(), 2)].join('');\r\n            }()),\r\n            expiry: (function () {\r\n                var date = new Date();\r\n                return [(date.getFullYear() + 5).toString().substr(2),\r\n                        that.pad(date.getMonth() + 1, 2),\r\n                        that.pad(date.getDate(), 2)].join('');\r\n            }()),\r\n            gender: this.gender() === 'Female' ? 'F': 'M',\r\n            issuer: 'GBR',\r\n            nationality: 'GBR'\r\n        });\r\n        return generate (options);\r\n    };\r\n\r\n    Chance.prototype.name = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var first = this.first(options),\r\n            last = this.last(options),\r\n            name;\r\n\r\n        if (options.middle) {\r\n            name = first + ' ' + this.first(options) + ' ' + last;\r\n        } else if (options.middle_initial) {\r\n            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;\r\n        } else {\r\n            name = first + ' ' + last;\r\n        }\r\n\r\n        if (options.prefix) {\r\n            name = this.prefix(options) + ' ' + name;\r\n        }\r\n\r\n        if (options.suffix) {\r\n            name = name + ' ' + this.suffix(options);\r\n        }\r\n\r\n        return name;\r\n    };\r\n\r\n    // Return the list of available name prefixes based on supplied gender.\r\n    // @todo introduce internationalization\r\n    Chance.prototype.name_prefixes = function (gender) {\r\n        gender = gender || \"all\";\r\n        gender = gender.toLowerCase();\r\n\r\n        var prefixes = [\r\n            { name: 'Doctor', abbreviation: 'Dr.' }\r\n        ];\r\n\r\n        if (gender === \"male\" || gender === \"all\") {\r\n            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });\r\n        }\r\n\r\n        if (gender === \"female\" || gender === \"all\") {\r\n            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });\r\n            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });\r\n        }\r\n\r\n        return prefixes;\r\n    };\r\n\r\n    // Alias for name_prefix\r\n    Chance.prototype.prefix = function (options) {\r\n        return this.name_prefix(options);\r\n    };\r\n\r\n    Chance.prototype.name_prefix = function (options) {\r\n        options = initOptions(options, { gender: \"all\" });\r\n        return options.full ?\r\n            this.pick(this.name_prefixes(options.gender)).name :\r\n            this.pick(this.name_prefixes(options.gender)).abbreviation;\r\n    };\r\n    //Hungarian ID number\r\n    Chance.prototype.HIDN= function(){\r\n     //Hungarian ID nuber structure: XXXXXXYY (X=number,Y=Capital Latin letter)\r\n      var idn_pool=\"0123456789\";\r\n      var idn_chrs=\"ABCDEFGHIJKLMNOPQRSTUVWXYXZ\";\r\n      var idn=\"\";\r\n        idn+=this.string({pool:idn_pool,length:6});\r\n        idn+=this.string({pool:idn_chrs,length:2});\r\n        return idn;\r\n    };\r\n\r\n\r\n    Chance.prototype.ssn = function (options) {\r\n        options = initOptions(options, {ssnFour: false, dashes: true});\r\n        var ssn_pool = \"1234567890\",\r\n            ssn,\r\n            dash = options.dashes ? '-' : '';\r\n\r\n        if(!options.ssnFour) {\r\n            ssn = this.string({pool: ssn_pool, length: 3}) + dash +\r\n            this.string({pool: ssn_pool, length: 2}) + dash +\r\n            this.string({pool: ssn_pool, length: 4});\r\n        } else {\r\n            ssn = this.string({pool: ssn_pool, length: 4});\r\n        }\r\n        return ssn;\r\n    };\r\n\r\n    // Return the list of available name suffixes\r\n    // @todo introduce internationalization\r\n    Chance.prototype.name_suffixes = function () {\r\n        var suffixes = [\r\n            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },\r\n            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },\r\n            { name: 'Esquire', abbreviation: 'Esq.' },\r\n            { name: 'Junior', abbreviation: 'Jr.' },\r\n            { name: 'Juris Doctor', abbreviation: 'J.D.' },\r\n            { name: 'Master of Arts', abbreviation: 'M.A.' },\r\n            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },\r\n            { name: 'Master of Science', abbreviation: 'M.S.' },\r\n            { name: 'Medical Doctor', abbreviation: 'M.D.' },\r\n            { name: 'Senior', abbreviation: 'Sr.' },\r\n            { name: 'The Third', abbreviation: 'III' },\r\n            { name: 'The Fourth', abbreviation: 'IV' },\r\n            { name: 'Bachelor of Engineering', abbreviation: 'B.E' },\r\n            { name: 'Bachelor of Technology', abbreviation: 'B.TECH' }\r\n        ];\r\n        return suffixes;\r\n    };\r\n\r\n    // Alias for name_suffix\r\n    Chance.prototype.suffix = function (options) {\r\n        return this.name_suffix(options);\r\n    };\r\n\r\n    Chance.prototype.name_suffix = function (options) {\r\n        options = initOptions(options);\r\n        return options.full ?\r\n            this.pick(this.name_suffixes()).name :\r\n            this.pick(this.name_suffixes()).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.nationalities = function () {\r\n        return this.get(\"nationalities\");\r\n    };\r\n\r\n    // Generate random nationality based on json list\r\n    Chance.prototype.nationality = function () {\r\n        var nationality = this.pick(this.nationalities());\r\n        return nationality.name;\r\n    };\r\n\r\n    // -- End Person --\r\n\r\n    // -- Mobile --\r\n    // Android GCM Registration ID\r\n    Chance.prototype.android_id = function () {\r\n        return \"APA91\" + this.string({ pool: \"0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\", length: 178 });\r\n    };\r\n\r\n    // Apple Push Token\r\n    Chance.prototype.apple_token = function () {\r\n        return this.string({ pool: \"abcdef1234567890\", length: 64 });\r\n    };\r\n\r\n    // Windows Phone 8 ANID2\r\n    Chance.prototype.wp8_anid2 = function () {\r\n        return base64( this.hash( { length : 32 } ) );\r\n    };\r\n\r\n    // Windows Phone 7 ANID\r\n    Chance.prototype.wp7_anid = function () {\r\n        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });\r\n    };\r\n\r\n    // BlackBerry Device PIN\r\n    Chance.prototype.bb_pin = function () {\r\n        return this.hash({ length: 8 });\r\n    };\r\n\r\n    // -- End Mobile --\r\n\r\n    // -- Web --\r\n    Chance.prototype.avatar = function (options) {\r\n        var url = null;\r\n        var URL_BASE = '//www.gravatar.com/avatar/';\r\n        var PROTOCOLS = {\r\n            http: 'http',\r\n            https: 'https'\r\n        };\r\n        var FILE_TYPES = {\r\n            bmp: 'bmp',\r\n            gif: 'gif',\r\n            jpg: 'jpg',\r\n            png: 'png'\r\n        };\r\n        var FALLBACKS = {\r\n            '404': '404', // Return 404 if not found\r\n            mm: 'mm', // Mystery man\r\n            identicon: 'identicon', // Geometric pattern based on hash\r\n            monsterid: 'monsterid', // A generated monster icon\r\n            wavatar: 'wavatar', // A generated face\r\n            retro: 'retro', // 8-bit icon\r\n            blank: 'blank' // A transparent png\r\n        };\r\n        var RATINGS = {\r\n            g: 'g',\r\n            pg: 'pg',\r\n            r: 'r',\r\n            x: 'x'\r\n        };\r\n        var opts = {\r\n            protocol: null,\r\n            email: null,\r\n            fileExtension: null,\r\n            size: null,\r\n            fallback: null,\r\n            rating: null\r\n        };\r\n\r\n        if (!options) {\r\n            // Set to a random email\r\n            opts.email = this.email();\r\n            options = {};\r\n        }\r\n        else if (typeof options === 'string') {\r\n            opts.email = options;\r\n            options = {};\r\n        }\r\n        else if (typeof options !== 'object') {\r\n            return null;\r\n        }\r\n        else if (options.constructor === 'Array') {\r\n            return null;\r\n        }\r\n\r\n        opts = initOptions(options, opts);\r\n\r\n        if (!opts.email) {\r\n            // Set to a random email\r\n            opts.email = this.email();\r\n        }\r\n\r\n        // Safe checking for params\r\n        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ':' : '';\r\n        opts.size = parseInt(opts.size, 0) ? opts.size : '';\r\n        opts.rating = RATINGS[opts.rating] ? opts.rating : '';\r\n        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : '';\r\n        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : '';\r\n\r\n        url =\r\n            opts.protocol +\r\n            URL_BASE +\r\n            this.bimd5.md5(opts.email) +\r\n            (opts.fileExtension ? '.' + opts.fileExtension : '') +\r\n            (opts.size || opts.rating || opts.fallback ? '?' : '') +\r\n            (opts.size ? '&s=' + opts.size.toString() : '') +\r\n            (opts.rating ? '&r=' + opts.rating : '') +\r\n            (opts.fallback ? '&d=' + opts.fallback : '')\r\n            ;\r\n\r\n        return url;\r\n    };\r\n\r\n    /**\r\n     * #Description:\r\n     * ===============================================\r\n     * Generate random color value base on color type:\r\n     * -> hex\r\n     * -> rgb\r\n     * -> rgba\r\n     * -> 0x\r\n     * -> named color\r\n     *\r\n     * #Examples:\r\n     * ===============================================\r\n     * * Geerate random hex color\r\n     * chance.color() => '#79c157' / 'rgb(110,52,164)' / '0x67ae0b' / '#e2e2e2' / '#29CFA7'\r\n     *\r\n     * * Generate Hex based color value\r\n     * chance.color({format: 'hex'})    => '#d67118'\r\n     *\r\n     * * Generate simple rgb value\r\n     * chance.color({format: 'rgb'})    => 'rgb(110,52,164)'\r\n     *\r\n     * * Generate Ox based color value\r\n     * chance.color({format: '0x'})     => '0x67ae0b'\r\n     *\r\n     * * Generate graiscale based value\r\n     * chance.color({grayscale: true})  => '#e2e2e2'\r\n     *\r\n     * * Return valide color name\r\n     * chance.color({format: 'name'})   => 'red'\r\n     *\r\n     * * Make color uppercase\r\n     * chance.color({casing: 'upper'})  => '#29CFA7'\r\n     *\r\n     * @param  [object] options\r\n     * @return [string] color value\r\n     */\r\n    Chance.prototype.color = function (options) {\r\n\r\n        function gray(value, delimiter) {\r\n            return [value, value, value].join(delimiter || '');\r\n        }\r\n\r\n        function rgb(hasAlpha) {\r\n\r\n            var rgbValue    = (hasAlpha)    ? 'rgba' : 'rgb';\r\n            var alphaChanal = (hasAlpha)    ? (',' + this.floating({min:0, max:1})) : \"\";\r\n            var colorValue  = (isGrayscale) ? (gray(this.natural({max: 255}), ',')) : (this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.natural({max: 255}));\r\n\r\n            return rgbValue + '(' + colorValue + alphaChanal + ')';\r\n        }\r\n\r\n        function hex(start, end, withHash) {\r\n\r\n            var simbol = (withHash) ? \"#\" : \"\";\r\n            var expression  = (isGrayscale ? gray(this.hash({length: start})) : this.hash({length: end}));\r\n            return simbol + expression;\r\n        }\r\n\r\n        options = initOptions(options, {\r\n            format: this.pick(['hex', 'shorthex', 'rgb', 'rgba', '0x', 'name']),\r\n            grayscale: false,\r\n            casing: 'lower'\r\n        });\r\n\r\n        var isGrayscale = options.grayscale;\r\n        var colorValue;\r\n\r\n        if (options.format === 'hex') {\r\n            colorValue =  hex.call(this, 2, 6, true);\r\n        }\r\n        else if (options.format === 'shorthex') {\r\n            colorValue = hex.call(this, 1, 3, true);\r\n        }\r\n        else if (options.format === 'rgb') {\r\n            colorValue = rgb.call(this, false);\r\n        }\r\n        else if (options.format === 'rgba') {\r\n            colorValue = rgb.call(this, true);\r\n        }\r\n        else if (options.format === '0x') {\r\n            colorValue = '0x' + hex.call(this, 2, 6);\r\n        }\r\n        else if(options.format === 'name') {\r\n            return this.pick(this.get(\"colorNames\"));\r\n        }\r\n        else {\r\n            throw new RangeError('Invalid format provided. Please provide one of \"hex\", \"shorthex\", \"rgb\", \"rgba\", \"0x\" or \"name\".');\r\n        }\r\n\r\n        if (options.casing === 'upper' ) {\r\n            colorValue = colorValue.toUpperCase();\r\n        }\r\n\r\n        return colorValue;\r\n    };\r\n\r\n    Chance.prototype.domain = function (options) {\r\n        options = initOptions(options);\r\n        return this.word() + '.' + (options.tld || this.tld());\r\n    };\r\n\r\n    Chance.prototype.email = function (options) {\r\n        options = initOptions(options);\r\n        return this.word({length: options.length}) + '@' + (options.domain || this.domain());\r\n    };\r\n\r\n    Chance.prototype.fbid = function () {\r\n        return parseInt('10000' + this.natural({max: 100000000000}), 10);\r\n    };\r\n\r\n    Chance.prototype.google_analytics = function () {\r\n        var account = this.pad(this.natural({max: 999999}), 6);\r\n        var property = this.pad(this.natural({max: 99}), 2);\r\n\r\n        return 'UA-' + account + '-' + property;\r\n    };\r\n\r\n    Chance.prototype.hashtag = function () {\r\n        return '#' + this.word();\r\n    };\r\n\r\n    Chance.prototype.ip = function () {\r\n        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy\r\n        // this should probably be updated to account for that rare as it may be\r\n        return this.natural({min: 1, max: 254}) + '.' +\r\n               this.natural({max: 255}) + '.' +\r\n               this.natural({max: 255}) + '.' +\r\n               this.natural({min: 1, max: 254});\r\n    };\r\n\r\n    Chance.prototype.ipv6 = function () {\r\n        var ip_addr = this.n(this.hash, 8, {length: 4});\r\n\r\n        return ip_addr.join(\":\");\r\n    };\r\n\r\n    Chance.prototype.klout = function () {\r\n        return this.natural({min: 1, max: 99});\r\n    };\r\n\r\n    Chance.prototype.semver = function (options) {\r\n        options = initOptions(options, { include_prerelease: true });\r\n\r\n        var range = this.pickone([\"^\", \"~\", \"<\", \">\", \"<=\", \">=\", \"=\"]);\r\n        if (options.range) {\r\n            range = options.range;\r\n        }\r\n\r\n        var prerelease = \"\";\r\n        if (options.include_prerelease) {\r\n            prerelease = this.weighted([\"\", \"-dev\", \"-beta\", \"-alpha\"], [50, 10, 5, 1]);\r\n        }\r\n        return range + this.rpg('3d10').join('.') + prerelease;\r\n    };\r\n\r\n    Chance.prototype.tlds = function () {\r\n        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'bq', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss', 'st', 'su', 'sv', 'sx', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tp', 'tr', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug', 'uk', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'];\r\n    };\r\n\r\n    Chance.prototype.tld = function () {\r\n        return this.pick(this.tlds());\r\n    };\r\n\r\n    Chance.prototype.twitter = function () {\r\n        return '@' + this.word();\r\n    };\r\n\r\n    Chance.prototype.url = function (options) {\r\n        options = initOptions(options, { protocol: \"http\", domain: this.domain(options), domain_prefix: \"\", path: this.word(), extensions: []});\r\n\r\n        var extension = options.extensions.length > 0 ? \".\" + this.pick(options.extensions) : \"\";\r\n        var domain = options.domain_prefix ? options.domain_prefix + \".\" + options.domain : options.domain;\r\n\r\n        return options.protocol + \"://\" + domain + \"/\" + options.path + extension;\r\n    };\r\n\r\n    Chance.prototype.port = function() {\r\n        return this.integer({min: 0, max: 65535});\r\n    };\r\n\r\n    // -- End Web --\r\n\r\n    // -- Location --\r\n\r\n    Chance.prototype.address = function (options) {\r\n        options = initOptions(options);\r\n        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);\r\n    };\r\n\r\n    Chance.prototype.altitude = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: 0, max: 8848});\r\n        return this.floating({\r\n            min: options.min,\r\n            max: options.max,\r\n            fixed: options.fixed\r\n        });\r\n    };\r\n\r\n    Chance.prototype.areacode = function (options) {\r\n        options = initOptions(options, {parens : true});\r\n        // Don't want area codes to start with 1, or have a 9 as the second digit\r\n        var areacode = this.natural({min: 2, max: 9}).toString() +\r\n                this.natural({min: 0, max: 8}).toString() +\r\n                this.natural({min: 0, max: 9}).toString();\r\n\r\n        return options.parens ? '(' + areacode + ')' : areacode;\r\n    };\r\n\r\n    Chance.prototype.city = function () {\r\n        return this.capitalize(this.word({syllables: 3}));\r\n    };\r\n\r\n    Chance.prototype.coordinates = function (options) {\r\n        return this.latitude(options) + ', ' + this.longitude(options);\r\n    };\r\n\r\n    Chance.prototype.countries = function () {\r\n        return this.get(\"countries\");\r\n    };\r\n\r\n    Chance.prototype.country = function (options) {\r\n        options = initOptions(options);\r\n        var country = this.pick(this.countries());\r\n        return options.full ? country.name : country.abbreviation;\r\n    };\r\n\r\n    Chance.prototype.depth = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: -10994, max: 0});\r\n        return this.floating({\r\n            min: options.min,\r\n            max: options.max,\r\n            fixed: options.fixed\r\n        });\r\n    };\r\n\r\n    Chance.prototype.geohash = function (options) {\r\n        options = initOptions(options, { length: 7 });\r\n        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });\r\n    };\r\n\r\n    Chance.prototype.geojson = function (options) {\r\n        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);\r\n    };\r\n\r\n    Chance.prototype.latitude = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: -90, max: 90});\r\n        return this.floating({min: options.min, max: options.max, fixed: options.fixed});\r\n    };\r\n\r\n    Chance.prototype.longitude = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: -180, max: 180});\r\n        return this.floating({min: options.min, max: options.max, fixed: options.fixed});\r\n    };\r\n\r\n    Chance.prototype.phone = function (options) {\r\n        var self = this,\r\n            numPick,\r\n            ukNum = function (parts) {\r\n                var section = [];\r\n                //fills the section part of the phone number with random numbers.\r\n                parts.sections.forEach(function(n) {\r\n                    section.push(self.string({ pool: '0123456789', length: n}));\r\n                });\r\n                return parts.area + section.join(' ');\r\n            };\r\n        options = initOptions(options, {\r\n            formatted: true,\r\n            country: 'us',\r\n            mobile: false\r\n        });\r\n        if (!options.formatted) {\r\n            options.parens = false;\r\n        }\r\n        var phone;\r\n        switch (options.country) {\r\n            case 'fr':\r\n                if (!options.mobile) {\r\n                    numPick = this.pick([\r\n                        // Valid zone and département codes.\r\n                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '09' + self.string({ pool: '0123456789', length: 8}),\r\n                    ]);\r\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\r\n                } else {\r\n                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});\r\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\r\n                }\r\n                break;\r\n            case 'uk':\r\n                if (!options.mobile) {\r\n                    numPick = this.pick([\r\n                        //valid area codes of major cities/counties followed by random numbers in required format.\r\n                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },\r\n                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },\r\n                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },\r\n                        { area: '024 7', sections: [3,4] },\r\n                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },\r\n                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [6] },\r\n                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [6] },\r\n                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [6] },\r\n                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [6] },\r\n                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [6] },\r\n                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [6] },\r\n                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [6] },\r\n                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [6] }\r\n                    ]);\r\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');\r\n                } else {\r\n                    numPick = this.pick([\r\n                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },\r\n                        { area: '07624 ', sections: [6] }\r\n                    ]);\r\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');\r\n                }\r\n                break;\r\n            case 'us':\r\n                var areacode = this.areacode(options).toString();\r\n                var exchange = this.natural({ min: 2, max: 9 }).toString() +\r\n                    this.natural({ min: 0, max: 9 }).toString() +\r\n                    this.natural({ min: 0, max: 9 }).toString();\r\n                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}\r\n                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;\r\n        }\r\n        return phone;\r\n    };\r\n\r\n    Chance.prototype.postal = function () {\r\n        // Postal District\r\n        var pd = this.character({pool: \"XVTSRPNKLMHJGECBA\"});\r\n        // Forward Sortation Area (FSA)\r\n        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"});\r\n        // Local Delivery Unut (LDU)\r\n        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"}) + this.natural({max: 9});\r\n\r\n        return fsa + \" \" + ldu;\r\n    };\r\n\r\n    Chance.prototype.counties = function (options) {\r\n        options = initOptions(options, { country: 'uk' });\r\n        return this.get(\"counties\")[options.country.toLowerCase()];\r\n    };\r\n\r\n    Chance.prototype.county = function (options) {\r\n        return this.pick(this.counties(options)).name;\r\n    };\r\n\r\n    Chance.prototype.provinces = function (options) {\r\n        options = initOptions(options, { country: 'ca' });\r\n        return this.get(\"provinces\")[options.country.toLowerCase()];\r\n    };\r\n\r\n    Chance.prototype.province = function (options) {\r\n        return (options && options.full) ?\r\n            this.pick(this.provinces(options)).name :\r\n            this.pick(this.provinces(options)).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.state = function (options) {\r\n        return (options && options.full) ?\r\n            this.pick(this.states(options)).name :\r\n            this.pick(this.states(options)).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.states = function (options) {\r\n        options = initOptions(options, { country: 'us', us_states_and_dc: true } );\r\n\r\n        var states;\r\n\r\n        switch (options.country.toLowerCase()) {\r\n            case 'us':\r\n                var us_states_and_dc = this.get(\"us_states_and_dc\"),\r\n                    territories = this.get(\"territories\"),\r\n                    armed_forces = this.get(\"armed_forces\");\r\n\r\n                states = [];\r\n\r\n                if (options.us_states_and_dc) {\r\n                    states = states.concat(us_states_and_dc);\r\n                }\r\n                if (options.territories) {\r\n                    states = states.concat(territories);\r\n                }\r\n                if (options.armed_forces) {\r\n                    states = states.concat(armed_forces);\r\n                }\r\n                break;\r\n            case 'it':\r\n                states = this.get(\"country_regions\")[options.country.toLowerCase()];\r\n                break;\r\n            case 'uk':\r\n                states = this.get(\"counties\")[options.country.toLowerCase()];\r\n                break;\r\n        }\r\n\r\n        return states;\r\n    };\r\n\r\n    Chance.prototype.street = function (options) {\r\n        options = initOptions(options, { country: 'us', syllables: 2 });\r\n        var     street;\r\n\r\n        switch (options.country.toLowerCase()) {\r\n            case 'us':\r\n                street = this.word({ syllables: options.syllables });\r\n                street = this.capitalize(street);\r\n                street += ' ';\r\n                street += options.short_suffix ?\r\n                    this.street_suffix(options).abbreviation :\r\n                    this.street_suffix(options).name;\r\n                break;\r\n            case 'it':\r\n                street = this.word({ syllables: options.syllables });\r\n                street = this.capitalize(street);\r\n                street = (options.short_suffix ?\r\n                    this.street_suffix(options).abbreviation :\r\n                    this.street_suffix(options).name) + \" \" + street;\r\n                break;\r\n        }\r\n        return street;\r\n    };\r\n\r\n    Chance.prototype.street_suffix = function (options) {\r\n        options = initOptions(options, { country: 'us' });\r\n        return this.pick(this.street_suffixes(options));\r\n    };\r\n\r\n    Chance.prototype.street_suffixes = function (options) {\r\n        options = initOptions(options, { country: 'us' });\r\n        // These are the most common suffixes.\r\n        return this.get(\"street_suffixes\")[options.country.toLowerCase()];\r\n    };\r\n\r\n    // Note: only returning US zip codes, internationalization will be a whole\r\n    // other beast to tackle at some point.\r\n    Chance.prototype.zip = function (options) {\r\n        var zip = this.n(this.natural, 5, {max: 9});\r\n\r\n        if (options && options.plusfour === true) {\r\n            zip.push('-');\r\n            zip = zip.concat(this.n(this.natural, 4, {max: 9}));\r\n        }\r\n\r\n        return zip.join(\"\");\r\n    };\r\n\r\n    // -- End Location --\r\n\r\n    // -- Time\r\n\r\n    Chance.prototype.ampm = function () {\r\n        return this.bool() ? 'am' : 'pm';\r\n    };\r\n\r\n    Chance.prototype.date = function (options) {\r\n        var date_string, date;\r\n\r\n        // If interval is specified we ignore preset\r\n        if(options && (options.min || options.max)) {\r\n            options = initOptions(options, {\r\n                american: true,\r\n                string: false\r\n            });\r\n            var min = typeof options.min !== \"undefined\" ? options.min.getTime() : 1;\r\n            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1\r\n            var max = typeof options.max !== \"undefined\" ? options.max.getTime() : 8640000000000000;\r\n\r\n            date = new Date(this.integer({min: min, max: max}));\r\n        } else {\r\n            var m = this.month({raw: true});\r\n            var daysInMonth = m.days;\r\n\r\n            if(options && options.month) {\r\n                // Mod 12 to allow months outside range of 0-11 (not encouraged, but also not prevented).\r\n                daysInMonth = this.get('months')[((options.month % 12) + 12) % 12].days;\r\n            }\r\n\r\n            options = initOptions(options, {\r\n                year: parseInt(this.year(), 10),\r\n                // Necessary to subtract 1 because Date() 0-indexes month but not day or year\r\n                // for some reason.\r\n                month: m.numeric - 1,\r\n                day: this.natural({min: 1, max: daysInMonth}),\r\n                hour: this.hour({twentyfour: true}),\r\n                minute: this.minute(),\r\n                second: this.second(),\r\n                millisecond: this.millisecond(),\r\n                american: true,\r\n                string: false\r\n            });\r\n\r\n            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);\r\n        }\r\n\r\n        if (options.american) {\r\n            // Adding 1 to the month is necessary because Date() 0-indexes\r\n            // months but not day for some odd reason.\r\n            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\r\n        } else {\r\n            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\r\n        }\r\n\r\n        return options.string ? date_string : date;\r\n    };\r\n\r\n    Chance.prototype.hammertime = function (options) {\r\n        return this.date(options).getTime();\r\n    };\r\n\r\n    Chance.prototype.hour = function (options) {\r\n        options = initOptions(options, {\r\n            min: options && options.twentyfour ? 0 : 1,\r\n            max: options && options.twentyfour ? 23 : 12\r\n        });\r\n\r\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\r\n        testRange(options.twentyfour && options.max > 23, \"Chance: Max cannot be greater than 23 for twentyfour option.\");\r\n        testRange(!options.twentyfour && options.max > 12, \"Chance: Max cannot be greater than 12.\");\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        return this.natural({min: options.min, max: options.max});\r\n    };\r\n\r\n    Chance.prototype.millisecond = function () {\r\n        return this.natural({max: 999});\r\n    };\r\n\r\n    Chance.prototype.minute = Chance.prototype.second = function (options) {\r\n        options = initOptions(options, {min: 0, max: 59});\r\n\r\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\r\n        testRange(options.max > 59, \"Chance: Max cannot be greater than 59.\");\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        return this.natural({min: options.min, max: options.max});\r\n    };\r\n\r\n    Chance.prototype.month = function (options) {\r\n        options = initOptions(options, {min: 1, max: 12});\r\n\r\n        testRange(options.min < 1, \"Chance: Min cannot be less than 1.\");\r\n        testRange(options.max > 12, \"Chance: Max cannot be greater than 12.\");\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        var month = this.pick(this.months().slice(options.min - 1, options.max));\r\n        return options.raw ? month : month.name;\r\n    };\r\n\r\n    Chance.prototype.months = function () {\r\n        return this.get(\"months\");\r\n    };\r\n\r\n    Chance.prototype.second = function () {\r\n        return this.natural({max: 59});\r\n    };\r\n\r\n    Chance.prototype.timestamp = function () {\r\n        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});\r\n    };\r\n\r\n    Chance.prototype.weekday = function (options) {\r\n        options = initOptions(options, {weekday_only: false});\r\n        var weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\r\n        if (!options.weekday_only) {\r\n            weekdays.push(\"Saturday\");\r\n            weekdays.push(\"Sunday\");\r\n        }\r\n        return this.pickone(weekdays);\r\n    };\r\n\r\n    Chance.prototype.year = function (options) {\r\n        // Default to current year as min if none specified\r\n        options = initOptions(options, {min: new Date().getFullYear()});\r\n\r\n        // Default to one century after current year as max if none specified\r\n        options.max = (typeof options.max !== \"undefined\") ? options.max : options.min + 100;\r\n\r\n        return this.natural(options).toString();\r\n    };\r\n\r\n    // -- End Time\r\n\r\n    // -- Finance --\r\n\r\n    Chance.prototype.cc = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var type, number, to_generate;\r\n\r\n        type = (options.type) ?\r\n                    this.cc_type({ name: options.type, raw: true }) :\r\n                    this.cc_type({ raw: true });\r\n\r\n        number = type.prefix.split(\"\");\r\n        to_generate = type.length - type.prefix.length - 1;\r\n\r\n        // Generates n - 1 digits\r\n        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));\r\n\r\n        // Generates the last digit according to Luhn algorithm\r\n        number.push(this.luhn_calculate(number.join(\"\")));\r\n\r\n        return number.join(\"\");\r\n    };\r\n\r\n    Chance.prototype.cc_types = function () {\r\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\r\n        return this.get(\"cc_types\");\r\n    };\r\n\r\n    Chance.prototype.cc_type = function (options) {\r\n        options = initOptions(options);\r\n        var types = this.cc_types(),\r\n            type = null;\r\n\r\n        if (options.name) {\r\n            for (var i = 0; i < types.length; i++) {\r\n                // Accept either name or short_name to specify card type\r\n                if (types[i].name === options.name || types[i].short_name === options.name) {\r\n                    type = types[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (type === null) {\r\n                throw new RangeError(\"Credit card type '\" + options.name + \"'' is not supported\");\r\n            }\r\n        } else {\r\n            type = this.pick(types);\r\n        }\r\n\r\n        return options.raw ? type : type.name;\r\n    };\r\n\r\n    //return all world currency by ISO 4217\r\n    Chance.prototype.currency_types = function () {\r\n        return this.get(\"currency_types\");\r\n    };\r\n\r\n    //return random world currency by ISO 4217\r\n    Chance.prototype.currency = function () {\r\n        return this.pick(this.currency_types());\r\n    };\r\n\r\n    //return all timezones availabel\r\n    Chance.prototype.timezones = function () {\r\n        return this.get(\"timezones\");\r\n    };\r\n\r\n    //return random timezone\r\n    Chance.prototype.timezone = function () {\r\n        return this.pick(this.timezones());\r\n    };\r\n\r\n    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code\r\n    Chance.prototype.currency_pair = function (returnAsString) {\r\n        var currencies = this.unique(this.currency, 2, {\r\n            comparator: function(arr, val) {\r\n\r\n                return arr.reduce(function(acc, item) {\r\n                    // If a match has been found, short circuit check and just return\r\n                    return acc || (item.code === val.code);\r\n                }, false);\r\n            }\r\n        });\r\n\r\n        if (returnAsString) {\r\n            return currencies[0].code + '/' + currencies[1].code;\r\n        } else {\r\n            return currencies;\r\n        }\r\n    };\r\n\r\n    Chance.prototype.dollar = function (options) {\r\n        // By default, a somewhat more sane max for dollar than all available numbers\r\n        options = initOptions(options, {max : 10000, min : 0});\r\n\r\n        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),\r\n            cents = dollar.split('.')[1];\r\n\r\n        if (cents === undefined) {\r\n            dollar += '.00';\r\n        } else if (cents.length < 2) {\r\n            dollar = dollar + '0';\r\n        }\r\n\r\n        if (dollar < 0) {\r\n            return '-$' + dollar.replace('-', '');\r\n        } else {\r\n            return '$' + dollar;\r\n        }\r\n    };\r\n\r\n    Chance.prototype.euro = function (options) {\r\n        return Number(this.dollar(options).replace(\"$\", \"\")).toLocaleString() + \"€\";\r\n    };\r\n\r\n    Chance.prototype.exp = function (options) {\r\n        options = initOptions(options);\r\n        var exp = {};\r\n\r\n        exp.year = this.exp_year();\r\n\r\n        // If the year is this year, need to ensure month is greater than the\r\n        // current month or this expiration will not be valid\r\n        if (exp.year === (new Date().getFullYear()).toString()) {\r\n            exp.month = this.exp_month({future: true});\r\n        } else {\r\n            exp.month = this.exp_month();\r\n        }\r\n\r\n        return options.raw ? exp : exp.month + '/' + exp.year;\r\n    };\r\n\r\n    Chance.prototype.exp_month = function (options) {\r\n        options = initOptions(options);\r\n        var month, month_int,\r\n            // Date object months are 0 indexed\r\n            curMonth = new Date().getMonth() + 1;\r\n\r\n        if (options.future && (curMonth !== 12)) {\r\n            do {\r\n                month = this.month({raw: true}).numeric;\r\n                month_int = parseInt(month, 10);\r\n            } while (month_int <= curMonth);\r\n        } else {\r\n            month = this.month({raw: true}).numeric;\r\n        }\r\n\r\n        return month;\r\n    };\r\n\r\n    Chance.prototype.exp_year = function () {\r\n        var curMonth = new Date().getMonth() + 1,\r\n            curYear = new Date().getFullYear();\r\n\r\n        return this.year({min: ((curMonth === 12) ? (curYear + 1) : curYear), max: (curYear + 10)});\r\n    };\r\n\r\n    Chance.prototype.vat = function (options) {\r\n        options = initOptions(options, { country: 'it' });\r\n        switch (options.country.toLowerCase()) {\r\n            case 'it':\r\n                return this.it_vat();\r\n        }\r\n    };\r\n\r\n    // -- End Finance\r\n\r\n    // -- Regional\r\n\r\n    Chance.prototype.it_vat = function () {\r\n        var it_vat = this.natural({min: 1, max: 1800000});\r\n\r\n        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: 'it' })).code, 3);\r\n        return it_vat + this.luhn_calculate(it_vat);\r\n    };\r\n\r\n    /*\r\n     * this generator is written following the official algorithm\r\n     * all data can be passed explicitely or randomized by calling chance.cf() without options\r\n     * the code does not check that the input data is valid (it goes beyond the scope of the generator)\r\n     *\r\n     * @param  [Object] options = { first: first name,\r\n     *                              last: last name,\r\n     *                              gender: female|male,\r\n                                    birthday: JavaScript date object,\r\n                                    city: string(4), 1 letter + 3 numbers\r\n                                   }\r\n     * @return [string] codice fiscale\r\n     *\r\n    */\r\n    Chance.prototype.cf = function (options) {\r\n        options = options || {};\r\n        var gender = !!options.gender ? options.gender : this.gender(),\r\n            first = !!options.first ? options.first : this.first( { gender: gender, nationality: 'it'} ),\r\n            last = !!options.last ? options.last : this.last( { nationality: 'it'} ),\r\n            birthday = !!options.birthday ? options.birthday : this.birthday(),\r\n            city = !!options.city ? options.city : this.pickone(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'Z']) + this.pad(this.natural({max:999}), 3),\r\n            cf = [],\r\n            name_generator = function(name, isLast) {\r\n                var temp,\r\n                    return_value = [];\r\n\r\n                if (name.length < 3) {\r\n                    return_value = name.split(\"\").concat(\"XXX\".split(\"\")).splice(0,3);\r\n                }\r\n                else {\r\n                    temp = name.toUpperCase().split('').map(function(c){\r\n                        return (\"BCDFGHJKLMNPRSTVWZ\".indexOf(c) !== -1) ? c : undefined;\r\n                    }).join('');\r\n                    if (temp.length > 3) {\r\n                        if (isLast) {\r\n                            temp = temp.substr(0,3);\r\n                        } else {\r\n                            temp = temp[0] + temp.substr(2,2);\r\n                        }\r\n                    }\r\n                    if (temp.length < 3) {\r\n                        return_value = temp;\r\n                        temp = name.toUpperCase().split('').map(function(c){\r\n                            return (\"AEIOU\".indexOf(c) !== -1) ? c : undefined;\r\n                        }).join('').substr(0, 3 - return_value.length);\r\n                    }\r\n                    return_value = return_value + temp;\r\n                }\r\n\r\n                return return_value;\r\n            },\r\n            date_generator = function(birthday, gender, that) {\r\n                var lettermonths = ['A', 'B', 'C', 'D', 'E', 'H', 'L', 'M', 'P', 'R', 'S', 'T'];\r\n\r\n                return  birthday.getFullYear().toString().substr(2) +\r\n                        lettermonths[birthday.getMonth()] +\r\n                        that.pad(birthday.getDate() + ((gender.toLowerCase() === \"female\") ? 40 : 0), 2);\r\n            },\r\n            checkdigit_generator = function(cf) {\r\n                var range1 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                    range2 = \"ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                    evens  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                    odds   = \"BAKPLCQDREVOSFTGUHMINJWZYX\",\r\n                    digit  = 0;\r\n\r\n\r\n                for(var i = 0; i < 15; i++) {\r\n                    if (i % 2 !== 0) {\r\n                        digit += evens.indexOf(range2[range1.indexOf(cf[i])]);\r\n                    }\r\n                    else {\r\n                        digit +=  odds.indexOf(range2[range1.indexOf(cf[i])]);\r\n                    }\r\n                }\r\n                return evens[digit % 26];\r\n            };\r\n\r\n        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split(\"\")).join(\"\");\r\n        cf += checkdigit_generator(cf.toUpperCase(), this);\r\n\r\n        return cf.toUpperCase();\r\n    };\r\n\r\n    Chance.prototype.pl_pesel = function () {\r\n        var number = this.natural({min: 1, max: 9999999999});\r\n        var arr = this.pad(number, 10).split('');\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = parseInt(arr[i]);\r\n        }\r\n\r\n        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;\r\n        if(controlNumber !== 0) {\r\n            controlNumber = 10 - controlNumber;\r\n        }\r\n\r\n        return arr.join('') + controlNumber;\r\n    };\r\n\r\n    Chance.prototype.pl_nip = function () {\r\n        var number = this.natural({min: 1, max: 999999999});\r\n        var arr = this.pad(number, 9).split('');\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = parseInt(arr[i]);\r\n        }\r\n\r\n        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;\r\n        if(controlNumber === 10) {\r\n            return this.pl_nip();\r\n        }\r\n\r\n        return arr.join('') + controlNumber;\r\n    };\r\n\r\n    Chance.prototype.pl_regon = function () {\r\n        var number = this.natural({min: 1, max: 99999999});\r\n        var arr = this.pad(number, 8).split('');\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = parseInt(arr[i]);\r\n        }\r\n\r\n        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;\r\n        if(controlNumber === 10) {\r\n            controlNumber = 0;\r\n        }\r\n\r\n        return arr.join('') + controlNumber;\r\n    };\r\n\r\n    // -- End Regional\r\n\r\n    // -- Miscellaneous --\r\n\r\n    // Dice - For all the board game geeks out there, myself included ;)\r\n    function diceFn (range) {\r\n        return function () {\r\n            return this.natural(range);\r\n        };\r\n    }\r\n    Chance.prototype.d4 = diceFn({min: 1, max: 4});\r\n    Chance.prototype.d6 = diceFn({min: 1, max: 6});\r\n    Chance.prototype.d8 = diceFn({min: 1, max: 8});\r\n    Chance.prototype.d10 = diceFn({min: 1, max: 10});\r\n    Chance.prototype.d12 = diceFn({min: 1, max: 12});\r\n    Chance.prototype.d20 = diceFn({min: 1, max: 20});\r\n    Chance.prototype.d30 = diceFn({min: 1, max: 30});\r\n    Chance.prototype.d100 = diceFn({min: 1, max: 100});\r\n\r\n    Chance.prototype.rpg = function (thrown, options) {\r\n        options = initOptions(options);\r\n        if (!thrown) {\r\n            throw new RangeError(\"A type of die roll must be included\");\r\n        } else {\r\n            var bits = thrown.toLowerCase().split(\"d\"),\r\n                rolls = [];\r\n\r\n            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {\r\n                throw new Error(\"Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die\");\r\n            }\r\n            for (var i = bits[0]; i > 0; i--) {\r\n                rolls[i - 1] = this.natural({min: 1, max: bits[1]});\r\n            }\r\n            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;\r\n        }\r\n    };\r\n\r\n    // Guid\r\n    Chance.prototype.guid = function (options) {\r\n        options = initOptions(options, { version: 5 });\r\n\r\n        var guid_pool = \"abcdef1234567890\",\r\n            variant_pool = \"ab89\",\r\n            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +\r\n                   this.string({ pool: guid_pool, length: 4 }) + '-' +\r\n                   // The Version\r\n                   options.version +\r\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\r\n                   // The Variant\r\n                   this.string({ pool: variant_pool, length: 1 }) +\r\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\r\n                   this.string({ pool: guid_pool, length: 12 });\r\n        return guid;\r\n    };\r\n\r\n    // Hash\r\n    Chance.prototype.hash = function (options) {\r\n        options = initOptions(options, {length : 40, casing: 'lower'});\r\n        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;\r\n        return this.string({pool: pool, length: options.length});\r\n    };\r\n\r\n    Chance.prototype.luhn_check = function (num) {\r\n        var str = num.toString();\r\n        var checkDigit = +str.substring(str.length - 1);\r\n        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));\r\n    };\r\n\r\n    Chance.prototype.luhn_calculate = function (num) {\r\n        var digits = num.toString().split(\"\").reverse();\r\n        var sum = 0;\r\n        var digit;\r\n\r\n        for (var i = 0, l = digits.length; l > i; ++i) {\r\n            digit = +digits[i];\r\n            if (i % 2 === 0) {\r\n                digit *= 2;\r\n                if (digit > 9) {\r\n                    digit -= 9;\r\n                }\r\n            }\r\n            sum += digit;\r\n        }\r\n        return (sum * 9) % 10;\r\n    };\r\n\r\n    // MD5 Hash\r\n    Chance.prototype.md5 = function(options) {\r\n        var opts = { str: '', key: null, raw: false };\r\n\r\n        if (!options) {\r\n            opts.str = this.string();\r\n            options = {};\r\n        }\r\n        else if (typeof options === 'string') {\r\n            opts.str = options;\r\n            options = {};\r\n        }\r\n        else if (typeof options !== 'object') {\r\n            return null;\r\n        }\r\n        else if(options.constructor === 'Array') {\r\n            return null;\r\n        }\r\n\r\n        opts = initOptions(options, opts);\r\n\r\n        if(!opts.str){\r\n            throw new Error('A parameter is required to return an md5 hash.');\r\n        }\r\n\r\n        return this.bimd5.md5(opts.str, opts.key, opts.raw);\r\n    };\r\n\r\n    /**\r\n     * #Description:\r\n     * =====================================================\r\n     * Generate random file name with extention\r\n     *\r\n     * The argument provide extention type\r\n     * -> raster\r\n     * -> vector\r\n     * -> 3d\r\n     * -> document\r\n     *\r\n     * If noting is provided the function return random file name with random\r\n     * extention type of any kind\r\n     *\r\n     * The user can validate the file name length range\r\n     * If noting provided the generated file name is radom\r\n     *\r\n     * #Extention Pool :\r\n     * * Currently the supported extentions are\r\n     *  -> some of the most popular raster image extentions\r\n     *  -> some of the most popular vector image extentions\r\n     *  -> some of the most popular 3d image extentions\r\n     *  -> some of the most popular document extentions\r\n     *\r\n     * #Examples :\r\n     * =====================================================\r\n     *\r\n     * Return random file name with random extention. The file extention\r\n     * is provided by a predifined collection of extentions. More abouth the extention\r\n     * pool can be fond in #Extention Pool section\r\n     *\r\n     * chance.file()\r\n     * => dsfsdhjf.xml\r\n     *\r\n     * In order to generate a file name with sspecific length, specify the\r\n     * length property and integer value. The extention is going to be random\r\n     *\r\n     * chance.file({length : 10})\r\n     * => asrtineqos.pdf\r\n     *\r\n     * In order to geerate file with extention form some of the predifined groups\r\n     * of the extention pool just specify the extenton pool category in fileType property\r\n     *\r\n     * chance.file({fileType : 'raster'})\r\n     * => dshgssds.psd\r\n     *\r\n     * You can provide specific extention for your files\r\n     * chance.file({extention : 'html'})\r\n     * => djfsd.html\r\n     *\r\n     * Or you could pass custom collection of extentons bt array or by object\r\n     * chance.file({extentions : [...]})\r\n     * => dhgsdsd.psd\r\n     *\r\n     * chance.file({extentions : { key : [...], key : [...]}})\r\n     * => djsfksdjsd.xml\r\n     *\r\n     * @param  [collection] options\r\n     * @return [string]\r\n     *\r\n     */\r\n    Chance.prototype.file = function(options) {\r\n\r\n        var fileOptions = options || {};\r\n        var poolCollectionKey = \"fileExtension\";\r\n        var typeRange   = Object.keys(this.get(\"fileExtension\"));//['raster', 'vector', '3d', 'document'];\r\n        var fileName;\r\n        var fileExtention;\r\n\r\n        // Generate random file name\r\n        fileName = this.word({length : fileOptions.length});\r\n\r\n        // Generate file by specific extention provided by the user\r\n        if(fileOptions.extention) {\r\n\r\n            fileExtention = fileOptions.extention;\r\n            return (fileName + '.' + fileExtention);\r\n        }\r\n\r\n        // Generate file by specific axtention collection\r\n        if(fileOptions.extentions) {\r\n\r\n            if(Array.isArray(fileOptions.extentions)) {\r\n\r\n                fileExtention = this.pickone(fileOptions.extentions);\r\n                return (fileName + '.' + fileExtention);\r\n            }\r\n            else if(fileOptions.extentions.constructor === Object) {\r\n\r\n                var extentionObjectCollection = fileOptions.extentions;\r\n                var keys = Object.keys(extentionObjectCollection);\r\n\r\n                fileExtention = this.pickone(extentionObjectCollection[this.pickone(keys)]);\r\n                return (fileName + '.' + fileExtention);\r\n            }\r\n\r\n            throw new Error(\"Expect collection of type Array or Object to be passed as an argument \");\r\n        }\r\n\r\n        // Generate file extention based on specific file type\r\n        if(fileOptions.fileType) {\r\n\r\n            var fileType = fileOptions.fileType;\r\n            if(typeRange.indexOf(fileType) !== -1) {\r\n\r\n                fileExtention = this.pickone(this.get(poolCollectionKey)[fileType]);\r\n                return (fileName + '.' + fileExtention);\r\n            }\r\n\r\n            throw new Error(\"Expect file type value to be 'raster', 'vector', '3d' or 'document' \");\r\n        }\r\n\r\n        // Generate random file name if no extenton options are passed\r\n        fileExtention = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);\r\n        return (fileName + '.' + fileExtention);\r\n    };\r\n\r\n    var data = {\r\n\r\n        firstNames: {\r\n            \"male\": {\r\n                \"en\": [\"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\", \"Christopher\", \"Daniel\", \"Matthew\", \"George\", \"Donald\", \"Anthony\", \"Paul\", \"Mark\", \"Edward\", \"Steven\", \"Kenneth\", \"Andrew\", \"Brian\", \"Joshua\", \"Kevin\", \"Ronald\", \"Timothy\", \"Jason\", \"Jeffrey\", \"Frank\", \"Gary\", \"Ryan\", \"Nicholas\", \"Eric\", \"Stephen\", \"Jacob\", \"Larry\", \"Jonathan\", \"Scott\", \"Raymond\", \"Justin\", \"Brandon\", \"Gregory\", \"Samuel\", \"Benjamin\", \"Patrick\", \"Jack\", \"Henry\", \"Walter\", \"Dennis\", \"Jerry\", \"Alexander\", \"Peter\", \"Tyler\", \"Douglas\", \"Harold\", \"Aaron\", \"Jose\", \"Adam\", \"Arthur\", \"Zachary\", \"Carl\", \"Nathan\", \"Albert\", \"Kyle\", \"Lawrence\", \"Joe\", \"Willie\", \"Gerald\", \"Roger\", \"Keith\", \"Jeremy\", \"Terry\", \"Harry\", \"Ralph\", \"Sean\", \"Jesse\", \"Roy\", \"Louis\", \"Billy\", \"Austin\", \"Bruce\", \"Eugene\", \"Christian\", \"Bryan\", \"Wayne\", \"Russell\", \"Howard\", \"Fred\", \"Ethan\", \"Jordan\", \"Philip\", \"Alan\", \"Juan\", \"Randy\", \"Vincent\", \"Bobby\", \"Dylan\", \"Johnny\", \"Phillip\", \"Victor\", \"Clarence\", \"Ernest\", \"Martin\", \"Craig\", \"Stanley\", \"Shawn\", \"Travis\", \"Bradley\", \"Leonard\", \"Earl\", \"Gabriel\", \"Jimmy\", \"Francis\", \"Todd\", \"Noah\", \"Danny\", \"Dale\", \"Cody\", \"Carlos\", \"Allen\", \"Frederick\", \"Logan\", \"Curtis\", \"Alex\", \"Joel\", \"Luis\", \"Norman\", \"Marvin\", \"Glenn\", \"Tony\", \"Nathaniel\", \"Rodney\", \"Melvin\", \"Alfred\", \"Steve\", \"Cameron\", \"Chad\", \"Edwin\", \"Caleb\", \"Evan\", \"Antonio\", \"Lee\", \"Herbert\", \"Jeffery\", \"Isaac\", \"Derek\", \"Ricky\", \"Marcus\", \"Theodore\", \"Elijah\", \"Luke\", \"Jesus\", \"Eddie\", \"Troy\", \"Mike\", \"Dustin\", \"Ray\", \"Adrian\", \"Bernard\", \"Leroy\", \"Angel\", \"Randall\", \"Wesley\", \"Ian\", \"Jared\", \"Mason\", \"Hunter\", \"Calvin\", \"Oscar\", \"Clifford\", \"Jay\", \"Shane\", \"Ronnie\", \"Barry\", \"Lucas\", \"Corey\", \"Manuel\", \"Leo\", \"Tommy\", \"Warren\", \"Jackson\", \"Isaiah\", \"Connor\", \"Don\", \"Dean\", \"Jon\", \"Julian\", \"Miguel\", \"Bill\", \"Lloyd\", \"Charlie\", \"Mitchell\", \"Leon\", \"Jerome\", \"Darrell\", \"Jeremiah\", \"Alvin\", \"Brett\", \"Seth\", \"Floyd\", \"Jim\", \"Blake\", \"Micheal\", \"Gordon\", \"Trevor\", \"Lewis\", \"Erik\", \"Edgar\", \"Vernon\", \"Devin\", \"Gavin\", \"Jayden\", \"Chris\", \"Clyde\", \"Tom\", \"Derrick\", \"Mario\", \"Brent\", \"Marc\", \"Herman\", \"Chase\", \"Dominic\", \"Ricardo\", \"Franklin\", \"Maurice\", \"Max\", \"Aiden\", \"Owen\", \"Lester\", \"Gilbert\", \"Elmer\", \"Gene\", \"Francisco\", \"Glen\", \"Cory\", \"Garrett\", \"Clayton\", \"Sam\", \"Jorge\", \"Chester\", \"Alejandro\", \"Jeff\", \"Harvey\", \"Milton\", \"Cole\", \"Ivan\", \"Andre\", \"Duane\", \"Landon\"],\r\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163\r\n                \"it\": [\"Adolfo\", \"Alberto\", \"Aldo\", \"Alessandro\", \"Alessio\", \"Alfredo\", \"Alvaro\", \"Andrea\", \"Angelo\", \"Angiolo\", \"Antonino\", \"Antonio\", \"Attilio\", \"Benito\", \"Bernardo\", \"Bruno\", \"Carlo\", \"Cesare\", \"Christian\", \"Claudio\", \"Corrado\", \"Cosimo\", \"Cristian\", \"Cristiano\", \"Daniele\", \"Dario\", \"David\", \"Davide\", \"Diego\", \"Dino\", \"Domenico\", \"Duccio\", \"Edoardo\", \"Elia\", \"Elio\", \"Emanuele\", \"Emiliano\", \"Emilio\", \"Enrico\", \"Enzo\", \"Ettore\", \"Fabio\", \"Fabrizio\", \"Federico\", \"Ferdinando\", \"Fernando\", \"Filippo\", \"Francesco\", \"Franco\", \"Gabriele\", \"Giacomo\", \"Giampaolo\", \"Giampiero\", \"Giancarlo\", \"Gianfranco\", \"Gianluca\", \"Gianmarco\", \"Gianni\", \"Gino\", \"Giorgio\", \"Giovanni\", \"Giuliano\", \"Giulio\", \"Giuseppe\", \"Graziano\", \"Gregorio\", \"Guido\", \"Iacopo\", \"Jacopo\", \"Lapo\", \"Leonardo\", \"Lorenzo\", \"Luca\", \"Luciano\", \"Luigi\", \"Manuel\", \"Marcello\", \"Marco\", \"Marino\", \"Mario\", \"Massimiliano\", \"Massimo\", \"Matteo\", \"Mattia\", \"Maurizio\", \"Mauro\", \"Michele\", \"Mirko\", \"Mohamed\", \"Nello\", \"Neri\", \"Niccolò\", \"Nicola\", \"Osvaldo\", \"Otello\", \"Paolo\", \"Pier Luigi\", \"Piero\", \"Pietro\", \"Raffaele\", \"Remo\", \"Renato\", \"Renzo\", \"Riccardo\", \"Roberto\", \"Rolando\", \"Romano\", \"Salvatore\", \"Samuele\", \"Sandro\", \"Sergio\", \"Silvano\", \"Simone\", \"Stefano\", \"Thomas\", \"Tommaso\", \"Ubaldo\", \"Ugo\", \"Umberto\", \"Valerio\", \"Valter\", \"Vasco\", \"Vincenzo\", \"Vittorio\"]\r\n            },\r\n            \"female\": {\r\n                \"en\": [\"Mary\", \"Emma\", \"Elizabeth\", \"Minnie\", \"Margaret\", \"Ida\", \"Alice\", \"Bertha\", \"Sarah\", \"Annie\", \"Clara\", \"Ella\", \"Florence\", \"Cora\", \"Martha\", \"Laura\", \"Nellie\", \"Grace\", \"Carrie\", \"Maude\", \"Mabel\", \"Bessie\", \"Jennie\", \"Gertrude\", \"Julia\", \"Hattie\", \"Edith\", \"Mattie\", \"Rose\", \"Catherine\", \"Lillian\", \"Ada\", \"Lillie\", \"Helen\", \"Jessie\", \"Louise\", \"Ethel\", \"Lula\", \"Myrtle\", \"Eva\", \"Frances\", \"Lena\", \"Lucy\", \"Edna\", \"Maggie\", \"Pearl\", \"Daisy\", \"Fannie\", \"Josephine\", \"Dora\", \"Rosa\", \"Katherine\", \"Agnes\", \"Marie\", \"Nora\", \"May\", \"Mamie\", \"Blanche\", \"Stella\", \"Ellen\", \"Nancy\", \"Effie\", \"Sallie\", \"Nettie\", \"Della\", \"Lizzie\", \"Flora\", \"Susie\", \"Maud\", \"Mae\", \"Etta\", \"Harriet\", \"Sadie\", \"Caroline\", \"Katie\", \"Lydia\", \"Elsie\", \"Kate\", \"Susan\", \"Mollie\", \"Alma\", \"Addie\", \"Georgia\", \"Eliza\", \"Lulu\", \"Nannie\", \"Lottie\", \"Amanda\", \"Belle\", \"Charlotte\", \"Rebecca\", \"Ruth\", \"Viola\", \"Olive\", \"Amelia\", \"Hannah\", \"Jane\", \"Virginia\", \"Emily\", \"Matilda\", \"Irene\", \"Kathryn\", \"Esther\", \"Willie\", \"Henrietta\", \"Ollie\", \"Amy\", \"Rachel\", \"Sara\", \"Estella\", \"Theresa\", \"Augusta\", \"Ora\", \"Pauline\", \"Josie\", \"Lola\", \"Sophia\", \"Leona\", \"Anne\", \"Mildred\", \"Ann\", \"Beulah\", \"Callie\", \"Lou\", \"Delia\", \"Eleanor\", \"Barbara\", \"Iva\", \"Louisa\", \"Maria\", \"Mayme\", \"Evelyn\", \"Estelle\", \"Nina\", \"Betty\", \"Marion\", \"Bettie\", \"Dorothy\", \"Luella\", \"Inez\", \"Lela\", \"Rosie\", \"Allie\", \"Millie\", \"Janie\", \"Cornelia\", \"Victoria\", \"Ruby\", \"Winifred\", \"Alta\", \"Celia\", \"Christine\", \"Beatrice\", \"Birdie\", \"Harriett\", \"Mable\", \"Myra\", \"Sophie\", \"Tillie\", \"Isabel\", \"Sylvia\", \"Carolyn\", \"Isabelle\", \"Leila\", \"Sally\", \"Ina\", \"Essie\", \"Bertie\", \"Nell\", \"Alberta\", \"Katharine\", \"Lora\", \"Rena\", \"Mina\", \"Rhoda\", \"Mathilda\", \"Abbie\", \"Eula\", \"Dollie\", \"Hettie\", \"Eunice\", \"Fanny\", \"Ola\", \"Lenora\", \"Adelaide\", \"Christina\", \"Lelia\", \"Nelle\", \"Sue\", \"Johanna\", \"Lilly\", \"Lucinda\", \"Minerva\", \"Lettie\", \"Roxie\", \"Cynthia\", \"Helena\", \"Hilda\", \"Hulda\", \"Bernice\", \"Genevieve\", \"Jean\", \"Cordelia\", \"Marian\", \"Francis\", \"Jeanette\", \"Adeline\", \"Gussie\", \"Leah\", \"Lois\", \"Lura\", \"Mittie\", \"Hallie\", \"Isabella\", \"Olga\", \"Phoebe\", \"Teresa\", \"Hester\", \"Lida\", \"Lina\", \"Winnie\", \"Claudia\", \"Marguerite\", \"Vera\", \"Cecelia\", \"Bess\", \"Emilie\", \"John\", \"Rosetta\", \"Verna\", \"Myrtie\", \"Cecilia\", \"Elva\", \"Olivia\", \"Ophelia\", \"Georgie\", \"Elnora\", \"Violet\", \"Adele\", \"Lily\", \"Linnie\", \"Loretta\", \"Madge\", \"Polly\", \"Virgie\", \"Eugenia\", \"Lucile\", \"Lucille\", \"Mabelle\", \"Rosalie\"],\r\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162\r\n                \"it\": [\"Ada\", \"Adriana\", \"Alessandra\", \"Alessia\", \"Alice\", \"Angela\", \"Anna\", \"Anna Maria\", \"Annalisa\", \"Annita\", \"Annunziata\", \"Antonella\", \"Arianna\", \"Asia\", \"Assunta\", \"Aurora\", \"Barbara\", \"Beatrice\", \"Benedetta\", \"Bianca\", \"Bruna\", \"Camilla\", \"Carla\", \"Carlotta\", \"Carmela\", \"Carolina\", \"Caterina\", \"Catia\", \"Cecilia\", \"Chiara\", \"Cinzia\", \"Clara\", \"Claudia\", \"Costanza\", \"Cristina\", \"Daniela\", \"Debora\", \"Diletta\", \"Dina\", \"Donatella\", \"Elena\", \"Eleonora\", \"Elisa\", \"Elisabetta\", \"Emanuela\", \"Emma\", \"Eva\", \"Federica\", \"Fernanda\", \"Fiorella\", \"Fiorenza\", \"Flora\", \"Franca\", \"Francesca\", \"Gabriella\", \"Gaia\", \"Gemma\", \"Giada\", \"Gianna\", \"Gina\", \"Ginevra\", \"Giorgia\", \"Giovanna\", \"Giulia\", \"Giuliana\", \"Giuseppa\", \"Giuseppina\", \"Grazia\", \"Graziella\", \"Greta\", \"Ida\", \"Ilaria\", \"Ines\", \"Iolanda\", \"Irene\", \"Irma\", \"Isabella\", \"Jessica\", \"Laura\", \"Leda\", \"Letizia\", \"Licia\", \"Lidia\", \"Liliana\", \"Lina\", \"Linda\", \"Lisa\", \"Livia\", \"Loretta\", \"Luana\", \"Lucia\", \"Luciana\", \"Lucrezia\", \"Luisa\", \"Manuela\", \"Mara\", \"Marcella\", \"Margherita\", \"Maria\", \"Maria Cristina\", \"Maria Grazia\", \"Maria Luisa\", \"Maria Pia\", \"Maria Teresa\", \"Marina\", \"Marisa\", \"Marta\", \"Martina\", \"Marzia\", \"Matilde\", \"Melissa\", \"Michela\", \"Milena\", \"Mirella\", \"Monica\", \"Natalina\", \"Nella\", \"Nicoletta\", \"Noemi\", \"Olga\", \"Paola\", \"Patrizia\", \"Piera\", \"Pierina\", \"Raffaella\", \"Rebecca\", \"Renata\", \"Rina\", \"Rita\", \"Roberta\", \"Rosa\", \"Rosanna\", \"Rossana\", \"Rossella\", \"Sabrina\", \"Sandra\", \"Sara\", \"Serena\", \"Silvana\", \"Silvia\", \"Simona\", \"Simonetta\", \"Sofia\", \"Sonia\", \"Stefania\", \"Susanna\", \"Teresa\", \"Tina\", \"Tiziana\", \"Tosca\", \"Valentina\", \"Valeria\", \"Vanda\", \"Vanessa\", \"Vanna\", \"Vera\", \"Veronica\", \"Vilma\", \"Viola\", \"Virginia\", \"Vittoria\"]\r\n            }\r\n        },\r\n\r\n        lastNames: {\r\n            \"en\": ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],\r\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)\r\n            \"it\": [\"Acciai\", \"Aglietti\", \"Agostini\", \"Agresti\", \"Ahmed\", \"Aiazzi\", \"Albanese\", \"Alberti\", \"Alessi\", \"Alfani\", \"Alinari\", \"Alterini\", \"Amato\", \"Ammannati\", \"Ancillotti\", \"Andrei\", \"Andreini\", \"Andreoni\", \"Angeli\", \"Anichini\", \"Antonelli\", \"Antonini\", \"Arena\", \"Ariani\", \"Arnetoli\", \"Arrighi\", \"Baccani\", \"Baccetti\", \"Bacci\", \"Bacherini\", \"Badii\", \"Baggiani\", \"Baglioni\", \"Bagni\", \"Bagnoli\", \"Baldassini\", \"Baldi\", \"Baldini\", \"Ballerini\", \"Balli\", \"Ballini\", \"Balloni\", \"Bambi\", \"Banchi\", \"Bandinelli\", \"Bandini\", \"Bani\", \"Barbetti\", \"Barbieri\", \"Barchielli\", \"Bardazzi\", \"Bardelli\", \"Bardi\", \"Barducci\", \"Bargellini\", \"Bargiacchi\", \"Barni\", \"Baroncelli\", \"Baroncini\", \"Barone\", \"Baroni\", \"Baronti\", \"Bartalesi\", \"Bartoletti\", \"Bartoli\", \"Bartolini\", \"Bartoloni\", \"Bartolozzi\", \"Basagni\", \"Basile\", \"Bassi\", \"Batacchi\", \"Battaglia\", \"Battaglini\", \"Bausi\", \"Becagli\", \"Becattini\", \"Becchi\", \"Becucci\", \"Bellandi\", \"Bellesi\", \"Belli\", \"Bellini\", \"Bellucci\", \"Bencini\", \"Benedetti\", \"Benelli\", \"Beni\", \"Benini\", \"Bensi\", \"Benucci\", \"Benvenuti\", \"Berlincioni\", \"Bernacchioni\", \"Bernardi\", \"Bernardini\", \"Berni\", \"Bernini\", \"Bertelli\", \"Berti\", \"Bertini\", \"Bessi\", \"Betti\", \"Bettini\", \"Biagi\", \"Biagini\", \"Biagioni\", \"Biagiotti\", \"Biancalani\", \"Bianchi\", \"Bianchini\", \"Bianco\", \"Biffoli\", \"Bigazzi\", \"Bigi\", \"Biliotti\", \"Billi\", \"Binazzi\", \"Bindi\", \"Bini\", \"Biondi\", \"Bizzarri\", \"Bocci\", \"Bogani\", \"Bolognesi\", \"Bonaiuti\", \"Bonanni\", \"Bonciani\", \"Boncinelli\", \"Bondi\", \"Bonechi\", \"Bongini\", \"Boni\", \"Bonini\", \"Borchi\", \"Boretti\", \"Borghi\", \"Borghini\", \"Borgioli\", \"Borri\", \"Borselli\", \"Boschi\", \"Bottai\", \"Bracci\", \"Braccini\", \"Brandi\", \"Braschi\", \"Bravi\", \"Brazzini\", \"Breschi\", \"Brilli\", \"Brizzi\", \"Brogelli\", \"Brogi\", \"Brogioni\", \"Brunelli\", \"Brunetti\", \"Bruni\", \"Bruno\", \"Brunori\", \"Bruschi\", \"Bucci\", \"Bucciarelli\", \"Buccioni\", \"Bucelli\", \"Bulli\", \"Burberi\", \"Burchi\", \"Burgassi\", \"Burroni\", \"Bussotti\", \"Buti\", \"Caciolli\", \"Caiani\", \"Calabrese\", \"Calamai\", \"Calamandrei\", \"Caldini\", \"Calo'\", \"Calonaci\", \"Calosi\", \"Calvelli\", \"Cambi\", \"Camiciottoli\", \"Cammelli\", \"Cammilli\", \"Campolmi\", \"Cantini\", \"Capanni\", \"Capecchi\", \"Caponi\", \"Cappelletti\", \"Cappelli\", \"Cappellini\", \"Cappugi\", \"Capretti\", \"Caputo\", \"Carbone\", \"Carboni\", \"Cardini\", \"Carlesi\", \"Carletti\", \"Carli\", \"Caroti\", \"Carotti\", \"Carrai\", \"Carraresi\", \"Carta\", \"Caruso\", \"Casalini\", \"Casati\", \"Caselli\", \"Casini\", \"Castagnoli\", \"Castellani\", \"Castelli\", \"Castellucci\", \"Catalano\", \"Catarzi\", \"Catelani\", \"Cavaciocchi\", \"Cavallaro\", \"Cavallini\", \"Cavicchi\", \"Cavini\", \"Ceccarelli\", \"Ceccatelli\", \"Ceccherelli\", \"Ceccherini\", \"Cecchi\", \"Cecchini\", \"Cecconi\", \"Cei\", \"Cellai\", \"Celli\", \"Cellini\", \"Cencetti\", \"Ceni\", \"Cenni\", \"Cerbai\", \"Cesari\", \"Ceseri\", \"Checcacci\", \"Checchi\", \"Checcucci\", \"Cheli\", \"Chellini\", \"Chen\", \"Cheng\", \"Cherici\", \"Cherubini\", \"Chiaramonti\", \"Chiarantini\", \"Chiarelli\", \"Chiari\", \"Chiarini\", \"Chiarugi\", \"Chiavacci\", \"Chiesi\", \"Chimenti\", \"Chini\", \"Chirici\", \"Chiti\", \"Ciabatti\", \"Ciampi\", \"Cianchi\", \"Cianfanelli\", \"Cianferoni\", \"Ciani\", \"Ciapetti\", \"Ciappi\", \"Ciardi\", \"Ciatti\", \"Cicali\", \"Ciccone\", \"Cinelli\", \"Cini\", \"Ciobanu\", \"Ciolli\", \"Cioni\", \"Cipriani\", \"Cirillo\", \"Cirri\", \"Ciucchi\", \"Ciuffi\", \"Ciulli\", \"Ciullini\", \"Clemente\", \"Cocchi\", \"Cognome\", \"Coli\", \"Collini\", \"Colombo\", \"Colzi\", \"Comparini\", \"Conforti\", \"Consigli\", \"Conte\", \"Conti\", \"Contini\", \"Coppini\", \"Coppola\", \"Corsi\", \"Corsini\", \"Corti\", \"Cortini\", \"Cosi\", \"Costa\", \"Costantini\", \"Costantino\", \"Cozzi\", \"Cresci\", \"Crescioli\", \"Cresti\", \"Crini\", \"Curradi\", \"D'Agostino\", \"D'Alessandro\", \"D'Amico\", \"D'Angelo\", \"Daddi\", \"Dainelli\", \"Dallai\", \"Danti\", \"Davitti\", \"De Angelis\", \"De Luca\", \"De Marco\", \"De Rosa\", \"De Santis\", \"De Simone\", \"De Vita\", \"Degl'Innocenti\", \"Degli Innocenti\", \"Dei\", \"Del Lungo\", \"Del Re\", \"Di Marco\", \"Di Stefano\", \"Dini\", \"Diop\", \"Dobre\", \"Dolfi\", \"Donati\", \"Dondoli\", \"Dong\", \"Donnini\", \"Ducci\", \"Dumitru\", \"Ermini\", \"Esposito\", \"Evangelisti\", \"Fabbri\", \"Fabbrini\", \"Fabbrizzi\", \"Fabbroni\", \"Fabbrucci\", \"Fabiani\", \"Facchini\", \"Faggi\", \"Fagioli\", \"Failli\", \"Faini\", \"Falciani\", \"Falcini\", \"Falcone\", \"Fallani\", \"Falorni\", \"Falsini\", \"Falugiani\", \"Fancelli\", \"Fanelli\", \"Fanetti\", \"Fanfani\", \"Fani\", \"Fantappie'\", \"Fantechi\", \"Fanti\", \"Fantini\", \"Fantoni\", \"Farina\", \"Fattori\", \"Favilli\", \"Fedi\", \"Fei\", \"Ferrante\", \"Ferrara\", \"Ferrari\", \"Ferraro\", \"Ferretti\", \"Ferri\", \"Ferrini\", \"Ferroni\", \"Fiaschi\", \"Fibbi\", \"Fiesoli\", \"Filippi\", \"Filippini\", \"Fini\", \"Fioravanti\", \"Fiore\", \"Fiorentini\", \"Fiorini\", \"Fissi\", \"Focardi\", \"Foggi\", \"Fontana\", \"Fontanelli\", \"Fontani\", \"Forconi\", \"Formigli\", \"Forte\", \"Forti\", \"Fortini\", \"Fossati\", \"Fossi\", \"Francalanci\", \"Franceschi\", \"Franceschini\", \"Franchi\", \"Franchini\", \"Franci\", \"Francini\", \"Francioni\", \"Franco\", \"Frassineti\", \"Frati\", \"Fratini\", \"Frilli\", \"Frizzi\", \"Frosali\", \"Frosini\", \"Frullini\", \"Fusco\", \"Fusi\", \"Gabbrielli\", \"Gabellini\", \"Gagliardi\", \"Galanti\", \"Galardi\", \"Galeotti\", \"Galletti\", \"Galli\", \"Gallo\", \"Gallori\", \"Gambacciani\", \"Gargani\", \"Garofalo\", \"Garuglieri\", \"Gashi\", \"Gasperini\", \"Gatti\", \"Gelli\", \"Gensini\", \"Gentile\", \"Gentili\", \"Geri\", \"Gerini\", \"Gheri\", \"Ghini\", \"Giachetti\", \"Giachi\", \"Giacomelli\", \"Gianassi\", \"Giani\", \"Giannelli\", \"Giannetti\", \"Gianni\", \"Giannini\", \"Giannoni\", \"Giannotti\", \"Giannozzi\", \"Gigli\", \"Giordano\", \"Giorgetti\", \"Giorgi\", \"Giovacchini\", \"Giovannelli\", \"Giovannetti\", \"Giovannini\", \"Giovannoni\", \"Giuliani\", \"Giunti\", \"Giuntini\", \"Giusti\", \"Gonnelli\", \"Goretti\", \"Gori\", \"Gradi\", \"Gramigni\", \"Grassi\", \"Grasso\", \"Graziani\", \"Grazzini\", \"Greco\", \"Grifoni\", \"Grillo\", \"Grimaldi\", \"Grossi\", \"Gualtieri\", \"Guarducci\", \"Guarino\", \"Guarnieri\", \"Guasti\", \"Guerra\", \"Guerri\", \"Guerrini\", \"Guidi\", \"Guidotti\", \"He\", \"Hoxha\", \"Hu\", \"Huang\", \"Iandelli\", \"Ignesti\", \"Innocenti\", \"Jin\", \"La Rosa\", \"Lai\", \"Landi\", \"Landini\", \"Lanini\", \"Lapi\", \"Lapini\", \"Lari\", \"Lascialfari\", \"Lastrucci\", \"Latini\", \"Lazzeri\", \"Lazzerini\", \"Lelli\", \"Lenzi\", \"Leonardi\", \"Leoncini\", \"Leone\", \"Leoni\", \"Lepri\", \"Li\", \"Liao\", \"Lin\", \"Linari\", \"Lippi\", \"Lisi\", \"Livi\", \"Lombardi\", \"Lombardini\", \"Lombardo\", \"Longo\", \"Lopez\", \"Lorenzi\", \"Lorenzini\", \"Lorini\", \"Lotti\", \"Lu\", \"Lucchesi\", \"Lucherini\", \"Lunghi\", \"Lupi\", \"Madiai\", \"Maestrini\", \"Maffei\", \"Maggi\", \"Maggini\", \"Magherini\", \"Magini\", \"Magnani\", \"Magnelli\", \"Magni\", \"Magnolfi\", \"Magrini\", \"Malavolti\", \"Malevolti\", \"Manca\", \"Mancini\", \"Manetti\", \"Manfredi\", \"Mangani\", \"Mannelli\", \"Manni\", \"Mannini\", \"Mannucci\", \"Manuelli\", \"Manzini\", \"Marcelli\", \"Marchese\", \"Marchetti\", \"Marchi\", \"Marchiani\", \"Marchionni\", \"Marconi\", \"Marcucci\", \"Margheri\", \"Mari\", \"Mariani\", \"Marilli\", \"Marinai\", \"Marinari\", \"Marinelli\", \"Marini\", \"Marino\", \"Mariotti\", \"Marsili\", \"Martelli\", \"Martinelli\", \"Martini\", \"Martino\", \"Marzi\", \"Masi\", \"Masini\", \"Masoni\", \"Massai\", \"Materassi\", \"Mattei\", \"Matteini\", \"Matteucci\", \"Matteuzzi\", \"Mattioli\", \"Mattolini\", \"Matucci\", \"Mauro\", \"Mazzanti\", \"Mazzei\", \"Mazzetti\", \"Mazzi\", \"Mazzini\", \"Mazzocchi\", \"Mazzoli\", \"Mazzoni\", \"Mazzuoli\", \"Meacci\", \"Mecocci\", \"Meini\", \"Melani\", \"Mele\", \"Meli\", \"Mengoni\", \"Menichetti\", \"Meoni\", \"Merlini\", \"Messeri\", \"Messina\", \"Meucci\", \"Miccinesi\", \"Miceli\", \"Micheli\", \"Michelini\", \"Michelozzi\", \"Migliori\", \"Migliorini\", \"Milani\", \"Miniati\", \"Misuri\", \"Monaco\", \"Montagnani\", \"Montagni\", \"Montanari\", \"Montelatici\", \"Monti\", \"Montigiani\", \"Montini\", \"Morandi\", \"Morandini\", \"Morelli\", \"Moretti\", \"Morganti\", \"Mori\", \"Morini\", \"Moroni\", \"Morozzi\", \"Mugnai\", \"Mugnaini\", \"Mustafa\", \"Naldi\", \"Naldini\", \"Nannelli\", \"Nanni\", \"Nannini\", \"Nannucci\", \"Nardi\", \"Nardini\", \"Nardoni\", \"Natali\", \"Ndiaye\", \"Nencetti\", \"Nencini\", \"Nencioni\", \"Neri\", \"Nesi\", \"Nesti\", \"Niccolai\", \"Niccoli\", \"Niccolini\", \"Nigi\", \"Nistri\", \"Nocentini\", \"Noferini\", \"Novelli\", \"Nucci\", \"Nuti\", \"Nutini\", \"Oliva\", \"Olivieri\", \"Olmi\", \"Orlandi\", \"Orlandini\", \"Orlando\", \"Orsini\", \"Ortolani\", \"Ottanelli\", \"Pacciani\", \"Pace\", \"Paci\", \"Pacini\", \"Pagani\", \"Pagano\", \"Paggetti\", \"Pagliai\", \"Pagni\", \"Pagnini\", \"Paladini\", \"Palagi\", \"Palchetti\", \"Palloni\", \"Palmieri\", \"Palumbo\", \"Pampaloni\", \"Pancani\", \"Pandolfi\", \"Pandolfini\", \"Panerai\", \"Panichi\", \"Paoletti\", \"Paoli\", \"Paolini\", \"Papi\", \"Papini\", \"Papucci\", \"Parenti\", \"Parigi\", \"Parisi\", \"Parri\", \"Parrini\", \"Pasquini\", \"Passeri\", \"Pecchioli\", \"Pecorini\", \"Pellegrini\", \"Pepi\", \"Perini\", \"Perrone\", \"Peruzzi\", \"Pesci\", \"Pestelli\", \"Petri\", \"Petrini\", \"Petrucci\", \"Pettini\", \"Pezzati\", \"Pezzatini\", \"Piani\", \"Piazza\", \"Piazzesi\", \"Piazzini\", \"Piccardi\", \"Picchi\", \"Piccini\", \"Piccioli\", \"Pieraccini\", \"Pieraccioni\", \"Pieralli\", \"Pierattini\", \"Pieri\", \"Pierini\", \"Pieroni\", \"Pietrini\", \"Pini\", \"Pinna\", \"Pinto\", \"Pinzani\", \"Pinzauti\", \"Piras\", \"Pisani\", \"Pistolesi\", \"Poggesi\", \"Poggi\", \"Poggiali\", \"Poggiolini\", \"Poli\", \"Pollastri\", \"Porciani\", \"Pozzi\", \"Pratellesi\", \"Pratesi\", \"Prosperi\", \"Pruneti\", \"Pucci\", \"Puccini\", \"Puccioni\", \"Pugi\", \"Pugliese\", \"Puliti\", \"Querci\", \"Quercioli\", \"Raddi\", \"Radu\", \"Raffaelli\", \"Ragazzini\", \"Ranfagni\", \"Ranieri\", \"Rastrelli\", \"Raugei\", \"Raveggi\", \"Renai\", \"Renzi\", \"Rettori\", \"Ricci\", \"Ricciardi\", \"Ridi\", \"Ridolfi\", \"Rigacci\", \"Righi\", \"Righini\", \"Rinaldi\", \"Risaliti\", \"Ristori\", \"Rizzo\", \"Rocchi\", \"Rocchini\", \"Rogai\", \"Romagnoli\", \"Romanelli\", \"Romani\", \"Romano\", \"Romei\", \"Romeo\", \"Romiti\", \"Romoli\", \"Romolini\", \"Rontini\", \"Rosati\", \"Roselli\", \"Rosi\", \"Rossetti\", \"Rossi\", \"Rossini\", \"Rovai\", \"Ruggeri\", \"Ruggiero\", \"Russo\", \"Sabatini\", \"Saccardi\", \"Sacchetti\", \"Sacchi\", \"Sacco\", \"Salerno\", \"Salimbeni\", \"Salucci\", \"Salvadori\", \"Salvestrini\", \"Salvi\", \"Salvini\", \"Sanesi\", \"Sani\", \"Sanna\", \"Santi\", \"Santini\", \"Santoni\", \"Santoro\", \"Santucci\", \"Sardi\", \"Sarri\", \"Sarti\", \"Sassi\", \"Sbolci\", \"Scali\", \"Scarpelli\", \"Scarselli\", \"Scopetani\", \"Secci\", \"Selvi\", \"Senatori\", \"Senesi\", \"Serafini\", \"Sereni\", \"Serra\", \"Sestini\", \"Sguanci\", \"Sieni\", \"Signorini\", \"Silvestri\", \"Simoncini\", \"Simonetti\", \"Simoni\", \"Singh\", \"Sodi\", \"Soldi\", \"Somigli\", \"Sorbi\", \"Sorelli\", \"Sorrentino\", \"Sottili\", \"Spina\", \"Spinelli\", \"Staccioli\", \"Staderini\", \"Stefanelli\", \"Stefani\", \"Stefanini\", \"Stella\", \"Susini\", \"Tacchi\", \"Tacconi\", \"Taddei\", \"Tagliaferri\", \"Tamburini\", \"Tanganelli\", \"Tani\", \"Tanini\", \"Tapinassi\", \"Tarchi\", \"Tarchiani\", \"Targioni\", \"Tassi\", \"Tassini\", \"Tempesti\", \"Terzani\", \"Tesi\", \"Testa\", \"Testi\", \"Tilli\", \"Tinti\", \"Tirinnanzi\", \"Toccafondi\", \"Tofanari\", \"Tofani\", \"Tognaccini\", \"Tonelli\", \"Tonini\", \"Torelli\", \"Torrini\", \"Tosi\", \"Toti\", \"Tozzi\", \"Trambusti\", \"Trapani\", \"Tucci\", \"Turchi\", \"Ugolini\", \"Ulivi\", \"Valente\", \"Valenti\", \"Valentini\", \"Vangelisti\", \"Vanni\", \"Vannini\", \"Vannoni\", \"Vannozzi\", \"Vannucchi\", \"Vannucci\", \"Ventura\", \"Venturi\", \"Venturini\", \"Vestri\", \"Vettori\", \"Vichi\", \"Viciani\", \"Vieri\", \"Vigiani\", \"Vignoli\", \"Vignolini\", \"Vignozzi\", \"Villani\", \"Vinci\", \"Visani\", \"Vitale\", \"Vitali\", \"Viti\", \"Viviani\", \"Vivoli\", \"Volpe\", \"Volpi\", \"Wang\", \"Wu\", \"Xu\", \"Yang\", \"Ye\", \"Zagli\", \"Zani\", \"Zanieri\", \"Zanobini\", \"Zecchi\", \"Zetti\", \"Zhang\", \"Zheng\", \"Zhou\", \"Zhu\", \"Zingoni\", \"Zini\", \"Zoppi\"]\r\n        },\r\n\r\n        // Data taken from https://github.com/umpirsky/country-list/blob/master/data/en_US/country.json\r\n        countries: [{\"name\":\"Afghanistan\",\"abbreviation\":\"AF\"},{\"name\":\"Åland Islands\",\"abbreviation\":\"AX\"},{\"name\":\"Albania\",\"abbreviation\":\"AL\"},{\"name\":\"Algeria\",\"abbreviation\":\"DZ\"},{\"name\":\"American Samoa\",\"abbreviation\":\"AS\"},{\"name\":\"Andorra\",\"abbreviation\":\"AD\"},{\"name\":\"Angola\",\"abbreviation\":\"AO\"},{\"name\":\"Anguilla\",\"abbreviation\":\"AI\"},{\"name\":\"Antarctica\",\"abbreviation\":\"AQ\"},{\"name\":\"Antigua & Barbuda\",\"abbreviation\":\"AG\"},{\"name\":\"Argentina\",\"abbreviation\":\"AR\"},{\"name\":\"Armenia\",\"abbreviation\":\"AM\"},{\"name\":\"Aruba\",\"abbreviation\":\"AW\"},{\"name\":\"Ascension Island\",\"abbreviation\":\"AC\"},{\"name\":\"Australia\",\"abbreviation\":\"AU\"},{\"name\":\"Austria\",\"abbreviation\":\"AT\"},{\"name\":\"Azerbaijan\",\"abbreviation\":\"AZ\"},{\"name\":\"Bahamas\",\"abbreviation\":\"BS\"},{\"name\":\"Bahrain\",\"abbreviation\":\"BH\"},{\"name\":\"Bangladesh\",\"abbreviation\":\"BD\"},{\"name\":\"Barbados\",\"abbreviation\":\"BB\"},{\"name\":\"Belarus\",\"abbreviation\":\"BY\"},{\"name\":\"Belgium\",\"abbreviation\":\"BE\"},{\"name\":\"Belize\",\"abbreviation\":\"BZ\"},{\"name\":\"Benin\",\"abbreviation\":\"BJ\"},{\"name\":\"Bermuda\",\"abbreviation\":\"BM\"},{\"name\":\"Bhutan\",\"abbreviation\":\"BT\"},{\"name\":\"Bolivia\",\"abbreviation\":\"BO\"},{\"name\":\"Bosnia & Herzegovina\",\"abbreviation\":\"BA\"},{\"name\":\"Botswana\",\"abbreviation\":\"BW\"},{\"name\":\"Brazil\",\"abbreviation\":\"BR\"},{\"name\":\"British Indian Ocean Territory\",\"abbreviation\":\"IO\"},{\"name\":\"British Virgin Islands\",\"abbreviation\":\"VG\"},{\"name\":\"Brunei\",\"abbreviation\":\"BN\"},{\"name\":\"Bulgaria\",\"abbreviation\":\"BG\"},{\"name\":\"Burkina Faso\",\"abbreviation\":\"BF\"},{\"name\":\"Burundi\",\"abbreviation\":\"BI\"},{\"name\":\"Cambodia\",\"abbreviation\":\"KH\"},{\"name\":\"Cameroon\",\"abbreviation\":\"CM\"},{\"name\":\"Canada\",\"abbreviation\":\"CA\"},{\"name\":\"Canary Islands\",\"abbreviation\":\"IC\"},{\"name\":\"Cape Verde\",\"abbreviation\":\"CV\"},{\"name\":\"Caribbean Netherlands\",\"abbreviation\":\"BQ\"},{\"name\":\"Cayman Islands\",\"abbreviation\":\"KY\"},{\"name\":\"Central African Republic\",\"abbreviation\":\"CF\"},{\"name\":\"Ceuta & Melilla\",\"abbreviation\":\"EA\"},{\"name\":\"Chad\",\"abbreviation\":\"TD\"},{\"name\":\"Chile\",\"abbreviation\":\"CL\"},{\"name\":\"China\",\"abbreviation\":\"CN\"},{\"name\":\"Christmas Island\",\"abbreviation\":\"CX\"},{\"name\":\"Cocos (Keeling) Islands\",\"abbreviation\":\"CC\"},{\"name\":\"Colombia\",\"abbreviation\":\"CO\"},{\"name\":\"Comoros\",\"abbreviation\":\"KM\"},{\"name\":\"Congo - Brazzaville\",\"abbreviation\":\"CG\"},{\"name\":\"Congo - Kinshasa\",\"abbreviation\":\"CD\"},{\"name\":\"Cook Islands\",\"abbreviation\":\"CK\"},{\"name\":\"Costa Rica\",\"abbreviation\":\"CR\"},{\"name\":\"Côte d'Ivoire\",\"abbreviation\":\"CI\"},{\"name\":\"Croatia\",\"abbreviation\":\"HR\"},{\"name\":\"Cuba\",\"abbreviation\":\"CU\"},{\"name\":\"Curaçao\",\"abbreviation\":\"CW\"},{\"name\":\"Cyprus\",\"abbreviation\":\"CY\"},{\"name\":\"Czech Republic\",\"abbreviation\":\"CZ\"},{\"name\":\"Denmark\",\"abbreviation\":\"DK\"},{\"name\":\"Diego Garcia\",\"abbreviation\":\"DG\"},{\"name\":\"Djibouti\",\"abbreviation\":\"DJ\"},{\"name\":\"Dominica\",\"abbreviation\":\"DM\"},{\"name\":\"Dominican Republic\",\"abbreviation\":\"DO\"},{\"name\":\"Ecuador\",\"abbreviation\":\"EC\"},{\"name\":\"Egypt\",\"abbreviation\":\"EG\"},{\"name\":\"El Salvador\",\"abbreviation\":\"SV\"},{\"name\":\"Equatorial Guinea\",\"abbreviation\":\"GQ\"},{\"name\":\"Eritrea\",\"abbreviation\":\"ER\"},{\"name\":\"Estonia\",\"abbreviation\":\"EE\"},{\"name\":\"Ethiopia\",\"abbreviation\":\"ET\"},{\"name\":\"Falkland Islands\",\"abbreviation\":\"FK\"},{\"name\":\"Faroe Islands\",\"abbreviation\":\"FO\"},{\"name\":\"Fiji\",\"abbreviation\":\"FJ\"},{\"name\":\"Finland\",\"abbreviation\":\"FI\"},{\"name\":\"France\",\"abbreviation\":\"FR\"},{\"name\":\"French Guiana\",\"abbreviation\":\"GF\"},{\"name\":\"French Polynesia\",\"abbreviation\":\"PF\"},{\"name\":\"French Southern Territories\",\"abbreviation\":\"TF\"},{\"name\":\"Gabon\",\"abbreviation\":\"GA\"},{\"name\":\"Gambia\",\"abbreviation\":\"GM\"},{\"name\":\"Georgia\",\"abbreviation\":\"GE\"},{\"name\":\"Germany\",\"abbreviation\":\"DE\"},{\"name\":\"Ghana\",\"abbreviation\":\"GH\"},{\"name\":\"Gibraltar\",\"abbreviation\":\"GI\"},{\"name\":\"Greece\",\"abbreviation\":\"GR\"},{\"name\":\"Greenland\",\"abbreviation\":\"GL\"},{\"name\":\"Grenada\",\"abbreviation\":\"GD\"},{\"name\":\"Guadeloupe\",\"abbreviation\":\"GP\"},{\"name\":\"Guam\",\"abbreviation\":\"GU\"},{\"name\":\"Guatemala\",\"abbreviation\":\"GT\"},{\"name\":\"Guernsey\",\"abbreviation\":\"GG\"},{\"name\":\"Guinea\",\"abbreviation\":\"GN\"},{\"name\":\"Guinea-Bissau\",\"abbreviation\":\"GW\"},{\"name\":\"Guyana\",\"abbreviation\":\"GY\"},{\"name\":\"Haiti\",\"abbreviation\":\"HT\"},{\"name\":\"Honduras\",\"abbreviation\":\"HN\"},{\"name\":\"Hong Kong SAR China\",\"abbreviation\":\"HK\"},{\"name\":\"Hungary\",\"abbreviation\":\"HU\"},{\"name\":\"Iceland\",\"abbreviation\":\"IS\"},{\"name\":\"India\",\"abbreviation\":\"IN\"},{\"name\":\"Indonesia\",\"abbreviation\":\"ID\"},{\"name\":\"Iran\",\"abbreviation\":\"IR\"},{\"name\":\"Iraq\",\"abbreviation\":\"IQ\"},{\"name\":\"Ireland\",\"abbreviation\":\"IE\"},{\"name\":\"Isle of Man\",\"abbreviation\":\"IM\"},{\"name\":\"Israel\",\"abbreviation\":\"IL\"},{\"name\":\"Italy\",\"abbreviation\":\"IT\"},{\"name\":\"Jamaica\",\"abbreviation\":\"JM\"},{\"name\":\"Japan\",\"abbreviation\":\"JP\"},{\"name\":\"Jersey\",\"abbreviation\":\"JE\"},{\"name\":\"Jordan\",\"abbreviation\":\"JO\"},{\"name\":\"Kazakhstan\",\"abbreviation\":\"KZ\"},{\"name\":\"Kenya\",\"abbreviation\":\"KE\"},{\"name\":\"Kiribati\",\"abbreviation\":\"KI\"},{\"name\":\"Kosovo\",\"abbreviation\":\"XK\"},{\"name\":\"Kuwait\",\"abbreviation\":\"KW\"},{\"name\":\"Kyrgyzstan\",\"abbreviation\":\"KG\"},{\"name\":\"Laos\",\"abbreviation\":\"LA\"},{\"name\":\"Latvia\",\"abbreviation\":\"LV\"},{\"name\":\"Lebanon\",\"abbreviation\":\"LB\"},{\"name\":\"Lesotho\",\"abbreviation\":\"LS\"},{\"name\":\"Liberia\",\"abbreviation\":\"LR\"},{\"name\":\"Libya\",\"abbreviation\":\"LY\"},{\"name\":\"Liechtenstein\",\"abbreviation\":\"LI\"},{\"name\":\"Lithuania\",\"abbreviation\":\"LT\"},{\"name\":\"Luxembourg\",\"abbreviation\":\"LU\"},{\"name\":\"Macau SAR China\",\"abbreviation\":\"MO\"},{\"name\":\"Macedonia\",\"abbreviation\":\"MK\"},{\"name\":\"Madagascar\",\"abbreviation\":\"MG\"},{\"name\":\"Malawi\",\"abbreviation\":\"MW\"},{\"name\":\"Malaysia\",\"abbreviation\":\"MY\"},{\"name\":\"Maldives\",\"abbreviation\":\"MV\"},{\"name\":\"Mali\",\"abbreviation\":\"ML\"},{\"name\":\"Malta\",\"abbreviation\":\"MT\"},{\"name\":\"Marshall Islands\",\"abbreviation\":\"MH\"},{\"name\":\"Martinique\",\"abbreviation\":\"MQ\"},{\"name\":\"Mauritania\",\"abbreviation\":\"MR\"},{\"name\":\"Mauritius\",\"abbreviation\":\"MU\"},{\"name\":\"Mayotte\",\"abbreviation\":\"YT\"},{\"name\":\"Mexico\",\"abbreviation\":\"MX\"},{\"name\":\"Micronesia\",\"abbreviation\":\"FM\"},{\"name\":\"Moldova\",\"abbreviation\":\"MD\"},{\"name\":\"Monaco\",\"abbreviation\":\"MC\"},{\"name\":\"Mongolia\",\"abbreviation\":\"MN\"},{\"name\":\"Montenegro\",\"abbreviation\":\"ME\"},{\"name\":\"Montserrat\",\"abbreviation\":\"MS\"},{\"name\":\"Morocco\",\"abbreviation\":\"MA\"},{\"name\":\"Mozambique\",\"abbreviation\":\"MZ\"},{\"name\":\"Myanmar (Burma)\",\"abbreviation\":\"MM\"},{\"name\":\"Namibia\",\"abbreviation\":\"NA\"},{\"name\":\"Nauru\",\"abbreviation\":\"NR\"},{\"name\":\"Nepal\",\"abbreviation\":\"NP\"},{\"name\":\"Netherlands\",\"abbreviation\":\"NL\"},{\"name\":\"New Caledonia\",\"abbreviation\":\"NC\"},{\"name\":\"New Zealand\",\"abbreviation\":\"NZ\"},{\"name\":\"Nicaragua\",\"abbreviation\":\"NI\"},{\"name\":\"Niger\",\"abbreviation\":\"NE\"},{\"name\":\"Nigeria\",\"abbreviation\":\"NG\"},{\"name\":\"Niue\",\"abbreviation\":\"NU\"},{\"name\":\"Norfolk Island\",\"abbreviation\":\"NF\"},{\"name\":\"North Korea\",\"abbreviation\":\"KP\"},{\"name\":\"Northern Mariana Islands\",\"abbreviation\":\"MP\"},{\"name\":\"Norway\",\"abbreviation\":\"NO\"},{\"name\":\"Oman\",\"abbreviation\":\"OM\"},{\"name\":\"Pakistan\",\"abbreviation\":\"PK\"},{\"name\":\"Palau\",\"abbreviation\":\"PW\"},{\"name\":\"Palestinian Territories\",\"abbreviation\":\"PS\"},{\"name\":\"Panama\",\"abbreviation\":\"PA\"},{\"name\":\"Papua New Guinea\",\"abbreviation\":\"PG\"},{\"name\":\"Paraguay\",\"abbreviation\":\"PY\"},{\"name\":\"Peru\",\"abbreviation\":\"PE\"},{\"name\":\"Philippines\",\"abbreviation\":\"PH\"},{\"name\":\"Pitcairn Islands\",\"abbreviation\":\"PN\"},{\"name\":\"Poland\",\"abbreviation\":\"PL\"},{\"name\":\"Portugal\",\"abbreviation\":\"PT\"},{\"name\":\"Puerto Rico\",\"abbreviation\":\"PR\"},{\"name\":\"Qatar\",\"abbreviation\":\"QA\"},{\"name\":\"Réunion\",\"abbreviation\":\"RE\"},{\"name\":\"Romania\",\"abbreviation\":\"RO\"},{\"name\":\"Russia\",\"abbreviation\":\"RU\"},{\"name\":\"Rwanda\",\"abbreviation\":\"RW\"},{\"name\":\"Samoa\",\"abbreviation\":\"WS\"},{\"name\":\"San Marino\",\"abbreviation\":\"SM\"},{\"name\":\"São Tomé and Príncipe\",\"abbreviation\":\"ST\"},{\"name\":\"Saudi Arabia\",\"abbreviation\":\"SA\"},{\"name\":\"Senegal\",\"abbreviation\":\"SN\"},{\"name\":\"Serbia\",\"abbreviation\":\"RS\"},{\"name\":\"Seychelles\",\"abbreviation\":\"SC\"},{\"name\":\"Sierra Leone\",\"abbreviation\":\"SL\"},{\"name\":\"Singapore\",\"abbreviation\":\"SG\"},{\"name\":\"Sint Maarten\",\"abbreviation\":\"SX\"},{\"name\":\"Slovakia\",\"abbreviation\":\"SK\"},{\"name\":\"Slovenia\",\"abbreviation\":\"SI\"},{\"name\":\"Solomon Islands\",\"abbreviation\":\"SB\"},{\"name\":\"Somalia\",\"abbreviation\":\"SO\"},{\"name\":\"South Africa\",\"abbreviation\":\"ZA\"},{\"name\":\"South Georgia & South Sandwich Islands\",\"abbreviation\":\"GS\"},{\"name\":\"South Korea\",\"abbreviation\":\"KR\"},{\"name\":\"South Sudan\",\"abbreviation\":\"SS\"},{\"name\":\"Spain\",\"abbreviation\":\"ES\"},{\"name\":\"Sri Lanka\",\"abbreviation\":\"LK\"},{\"name\":\"St. Barthélemy\",\"abbreviation\":\"BL\"},{\"name\":\"St. Helena\",\"abbreviation\":\"SH\"},{\"name\":\"St. Kitts & Nevis\",\"abbreviation\":\"KN\"},{\"name\":\"St. Lucia\",\"abbreviation\":\"LC\"},{\"name\":\"St. Martin\",\"abbreviation\":\"MF\"},{\"name\":\"St. Pierre & Miquelon\",\"abbreviation\":\"PM\"},{\"name\":\"St. Vincent & Grenadines\",\"abbreviation\":\"VC\"},{\"name\":\"Sudan\",\"abbreviation\":\"SD\"},{\"name\":\"Suriname\",\"abbreviation\":\"SR\"},{\"name\":\"Svalbard & Jan Mayen\",\"abbreviation\":\"SJ\"},{\"name\":\"Swaziland\",\"abbreviation\":\"SZ\"},{\"name\":\"Sweden\",\"abbreviation\":\"SE\"},{\"name\":\"Switzerland\",\"abbreviation\":\"CH\"},{\"name\":\"Syria\",\"abbreviation\":\"SY\"},{\"name\":\"Taiwan\",\"abbreviation\":\"TW\"},{\"name\":\"Tajikistan\",\"abbreviation\":\"TJ\"},{\"name\":\"Tanzania\",\"abbreviation\":\"TZ\"},{\"name\":\"Thailand\",\"abbreviation\":\"TH\"},{\"name\":\"Timor-Leste\",\"abbreviation\":\"TL\"},{\"name\":\"Togo\",\"abbreviation\":\"TG\"},{\"name\":\"Tokelau\",\"abbreviation\":\"TK\"},{\"name\":\"Tonga\",\"abbreviation\":\"TO\"},{\"name\":\"Trinidad & Tobago\",\"abbreviation\":\"TT\"},{\"name\":\"Tristan da Cunha\",\"abbreviation\":\"TA\"},{\"name\":\"Tunisia\",\"abbreviation\":\"TN\"},{\"name\":\"Turkey\",\"abbreviation\":\"TR\"},{\"name\":\"Turkmenistan\",\"abbreviation\":\"TM\"},{\"name\":\"Turks & Caicos Islands\",\"abbreviation\":\"TC\"},{\"name\":\"Tuvalu\",\"abbreviation\":\"TV\"},{\"name\":\"U.S. Outlying Islands\",\"abbreviation\":\"UM\"},{\"name\":\"U.S. Virgin Islands\",\"abbreviation\":\"VI\"},{\"name\":\"Uganda\",\"abbreviation\":\"UG\"},{\"name\":\"Ukraine\",\"abbreviation\":\"UA\"},{\"name\":\"United Arab Emirates\",\"abbreviation\":\"AE\"},{\"name\":\"United Kingdom\",\"abbreviation\":\"GB\"},{\"name\":\"United States\",\"abbreviation\":\"US\"},{\"name\":\"Uruguay\",\"abbreviation\":\"UY\"},{\"name\":\"Uzbekistan\",\"abbreviation\":\"UZ\"},{\"name\":\"Vanuatu\",\"abbreviation\":\"VU\"},{\"name\":\"Vatican City\",\"abbreviation\":\"VA\"},{\"name\":\"Venezuela\",\"abbreviation\":\"VE\"},{\"name\":\"Vietnam\",\"abbreviation\":\"VN\"},{\"name\":\"Wallis & Futuna\",\"abbreviation\":\"WF\"},{\"name\":\"Western Sahara\",\"abbreviation\":\"EH\"},{\"name\":\"Yemen\",\"abbreviation\":\"YE\"},{\"name\":\"Zambia\",\"abbreviation\":\"ZM\"},{\"name\":\"Zimbabwe\",\"abbreviation\":\"ZW\"}],\r\n\r\n\t\tcounties: {\r\n            // Data taken from http://www.downloadexcelfiles.com/gb_en/download-excel-file-list-counties-uk\r\n            \"uk\": [\r\n                {name: 'Bath and North East Somerset'},\r\n                {name: 'Bedford'},\r\n                {name: 'Blackburn with Darwen'},\r\n                {name: 'Blackpool'},\r\n                {name: 'Bournemouth'},\r\n                {name: 'Bracknell Forest'},\r\n                {name: 'Brighton & Hove'},\r\n                {name: 'Bristol'},\r\n                {name: 'Buckinghamshire'},\r\n                {name: 'Cambridgeshire'},\r\n                {name: 'Central Bedfordshire'},\r\n                {name: 'Cheshire East'},\r\n                {name: 'Cheshire West and Chester'},\r\n                {name: 'Cornwall'},\r\n                {name: 'County Durham'},\r\n                {name: 'Cumbria'},\r\n                {name: 'Darlington'},\r\n                {name: 'Derby'},\r\n                {name: 'Derbyshire'},\r\n                {name: 'Devon'},\r\n                {name: 'Dorset'},\r\n                {name: 'East Riding of Yorkshire'},\r\n                {name: 'East Sussex'},\r\n                {name: 'Essex'},\r\n                {name: 'Gloucestershire'},\r\n                {name: 'Greater London'},\r\n                {name: 'Greater Manchester'},\r\n                {name: 'Halton'},\r\n                {name: 'Hampshire'},\r\n                {name: 'Hartlepool'},\r\n                {name: 'Herefordshire'},\r\n                {name: 'Hertfordshire'},\r\n                {name: 'Hull'},\r\n                {name: 'Isle of Wight'},\r\n                {name: 'Isles of Scilly'},\r\n                {name: 'Kent'},\r\n                {name: 'Lancashire'},\r\n                {name: 'Leicester'},\r\n                {name: 'Leicestershire'},\r\n                {name: 'Lincolnshire'},\r\n                {name: 'Luton'},\r\n                {name: 'Medway'},\r\n                {name: 'Merseyside'},\r\n                {name: 'Middlesbrough'},\r\n                {name: 'Milton Keynes'},\r\n                {name: 'Norfolk'},\r\n                {name: 'North East Lincolnshire'},\r\n                {name: 'North Lincolnshire'},\r\n                {name: 'North Somerset'},\r\n                {name: 'North Yorkshire'},\r\n                {name: 'Northamptonshire'},\r\n                {name: 'Northumberland'},\r\n                {name: 'Nottingham'},\r\n                {name: 'Nottinghamshire'},\r\n                {name: 'Oxfordshire'},\r\n                {name: 'Peterborough'},\r\n                {name: 'Plymouth'},\r\n                {name: 'Poole'},\r\n                {name: 'Portsmouth'},\r\n                {name: 'Reading'},\r\n                {name: 'Redcar and Cleveland'},\r\n                {name: 'Rutland'},\r\n                {name: 'Shropshire'},\r\n                {name: 'Slough'},\r\n                {name: 'Somerset'},\r\n                {name: 'South Gloucestershire'},\r\n                {name: 'South Yorkshire'},\r\n                {name: 'Southampton'},\r\n                {name: 'Southend-on-Sea'},\r\n                {name: 'Staffordshire'},\r\n                {name: 'Stockton-on-Tees'},\r\n                {name: 'Stoke-on-Trent'},\r\n                {name: 'Suffolk'},\r\n                {name: 'Surrey'},\r\n                {name: 'Swindon'},\r\n                {name: 'Telford and Wrekin'},\r\n                {name: 'Thurrock'},\r\n                {name: 'Torbay'},\r\n                {name: 'Tyne and Wear'},\r\n                {name: 'Warrington'},\r\n                {name: 'Warwickshire'},\r\n                {name: 'West Berkshire'},\r\n                {name: 'West Midlands'},\r\n                {name: 'West Sussex'},\r\n                {name: 'West Yorkshire'},\r\n                {name: 'Wiltshire'},\r\n                {name: 'Windsor and Maidenhead'},\r\n                {name: 'Wokingham'},\r\n                {name: 'Worcestershire'},\r\n                {name: 'York'}]\r\n\t\t\t\t},\r\n        provinces: {\r\n            \"ca\": [\r\n                {name: 'Alberta', abbreviation: 'AB'},\r\n                {name: 'British Columbia', abbreviation: 'BC'},\r\n                {name: 'Manitoba', abbreviation: 'MB'},\r\n                {name: 'New Brunswick', abbreviation: 'NB'},\r\n                {name: 'Newfoundland and Labrador', abbreviation: 'NL'},\r\n                {name: 'Nova Scotia', abbreviation: 'NS'},\r\n                {name: 'Ontario', abbreviation: 'ON'},\r\n                {name: 'Prince Edward Island', abbreviation: 'PE'},\r\n                {name: 'Quebec', abbreviation: 'QC'},\r\n                {name: 'Saskatchewan', abbreviation: 'SK'},\r\n\r\n                // The case could be made that the following are not actually provinces\r\n                // since they are technically considered \"territories\" however they all\r\n                // look the same on an envelope!\r\n                {name: 'Northwest Territories', abbreviation: 'NT'},\r\n                {name: 'Nunavut', abbreviation: 'NU'},\r\n                {name: 'Yukon', abbreviation: 'YT'}\r\n            ],\r\n            \"it\": [\r\n                { name: \"Agrigento\", abbreviation: \"AG\", code: 84 },\r\n                { name: \"Alessandria\", abbreviation: \"AL\", code: 6 },\r\n                { name: \"Ancona\", abbreviation: \"AN\", code: 42 },\r\n                { name: \"Aosta\", abbreviation: \"AO\", code: 7 },\r\n                { name: \"L'Aquila\", abbreviation: \"AQ\", code: 66 },\r\n                { name: \"Arezzo\", abbreviation: \"AR\", code: 51 },\r\n                { name: \"Ascoli-Piceno\", abbreviation: \"AP\", code: 44 },\r\n                { name: \"Asti\", abbreviation: \"AT\", code: 5 },\r\n                { name: \"Avellino\", abbreviation: \"AV\", code: 64 },\r\n                { name: \"Bari\", abbreviation: \"BA\", code: 72 },\r\n                { name: \"Barletta-Andria-Trani\", abbreviation: \"BT\", code: 72 },\r\n                { name: \"Belluno\", abbreviation: \"BL\", code: 25 },\r\n                { name: \"Benevento\", abbreviation: \"BN\", code: 62 },\r\n                { name: \"Bergamo\", abbreviation: \"BG\", code: 16 },\r\n                { name: \"Biella\", abbreviation: \"BI\", code: 96 },\r\n                { name: \"Bologna\", abbreviation: \"BO\", code: 37 },\r\n                { name: \"Bolzano\", abbreviation: \"BZ\", code: 21 },\r\n                { name: \"Brescia\", abbreviation: \"BS\", code: 17 },\r\n                { name: \"Brindisi\", abbreviation: \"BR\", code: 74 },\r\n                { name: \"Cagliari\", abbreviation: \"CA\", code: 92 },\r\n                { name: \"Caltanissetta\", abbreviation: \"CL\", code: 85 },\r\n                { name: \"Campobasso\", abbreviation: \"CB\", code: 70 },\r\n                { name: \"Carbonia Iglesias\", abbreviation: \"CI\", code: 70 },\r\n                { name: \"Caserta\", abbreviation: \"CE\", code: 61 },\r\n                { name: \"Catania\", abbreviation: \"CT\", code: 87 },\r\n                { name: \"Catanzaro\", abbreviation: \"CZ\", code: 79 },\r\n                { name: \"Chieti\", abbreviation: \"CH\", code: 69 },\r\n                { name: \"Como\", abbreviation: \"CO\", code: 13 },\r\n                { name: \"Cosenza\", abbreviation: \"CS\", code: 78 },\r\n                { name: \"Cremona\", abbreviation: \"CR\", code: 19 },\r\n                { name: \"Crotone\", abbreviation: \"KR\", code: 101 },\r\n                { name: \"Cuneo\", abbreviation: \"CN\", code: 4 },\r\n                { name: \"Enna\", abbreviation: \"EN\", code: 86 },\r\n                { name: \"Fermo\", abbreviation: \"FM\", code: 86 },\r\n                { name: \"Ferrara\", abbreviation: \"FE\", code: 38 },\r\n                { name: \"Firenze\", abbreviation: \"FI\", code: 48 },\r\n                { name: \"Foggia\", abbreviation: \"FG\", code: 71 },\r\n                { name: \"Forli-Cesena\", abbreviation: \"FC\", code: 71 },\r\n                { name: \"Frosinone\", abbreviation: \"FR\", code: 60 },\r\n                { name: \"Genova\", abbreviation: \"GE\", code: 10 },\r\n                { name: \"Gorizia\", abbreviation: \"GO\", code: 31 },\r\n                { name: \"Grosseto\", abbreviation: \"GR\", code: 53 },\r\n                { name: \"Imperia\", abbreviation: \"IM\", code: 8 },\r\n                { name: \"Isernia\", abbreviation: \"IS\", code: 94 },\r\n                { name: \"La-Spezia\", abbreviation: \"SP\", code: 66 },\r\n                { name: \"Latina\", abbreviation: \"LT\", code: 59 },\r\n                { name: \"Lecce\", abbreviation: \"LE\", code: 75 },\r\n                { name: \"Lecco\", abbreviation: \"LC\", code: 97 },\r\n                { name: \"Livorno\", abbreviation: \"LI\", code: 49 },\r\n                { name: \"Lodi\", abbreviation: \"LO\", code: 98 },\r\n                { name: \"Lucca\", abbreviation: \"LU\", code: 46 },\r\n                { name: \"Macerata\", abbreviation: \"MC\", code: 43 },\r\n                { name: \"Mantova\", abbreviation: \"MN\", code: 20 },\r\n                { name: \"Massa-Carrara\", abbreviation: \"MS\", code: 45 },\r\n                { name: \"Matera\", abbreviation: \"MT\", code: 77 },\r\n                { name: \"Medio Campidano\", abbreviation: \"VS\", code: 77 },\r\n                { name: \"Messina\", abbreviation: \"ME\", code: 83 },\r\n                { name: \"Milano\", abbreviation: \"MI\", code: 15 },\r\n                { name: \"Modena\", abbreviation: \"MO\", code: 36 },\r\n                { name: \"Monza-Brianza\", abbreviation: \"MB\", code: 36 },\r\n                { name: \"Napoli\", abbreviation: \"NA\", code: 63 },\r\n                { name: \"Novara\", abbreviation: \"NO\", code: 3 },\r\n                { name: \"Nuoro\", abbreviation: \"NU\", code: 91 },\r\n                { name: \"Ogliastra\", abbreviation: \"OG\", code: 91 },\r\n                { name: \"Olbia Tempio\", abbreviation: \"OT\", code: 91 },\r\n                { name: \"Oristano\", abbreviation: \"OR\", code: 95 },\r\n                { name: \"Padova\", abbreviation: \"PD\", code: 28 },\r\n                { name: \"Palermo\", abbreviation: \"PA\", code: 82 },\r\n                { name: \"Parma\", abbreviation: \"PR\", code: 34 },\r\n                { name: \"Pavia\", abbreviation: \"PV\", code: 18 },\r\n                { name: \"Perugia\", abbreviation: \"PG\", code: 54 },\r\n                { name: \"Pesaro-Urbino\", abbreviation: \"PU\", code: 41 },\r\n                { name: \"Pescara\", abbreviation: \"PE\", code: 68 },\r\n                { name: \"Piacenza\", abbreviation: \"PC\", code: 33 },\r\n                { name: \"Pisa\", abbreviation: \"PI\", code: 50 },\r\n                { name: \"Pistoia\", abbreviation: \"PT\", code: 47 },\r\n                { name: \"Pordenone\", abbreviation: \"PN\", code: 93 },\r\n                { name: \"Potenza\", abbreviation: \"PZ\", code: 76 },\r\n                { name: \"Prato\", abbreviation: \"PO\", code: 100 },\r\n                { name: \"Ragusa\", abbreviation: \"RG\", code: 88 },\r\n                { name: \"Ravenna\", abbreviation: \"RA\", code: 39 },\r\n                { name: \"Reggio-Calabria\", abbreviation: \"RC\", code: 35 },\r\n                { name: \"Reggio-Emilia\", abbreviation: \"RE\", code: 35 },\r\n                { name: \"Rieti\", abbreviation: \"RI\", code: 57 },\r\n                { name: \"Rimini\", abbreviation: \"RN\", code: 99 },\r\n                { name: \"Roma\", abbreviation: \"Roma\", code: 58 },\r\n                { name: \"Rovigo\", abbreviation: \"RO\", code: 29 },\r\n                { name: \"Salerno\", abbreviation: \"SA\", code: 65 },\r\n                { name: \"Sassari\", abbreviation: \"SS\", code: 90 },\r\n                { name: \"Savona\", abbreviation: \"SV\", code: 9 },\r\n                { name: \"Siena\", abbreviation: \"SI\", code: 52 },\r\n                { name: \"Siracusa\", abbreviation: \"SR\", code: 89 },\r\n                { name: \"Sondrio\", abbreviation: \"SO\", code: 14 },\r\n                { name: \"Taranto\", abbreviation: \"TA\", code: 73 },\r\n                { name: \"Teramo\", abbreviation: \"TE\", code: 67 },\r\n                { name: \"Terni\", abbreviation: \"TR\", code: 55 },\r\n                { name: \"Torino\", abbreviation: \"TO\", code: 1 },\r\n                { name: \"Trapani\", abbreviation: \"TP\", code: 81 },\r\n                { name: \"Trento\", abbreviation: \"TN\", code: 22 },\r\n                { name: \"Treviso\", abbreviation: \"TV\", code: 26 },\r\n                { name: \"Trieste\", abbreviation: \"TS\", code: 32 },\r\n                { name: \"Udine\", abbreviation: \"UD\", code: 30 },\r\n                { name: \"Varese\", abbreviation: \"VA\", code: 12 },\r\n                { name: \"Venezia\", abbreviation: \"VE\", code: 27 },\r\n                { name: \"Verbania\", abbreviation: \"VB\", code: 27 },\r\n                { name: \"Vercelli\", abbreviation: \"VC\", code: 2 },\r\n                { name: \"Verona\", abbreviation: \"VR\", code: 23 },\r\n                { name: \"Vibo-Valentia\", abbreviation: \"VV\", code: 102 },\r\n                { name: \"Vicenza\", abbreviation: \"VI\", code: 24 },\r\n                { name: \"Viterbo\", abbreviation: \"VT\", code: 56 }\r\n            ]\r\n        },\r\n\r\n            // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json\r\n        nationalities: [\r\n           {name: 'Afghan'},\r\n           {name: 'Albanian'},\r\n           {name: 'Algerian'},\r\n           {name: 'American'},\r\n           {name: 'Andorran'},\r\n           {name: 'Angolan'},\r\n           {name: 'Antiguans'},\r\n           {name: 'Argentinean'},\r\n           {name: 'Armenian'},\r\n           {name: 'Australian'},\r\n           {name: 'Austrian'},\r\n           {name: 'Azerbaijani'},\r\n           {name: 'Bahami'},\r\n           {name: 'Bahraini'},\r\n           {name: 'Bangladeshi'},\r\n           {name: 'Barbadian'},\r\n           {name: 'Barbudans'},\r\n           {name: 'Batswana'},\r\n           {name: 'Belarusian'},\r\n           {name: 'Belgian'},\r\n           {name: 'Belizean'},\r\n           {name: 'Beninese'},\r\n           {name: 'Bhutanese'},\r\n           {name: 'Bolivian'},\r\n           {name: 'Bosnian'},\r\n           {name: 'Brazilian'},\r\n           {name: 'British'},\r\n           {name: 'Bruneian'},\r\n           {name: 'Bulgarian'},\r\n           {name: 'Burkinabe'},\r\n           {name: 'Burmese'},\r\n           {name: 'Burundian'},\r\n           {name: 'Cambodian'},\r\n           {name: 'Cameroonian'},\r\n           {name: 'Canadian'},\r\n           {name: 'Cape Verdean'},\r\n           {name: 'Central African'},\r\n           {name: 'Chadian'},\r\n           {name: 'Chilean'},\r\n           {name: 'Chinese'},\r\n           {name: 'Colombian'},\r\n           {name: 'Comoran'},\r\n           {name: 'Congolese'},\r\n           {name: 'Costa Rican'},\r\n           {name: 'Croatian'},\r\n           {name: 'Cuban'},\r\n           {name: 'Cypriot'},\r\n           {name: 'Czech'},\r\n           {name: 'Danish'},\r\n           {name: 'Djibouti'},\r\n           {name: 'Dominican'},\r\n           {name: 'Dutch'},\r\n           {name: 'East Timorese'},\r\n           {name: 'Ecuadorean'},\r\n           {name: 'Egyptian'},\r\n           {name: 'Emirian'},\r\n           {name: 'Equatorial Guinean'},\r\n           {name: 'Eritrean'},\r\n           {name: 'Estonian'},\r\n           {name: 'Ethiopian'},\r\n           {name: 'Fijian'},\r\n           {name: 'Filipino'},\r\n           {name: 'Finnish'},\r\n           {name: 'French'},\r\n           {name: 'Gabonese'},\r\n           {name: 'Gambian'},\r\n           {name: 'Georgian'},\r\n           {name: 'German'},\r\n           {name: 'Ghanaian'},\r\n           {name: 'Greek'},\r\n           {name: 'Grenadian'},\r\n           {name: 'Guatemalan'},\r\n           {name: 'Guinea-Bissauan'},\r\n           {name: 'Guinean'},\r\n           {name: 'Guyanese'},\r\n           {name: 'Haitian'},\r\n           {name: 'Herzegovinian'},\r\n           {name: 'Honduran'},\r\n           {name: 'Hungarian'},\r\n           {name: 'I-Kiribati'},\r\n           {name: 'Icelander'},\r\n           {name: 'Indian'},\r\n           {name: 'Indonesian'},\r\n           {name: 'Iranian'},\r\n           {name: 'Iraqi'},\r\n           {name: 'Irish'},\r\n           {name: 'Israeli'},\r\n           {name: 'Italian'},\r\n           {name: 'Ivorian'},\r\n           {name: 'Jamaican'},\r\n           {name: 'Japanese'},\r\n           {name: 'Jordanian'},\r\n           {name: 'Kazakhstani'},\r\n           {name: 'Kenyan'},\r\n           {name: 'Kittian and Nevisian'},\r\n           {name: 'Kuwaiti'},\r\n           {name: 'Kyrgyz'},\r\n           {name: 'Laotian'},\r\n           {name: 'Latvian'},\r\n           {name: 'Lebanese'},\r\n           {name: 'Liberian'},\r\n           {name: 'Libyan'},\r\n           {name: 'Liechtensteiner'},\r\n           {name: 'Lithuanian'},\r\n           {name: 'Luxembourger'},\r\n           {name: 'Macedonian'},\r\n           {name: 'Malagasy'},\r\n           {name: 'Malawian'},\r\n           {name: 'Malaysian'},\r\n           {name: 'Maldivan'},\r\n           {name: 'Malian'},\r\n           {name: 'Maltese'},\r\n           {name: 'Marshallese'},\r\n           {name: 'Mauritanian'},\r\n           {name: 'Mauritian'},\r\n           {name: 'Mexican'},\r\n           {name: 'Micronesian'},\r\n           {name: 'Moldovan'},\r\n           {name: 'Monacan'},\r\n           {name: 'Mongolian'},\r\n           {name: 'Moroccan'},\r\n           {name: 'Mosotho'},\r\n           {name: 'Motswana'},\r\n           {name: 'Mozambican'},\r\n           {name: 'Namibian'},\r\n           {name: 'Nauruan'},\r\n           {name: 'Nepalese'},\r\n           {name: 'New Zealander'},\r\n           {name: 'Nicaraguan'},\r\n           {name: 'Nigerian'},\r\n           {name: 'Nigerien'},\r\n           {name: 'North Korean'},\r\n           {name: 'Northern Irish'},\r\n           {name: 'Norwegian'},\r\n           {name: 'Omani'},\r\n           {name: 'Pakistani'},\r\n           {name: 'Palauan'},\r\n           {name: 'Panamanian'},\r\n           {name: 'Papua New Guinean'},\r\n           {name: 'Paraguayan'},\r\n           {name: 'Peruvian'},\r\n           {name: 'Polish'},\r\n           {name: 'Portuguese'},\r\n           {name: 'Qatari'},\r\n           {name: 'Romani'},\r\n           {name: 'Russian'},\r\n           {name: 'Rwandan'},\r\n           {name: 'Saint Lucian'},\r\n           {name: 'Salvadoran'},\r\n           {name: 'Samoan'},\r\n           {name: 'San Marinese'},\r\n           {name: 'Sao Tomean'},\r\n           {name: 'Saudi'},\r\n           {name: 'Scottish'},\r\n           {name: 'Senegalese'},\r\n           {name: 'Serbian'},\r\n           {name: 'Seychellois'},\r\n           {name: 'Sierra Leonean'},\r\n           {name: 'Singaporean'},\r\n           {name: 'Slovakian'},\r\n           {name: 'Slovenian'},\r\n           {name: 'Solomon Islander'},\r\n           {name: 'Somali'},\r\n           {name: 'South African'},\r\n           {name: 'South Korean'},\r\n           {name: 'Spanish'},\r\n           {name: 'Sri Lankan'},\r\n           {name: 'Sudanese'},\r\n           {name: 'Surinamer'},\r\n           {name: 'Swazi'},\r\n           {name: 'Swedish'},\r\n           {name: 'Swiss'},\r\n           {name: 'Syrian'},\r\n           {name: 'Taiwanese'},\r\n           {name: 'Tajik'},\r\n           {name: 'Tanzanian'},\r\n           {name: 'Thai'},\r\n           {name: 'Togolese'},\r\n           {name: 'Tongan'},\r\n           {name: 'Trinidadian or Tobagonian'},\r\n           {name: 'Tunisian'},\r\n           {name: 'Turkish'},\r\n           {name: 'Tuvaluan'},\r\n           {name: 'Ugandan'},\r\n           {name: 'Ukrainian'},\r\n           {name: 'Uruguaya'},\r\n           {name: 'Uzbekistani'},\r\n           {name: 'Venezuela'},\r\n           {name: 'Vietnamese'},\r\n           {name: 'Wels'},\r\n           {name: 'Yemenit'},\r\n           {name: 'Zambia'},\r\n           {name: 'Zimbabwe'},\r\n        ],\r\n\r\n        us_states_and_dc: [\r\n            {name: 'Alabama', abbreviation: 'AL'},\r\n            {name: 'Alaska', abbreviation: 'AK'},\r\n            {name: 'Arizona', abbreviation: 'AZ'},\r\n            {name: 'Arkansas', abbreviation: 'AR'},\r\n            {name: 'California', abbreviation: 'CA'},\r\n            {name: 'Colorado', abbreviation: 'CO'},\r\n            {name: 'Connecticut', abbreviation: 'CT'},\r\n            {name: 'Delaware', abbreviation: 'DE'},\r\n            {name: 'District of Columbia', abbreviation: 'DC'},\r\n            {name: 'Florida', abbreviation: 'FL'},\r\n            {name: 'Georgia', abbreviation: 'GA'},\r\n            {name: 'Hawaii', abbreviation: 'HI'},\r\n            {name: 'Idaho', abbreviation: 'ID'},\r\n            {name: 'Illinois', abbreviation: 'IL'},\r\n            {name: 'Indiana', abbreviation: 'IN'},\r\n            {name: 'Iowa', abbreviation: 'IA'},\r\n            {name: 'Kansas', abbreviation: 'KS'},\r\n            {name: 'Kentucky', abbreviation: 'KY'},\r\n            {name: 'Louisiana', abbreviation: 'LA'},\r\n            {name: 'Maine', abbreviation: 'ME'},\r\n            {name: 'Maryland', abbreviation: 'MD'},\r\n            {name: 'Massachusetts', abbreviation: 'MA'},\r\n            {name: 'Michigan', abbreviation: 'MI'},\r\n            {name: 'Minnesota', abbreviation: 'MN'},\r\n            {name: 'Mississippi', abbreviation: 'MS'},\r\n            {name: 'Missouri', abbreviation: 'MO'},\r\n            {name: 'Montana', abbreviation: 'MT'},\r\n            {name: 'Nebraska', abbreviation: 'NE'},\r\n            {name: 'Nevada', abbreviation: 'NV'},\r\n            {name: 'New Hampshire', abbreviation: 'NH'},\r\n            {name: 'New Jersey', abbreviation: 'NJ'},\r\n            {name: 'New Mexico', abbreviation: 'NM'},\r\n            {name: 'New York', abbreviation: 'NY'},\r\n            {name: 'North Carolina', abbreviation: 'NC'},\r\n            {name: 'North Dakota', abbreviation: 'ND'},\r\n            {name: 'Ohio', abbreviation: 'OH'},\r\n            {name: 'Oklahoma', abbreviation: 'OK'},\r\n            {name: 'Oregon', abbreviation: 'OR'},\r\n            {name: 'Pennsylvania', abbreviation: 'PA'},\r\n            {name: 'Rhode Island', abbreviation: 'RI'},\r\n            {name: 'South Carolina', abbreviation: 'SC'},\r\n            {name: 'South Dakota', abbreviation: 'SD'},\r\n            {name: 'Tennessee', abbreviation: 'TN'},\r\n            {name: 'Texas', abbreviation: 'TX'},\r\n            {name: 'Utah', abbreviation: 'UT'},\r\n            {name: 'Vermont', abbreviation: 'VT'},\r\n            {name: 'Virginia', abbreviation: 'VA'},\r\n            {name: 'Washington', abbreviation: 'WA'},\r\n            {name: 'West Virginia', abbreviation: 'WV'},\r\n            {name: 'Wisconsin', abbreviation: 'WI'},\r\n            {name: 'Wyoming', abbreviation: 'WY'}\r\n        ],\r\n\r\n        territories: [\r\n            {name: 'American Samoa', abbreviation: 'AS'},\r\n            {name: 'Federated States of Micronesia', abbreviation: 'FM'},\r\n            {name: 'Guam', abbreviation: 'GU'},\r\n            {name: 'Marshall Islands', abbreviation: 'MH'},\r\n            {name: 'Northern Mariana Islands', abbreviation: 'MP'},\r\n            {name: 'Puerto Rico', abbreviation: 'PR'},\r\n            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}\r\n        ],\r\n\r\n        armed_forces: [\r\n            {name: 'Armed Forces Europe', abbreviation: 'AE'},\r\n            {name: 'Armed Forces Pacific', abbreviation: 'AP'},\r\n            {name: 'Armed Forces the Americas', abbreviation: 'AA'}\r\n        ],\r\n\r\n        country_regions: {\r\n            it: [\r\n                { name: \"Valle d'Aosta\", abbreviation: \"VDA\" },\r\n                { name: \"Piemonte\", abbreviation: \"PIE\" },\r\n                { name: \"Lombardia\", abbreviation: \"LOM\" },\r\n                { name: \"Veneto\", abbreviation: \"VEN\" },\r\n                { name: \"Trentino Alto Adige\", abbreviation: \"TAA\" },\r\n                { name: \"Friuli Venezia Giulia\", abbreviation: \"FVG\" },\r\n                { name: \"Liguria\", abbreviation: \"LIG\" },\r\n                { name: \"Emilia Romagna\", abbreviation: \"EMR\" },\r\n                { name: \"Toscana\", abbreviation: \"TOS\" },\r\n                { name: \"Umbria\", abbreviation: \"UMB\" },\r\n                { name: \"Marche\", abbreviation: \"MAR\" },\r\n                { name: \"Abruzzo\", abbreviation: \"ABR\" },\r\n                { name: \"Lazio\", abbreviation: \"LAZ\" },\r\n                { name: \"Campania\", abbreviation: \"CAM\" },\r\n                { name: \"Puglia\", abbreviation: \"PUG\" },\r\n                { name: \"Basilicata\", abbreviation: \"BAS\" },\r\n                { name: \"Molise\", abbreviation: \"MOL\" },\r\n                { name: \"Calabria\", abbreviation: \"CAL\" },\r\n                { name: \"Sicilia\", abbreviation: \"SIC\" },\r\n                { name: \"Sardegna\", abbreviation: \"SAR\" }\r\n            ]\r\n        },\r\n\r\n        street_suffixes: {\r\n            'us': [\r\n                {name: 'Avenue', abbreviation: 'Ave'},\r\n                {name: 'Boulevard', abbreviation: 'Blvd'},\r\n                {name: 'Center', abbreviation: 'Ctr'},\r\n                {name: 'Circle', abbreviation: 'Cir'},\r\n                {name: 'Court', abbreviation: 'Ct'},\r\n                {name: 'Drive', abbreviation: 'Dr'},\r\n                {name: 'Extension', abbreviation: 'Ext'},\r\n                {name: 'Glen', abbreviation: 'Gln'},\r\n                {name: 'Grove', abbreviation: 'Grv'},\r\n                {name: 'Heights', abbreviation: 'Hts'},\r\n                {name: 'Highway', abbreviation: 'Hwy'},\r\n                {name: 'Junction', abbreviation: 'Jct'},\r\n                {name: 'Key', abbreviation: 'Key'},\r\n                {name: 'Lane', abbreviation: 'Ln'},\r\n                {name: 'Loop', abbreviation: 'Loop'},\r\n                {name: 'Manor', abbreviation: 'Mnr'},\r\n                {name: 'Mill', abbreviation: 'Mill'},\r\n                {name: 'Park', abbreviation: 'Park'},\r\n                {name: 'Parkway', abbreviation: 'Pkwy'},\r\n                {name: 'Pass', abbreviation: 'Pass'},\r\n                {name: 'Path', abbreviation: 'Path'},\r\n                {name: 'Pike', abbreviation: 'Pike'},\r\n                {name: 'Place', abbreviation: 'Pl'},\r\n                {name: 'Plaza', abbreviation: 'Plz'},\r\n                {name: 'Point', abbreviation: 'Pt'},\r\n                {name: 'Ridge', abbreviation: 'Rdg'},\r\n                {name: 'River', abbreviation: 'Riv'},\r\n                {name: 'Road', abbreviation: 'Rd'},\r\n                {name: 'Square', abbreviation: 'Sq'},\r\n                {name: 'Street', abbreviation: 'St'},\r\n                {name: 'Terrace', abbreviation: 'Ter'},\r\n                {name: 'Trail', abbreviation: 'Trl'},\r\n                {name: 'Turnpike', abbreviation: 'Tpke'},\r\n                {name: 'View', abbreviation: 'Vw'},\r\n                {name: 'Way', abbreviation: 'Way'}\r\n            ],\r\n            'it': [\r\n                { name: 'Accesso', abbreviation: 'Acc.' },\r\n                { name: 'Alzaia', abbreviation: 'Alz.' },\r\n                { name: 'Arco', abbreviation: 'Arco' },\r\n                { name: 'Archivolto', abbreviation: 'Acv.' },\r\n                { name: 'Arena', abbreviation: 'Arena' },\r\n                { name: 'Argine', abbreviation: 'Argine' },\r\n                { name: 'Bacino', abbreviation: 'Bacino' },\r\n                { name: 'Banchi', abbreviation: 'Banchi' },\r\n                { name: 'Banchina', abbreviation: 'Ban.' },\r\n                { name: 'Bastioni', abbreviation: 'Bas.' },\r\n                { name: 'Belvedere', abbreviation: 'Belv.' },\r\n                { name: 'Borgata', abbreviation: 'B.ta' },\r\n                { name: 'Borgo', abbreviation: 'B.go' },\r\n                { name: 'Calata', abbreviation: 'Cal.' },\r\n                { name: 'Calle', abbreviation: 'Calle' },\r\n                { name: 'Campiello', abbreviation: 'Cam.' },\r\n                { name: 'Campo', abbreviation: 'Cam.' },\r\n                { name: 'Canale', abbreviation: 'Can.' },\r\n                { name: 'Carraia', abbreviation: 'Carr.' },\r\n                { name: 'Cascina', abbreviation: 'Cascina' },\r\n                { name: 'Case sparse', abbreviation: 'c.s.' },\r\n                { name: 'Cavalcavia', abbreviation: 'Cv.' },\r\n                { name: 'Circonvallazione', abbreviation: 'Cv.' },\r\n                { name: 'Complanare', abbreviation: 'C.re' },\r\n                { name: 'Contrada', abbreviation: 'C.da' },\r\n                { name: 'Corso', abbreviation: 'C.so' },\r\n                { name: 'Corte', abbreviation: 'C.te' },\r\n                { name: 'Cortile', abbreviation: 'C.le' },\r\n                { name: 'Diramazione', abbreviation: 'Dir.' },\r\n                { name: 'Fondaco', abbreviation: 'F.co' },\r\n                { name: 'Fondamenta', abbreviation: 'F.ta' },\r\n                { name: 'Fondo', abbreviation: 'F.do' },\r\n                { name: 'Frazione', abbreviation: 'Fr.' },\r\n                { name: 'Isola', abbreviation: 'Is.' },\r\n                { name: 'Largo', abbreviation: 'L.go' },\r\n                { name: 'Litoranea', abbreviation: 'Lit.' },\r\n                { name: 'Lungolago', abbreviation: 'L.go lago' },\r\n                { name: 'Lungo Po', abbreviation: 'l.go Po' },\r\n                { name: 'Molo', abbreviation: 'Molo' },\r\n                { name: 'Mura', abbreviation: 'Mura' },\r\n                { name: 'Passaggio privato', abbreviation: 'pass. priv.' },\r\n                { name: 'Passeggiata', abbreviation: 'Pass.' },\r\n                { name: 'Piazza', abbreviation: 'P.zza' },\r\n                { name: 'Piazzale', abbreviation: 'P.le' },\r\n                { name: 'Ponte', abbreviation: 'P.te' },\r\n                { name: 'Portico', abbreviation: 'P.co' },\r\n                { name: 'Rampa', abbreviation: 'Rampa' },\r\n                { name: 'Regione', abbreviation: 'Reg.' },\r\n                { name: 'Rione', abbreviation: 'R.ne' },\r\n                { name: 'Rio', abbreviation: 'Rio' },\r\n                { name: 'Ripa', abbreviation: 'Ripa' },\r\n                { name: 'Riva', abbreviation: 'Riva' },\r\n                { name: 'Rondò', abbreviation: 'Rondò' },\r\n                { name: 'Rotonda', abbreviation: 'Rot.' },\r\n                { name: 'Sagrato', abbreviation: 'Sagr.' },\r\n                { name: 'Salita', abbreviation: 'Sal.' },\r\n                { name: 'Scalinata', abbreviation: 'Scal.' },\r\n                { name: 'Scalone', abbreviation: 'Scal.' },\r\n                { name: 'Slargo', abbreviation: 'Sl.' },\r\n                { name: 'Sottoportico', abbreviation: 'Sott.' },\r\n                { name: 'Strada', abbreviation: 'Str.' },\r\n                { name: 'Stradale', abbreviation: 'Str.le' },\r\n                { name: 'Strettoia', abbreviation: 'Strett.' },\r\n                { name: 'Traversa', abbreviation: 'Trav.' },\r\n                { name: 'Via', abbreviation: 'V.' },\r\n                { name: 'Viale', abbreviation: 'V.le' },\r\n                { name: 'Vicinale', abbreviation: 'Vic.le' },\r\n                { name: 'Vicolo', abbreviation: 'Vic.' }\r\n            ]\r\n        },\r\n\r\n        months: [\r\n            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},\r\n            // Not messing with leap years...\r\n            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},\r\n            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},\r\n            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},\r\n            {name: 'May', short_name: 'May', numeric: '05', days: 31},\r\n            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},\r\n            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},\r\n            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},\r\n            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},\r\n            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},\r\n            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},\r\n            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}\r\n        ],\r\n\r\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\r\n        cc_types: [\r\n            {name: \"American Express\", short_name: 'amex', prefix: '34', length: 15},\r\n            {name: \"Bankcard\", short_name: 'bankcard', prefix: '5610', length: 16},\r\n            {name: \"China UnionPay\", short_name: 'chinaunion', prefix: '62', length: 16},\r\n            {name: \"Diners Club Carte Blanche\", short_name: 'dccarte', prefix: '300', length: 14},\r\n            {name: \"Diners Club enRoute\", short_name: 'dcenroute', prefix: '2014', length: 15},\r\n            {name: \"Diners Club International\", short_name: 'dcintl', prefix: '36', length: 14},\r\n            {name: \"Diners Club United States & Canada\", short_name: 'dcusc', prefix: '54', length: 16},\r\n            {name: \"Discover Card\", short_name: 'discover', prefix: '6011', length: 16},\r\n            {name: \"InstaPayment\", short_name: 'instapay', prefix: '637', length: 16},\r\n            {name: \"JCB\", short_name: 'jcb', prefix: '3528', length: 16},\r\n            {name: \"Laser\", short_name: 'laser', prefix: '6304', length: 16},\r\n            {name: \"Maestro\", short_name: 'maestro', prefix: '5018', length: 16},\r\n            {name: \"Mastercard\", short_name: 'mc', prefix: '51', length: 16},\r\n            {name: \"Solo\", short_name: 'solo', prefix: '6334', length: 16},\r\n            {name: \"Switch\", short_name: 'switch', prefix: '4903', length: 16},\r\n            {name: \"Visa\", short_name: 'visa', prefix: '4', length: 16},\r\n            {name: \"Visa Electron\", short_name: 'electron', prefix: '4026', length: 16}\r\n        ],\r\n\r\n        //return all world currency by ISO 4217\r\n        currency_types: [\r\n            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},\r\n            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},\r\n            {'code' : 'ALL', 'name' : 'Albania Lek'},\r\n            {'code' : 'AMD', 'name' : 'Armenia Dram'},\r\n            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},\r\n            {'code' : 'AOA', 'name' : 'Angola Kwanza'},\r\n            {'code' : 'ARS', 'name' : 'Argentina Peso'},\r\n            {'code' : 'AUD', 'name' : 'Australia Dollar'},\r\n            {'code' : 'AWG', 'name' : 'Aruba Guilder'},\r\n            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},\r\n            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},\r\n            {'code' : 'BBD', 'name' : 'Barbados Dollar'},\r\n            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},\r\n            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},\r\n            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},\r\n            {'code' : 'BIF', 'name' : 'Burundi Franc'},\r\n            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},\r\n            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},\r\n            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},\r\n            {'code' : 'BRL', 'name' : 'Brazil Real'},\r\n            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},\r\n            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},\r\n            {'code' : 'BWP', 'name' : 'Botswana Pula'},\r\n            {'code' : 'BYR', 'name' : 'Belarus Ruble'},\r\n            {'code' : 'BZD', 'name' : 'Belize Dollar'},\r\n            {'code' : 'CAD', 'name' : 'Canada Dollar'},\r\n            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},\r\n            {'code' : 'CHF', 'name' : 'Switzerland Franc'},\r\n            {'code' : 'CLP', 'name' : 'Chile Peso'},\r\n            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},\r\n            {'code' : 'COP', 'name' : 'Colombia Peso'},\r\n            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},\r\n            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},\r\n            {'code' : 'CUP', 'name' : 'Cuba Peso'},\r\n            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},\r\n            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},\r\n            {'code' : 'DJF', 'name' : 'Djibouti Franc'},\r\n            {'code' : 'DKK', 'name' : 'Denmark Krone'},\r\n            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},\r\n            {'code' : 'DZD', 'name' : 'Algeria Dinar'},\r\n            {'code' : 'EGP', 'name' : 'Egypt Pound'},\r\n            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},\r\n            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},\r\n            {'code' : 'EUR', 'name' : 'Euro Member Countries'},\r\n            {'code' : 'FJD', 'name' : 'Fiji Dollar'},\r\n            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},\r\n            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},\r\n            {'code' : 'GEL', 'name' : 'Georgia Lari'},\r\n            {'code' : 'GGP', 'name' : 'Guernsey Pound'},\r\n            {'code' : 'GHS', 'name' : 'Ghana Cedi'},\r\n            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},\r\n            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},\r\n            {'code' : 'GNF', 'name' : 'Guinea Franc'},\r\n            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},\r\n            {'code' : 'GYD', 'name' : 'Guyana Dollar'},\r\n            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},\r\n            {'code' : 'HNL', 'name' : 'Honduras Lempira'},\r\n            {'code' : 'HRK', 'name' : 'Croatia Kuna'},\r\n            {'code' : 'HTG', 'name' : 'Haiti Gourde'},\r\n            {'code' : 'HUF', 'name' : 'Hungary Forint'},\r\n            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},\r\n            {'code' : 'ILS', 'name' : 'Israel Shekel'},\r\n            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},\r\n            {'code' : 'INR', 'name' : 'India Rupee'},\r\n            {'code' : 'IQD', 'name' : 'Iraq Dinar'},\r\n            {'code' : 'IRR', 'name' : 'Iran Rial'},\r\n            {'code' : 'ISK', 'name' : 'Iceland Krona'},\r\n            {'code' : 'JEP', 'name' : 'Jersey Pound'},\r\n            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},\r\n            {'code' : 'JOD', 'name' : 'Jordan Dinar'},\r\n            {'code' : 'JPY', 'name' : 'Japan Yen'},\r\n            {'code' : 'KES', 'name' : 'Kenya Shilling'},\r\n            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},\r\n            {'code' : 'KHR', 'name' : 'Cambodia Riel'},\r\n            {'code' : 'KMF', 'name' : 'Comoros Franc'},\r\n            {'code' : 'KPW', 'name' : 'Korea (North) Won'},\r\n            {'code' : 'KRW', 'name' : 'Korea (South) Won'},\r\n            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},\r\n            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},\r\n            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},\r\n            {'code' : 'LAK', 'name' : 'Laos Kip'},\r\n            {'code' : 'LBP', 'name' : 'Lebanon Pound'},\r\n            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},\r\n            {'code' : 'LRD', 'name' : 'Liberia Dollar'},\r\n            {'code' : 'LSL', 'name' : 'Lesotho Loti'},\r\n            {'code' : 'LTL', 'name' : 'Lithuania Litas'},\r\n            {'code' : 'LYD', 'name' : 'Libya Dinar'},\r\n            {'code' : 'MAD', 'name' : 'Morocco Dirham'},\r\n            {'code' : 'MDL', 'name' : 'Moldova Leu'},\r\n            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},\r\n            {'code' : 'MKD', 'name' : 'Macedonia Denar'},\r\n            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},\r\n            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},\r\n            {'code' : 'MOP', 'name' : 'Macau Pataca'},\r\n            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},\r\n            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},\r\n            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},\r\n            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},\r\n            {'code' : 'MXN', 'name' : 'Mexico Peso'},\r\n            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},\r\n            {'code' : 'MZN', 'name' : 'Mozambique Metical'},\r\n            {'code' : 'NAD', 'name' : 'Namibia Dollar'},\r\n            {'code' : 'NGN', 'name' : 'Nigeria Naira'},\r\n            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},\r\n            {'code' : 'NOK', 'name' : 'Norway Krone'},\r\n            {'code' : 'NPR', 'name' : 'Nepal Rupee'},\r\n            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},\r\n            {'code' : 'OMR', 'name' : 'Oman Rial'},\r\n            {'code' : 'PAB', 'name' : 'Panama Balboa'},\r\n            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},\r\n            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},\r\n            {'code' : 'PHP', 'name' : 'Philippines Peso'},\r\n            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},\r\n            {'code' : 'PLN', 'name' : 'Poland Zloty'},\r\n            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},\r\n            {'code' : 'QAR', 'name' : 'Qatar Riyal'},\r\n            {'code' : 'RON', 'name' : 'Romania New Leu'},\r\n            {'code' : 'RSD', 'name' : 'Serbia Dinar'},\r\n            {'code' : 'RUB', 'name' : 'Russia Ruble'},\r\n            {'code' : 'RWF', 'name' : 'Rwanda Franc'},\r\n            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},\r\n            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},\r\n            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},\r\n            {'code' : 'SDG', 'name' : 'Sudan Pound'},\r\n            {'code' : 'SEK', 'name' : 'Sweden Krona'},\r\n            {'code' : 'SGD', 'name' : 'Singapore Dollar'},\r\n            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},\r\n            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},\r\n            {'code' : 'SOS', 'name' : 'Somalia Shilling'},\r\n            {'code' : 'SPL', 'name' : 'Seborga Luigino'},\r\n            {'code' : 'SRD', 'name' : 'Suriname Dollar'},\r\n            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},\r\n            {'code' : 'SVC', 'name' : 'El Salvador Colon'},\r\n            {'code' : 'SYP', 'name' : 'Syria Pound'},\r\n            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},\r\n            {'code' : 'THB', 'name' : 'Thailand Baht'},\r\n            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},\r\n            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},\r\n            {'code' : 'TND', 'name' : 'Tunisia Dinar'},\r\n            {'code' : 'TOP', 'name' : 'Tonga Pa\\'anga'},\r\n            {'code' : 'TRY', 'name' : 'Turkey Lira'},\r\n            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},\r\n            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},\r\n            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},\r\n            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},\r\n            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},\r\n            {'code' : 'UGX', 'name' : 'Uganda Shilling'},\r\n            {'code' : 'USD', 'name' : 'United States Dollar'},\r\n            {'code' : 'UYU', 'name' : 'Uruguay Peso'},\r\n            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},\r\n            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},\r\n            {'code' : 'VND', 'name' : 'Viet Nam Dong'},\r\n            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},\r\n            {'code' : 'WST', 'name' : 'Samoa Tala'},\r\n            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},\r\n            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},\r\n            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},\r\n            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},\r\n            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},\r\n            {'code' : 'YER', 'name' : 'Yemen Rial'},\r\n            {'code' : 'ZAR', 'name' : 'South Africa Rand'},\r\n            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},\r\n            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}\r\n        ],\r\n\r\n        // return the names of all valide colors\r\n        colorNames : [  \"AliceBlue\", \"Black\", \"Navy\", \"DarkBlue\", \"MediumBlue\", \"Blue\", \"DarkGreen\", \"Green\", \"Teal\", \"DarkCyan\", \"DeepSkyBlue\", \"DarkTurquoise\", \"MediumSpringGreen\", \"Lime\", \"SpringGreen\",\r\n            \"Aqua\", \"Cyan\", \"MidnightBlue\", \"DodgerBlue\", \"LightSeaGreen\", \"ForestGreen\", \"SeaGreen\", \"DarkSlateGray\", \"LimeGreen\", \"MediumSeaGreen\", \"Turquoise\", \"RoyalBlue\", \"SteelBlue\", \"DarkSlateBlue\", \"MediumTurquoise\",\r\n            \"Indigo\", \"DarkOliveGreen\", \"CadetBlue\", \"CornflowerBlue\", \"RebeccaPurple\", \"MediumAquaMarine\", \"DimGray\", \"SlateBlue\", \"OliveDrab\", \"SlateGray\", \"LightSlateGray\", \"MediumSlateBlue\", \"LawnGreen\", \"Chartreuse\",\r\n            \"Aquamarine\", \"Maroon\", \"Purple\", \"Olive\", \"Gray\", \"SkyBlue\", \"LightSkyBlue\", \"BlueViolet\", \"DarkRed\", \"DarkMagenta\", \"SaddleBrown\", \"Ivory\", \"White\",\r\n            \"DarkSeaGreen\", \"LightGreen\", \"MediumPurple\", \"DarkViolet\", \"PaleGreen\", \"DarkOrchid\", \"YellowGreen\", \"Sienna\", \"Brown\", \"DarkGray\", \"LightBlue\", \"GreenYellow\", \"PaleTurquoise\", \"LightSteelBlue\", \"PowderBlue\",\r\n            \"FireBrick\", \"DarkGoldenRod\", \"MediumOrchid\", \"RosyBrown\", \"DarkKhaki\", \"Silver\", \"MediumVioletRed\", \"IndianRed\", \"Peru\", \"Chocolate\", \"Tan\", \"LightGray\", \"Thistle\", \"Orchid\", \"GoldenRod\", \"PaleVioletRed\",\r\n            \"Crimson\", \"Gainsboro\", \"Plum\", \"BurlyWood\", \"LightCyan\", \"Lavender\", \"DarkSalmon\", \"Violet\", \"PaleGoldenRod\", \"LightCoral\", \"Khaki\", \"AliceBlue\", \"HoneyDew\", \"Azure\", \"SandyBrown\", \"Wheat\", \"Beige\", \"WhiteSmoke\",\r\n            \"MintCream\", \"GhostWhite\", \"Salmon\", \"AntiqueWhite\", \"Linen\", \"LightGoldenRodYellow\", \"OldLace\", \"Red\", \"Fuchsia\", \"Magenta\", \"DeepPink\", \"OrangeRed\", \"Tomato\", \"HotPink\", \"Coral\", \"DarkOrange\", \"LightSalmon\", \"Orange\",\r\n            \"LightPink\", \"Pink\", \"Gold\", \"PeachPuff\", \"NavajoWhite\", \"Moccasin\", \"Bisque\", \"MistyRose\", \"BlanchedAlmond\", \"PapayaWhip\", \"LavenderBlush\", \"SeaShell\", \"Cornsilk\", \"LemonChiffon\", \"FloralWhite\", \"Snow\", \"Yellow\", \"LightYellow\"\r\n        ],\r\n\r\n        fileExtension : {\r\n            \"raster\"    : [\"bmp\", \"gif\", \"gpl\", \"ico\", \"jpeg\", \"psd\", \"png\", \"psp\", \"raw\", \"tiff\"],\r\n            \"vector\"    : [\"3dv\", \"amf\", \"awg\", \"ai\", \"cgm\", \"cdr\", \"cmx\", \"dxf\", \"e2d\", \"egt\", \"eps\", \"fs\", \"odg\", \"svg\", \"xar\"],\r\n            \"3d\"        : [\"3dmf\", \"3dm\", \"3mf\", \"3ds\", \"an8\", \"aoi\", \"blend\", \"cal3d\", \"cob\", \"ctm\", \"iob\", \"jas\", \"max\", \"mb\", \"mdx\", \"obj\", \"x\", \"x3d\"],\r\n            \"document\"  : [\"doc\", \"docx\", \"dot\", \"html\", \"xml\", \"odt\", \"odm\", \"ott\", \"csv\", \"rtf\", \"tex\", \"xhtml\", \"xps\"]\r\n        },\r\n\r\n        // Data taken from https://github.com/dmfilipenko/timezones.json/blob/master/timezones.json\r\n        timezones: [\r\n                  {\r\n                    \"name\": \"Dateline Standard Time\",\r\n                    \"abbr\": \"DST\",\r\n                    \"offset\": -12,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-12:00) International Date Line West\",\r\n                    \"utc\": [\r\n                      \"Etc/GMT+12\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"UTC-11\",\r\n                    \"abbr\": \"U\",\r\n                    \"offset\": -11,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-11:00) Coordinated Universal Time-11\",\r\n                    \"utc\": [\r\n                      \"Etc/GMT+11\",\r\n                      \"Pacific/Midway\",\r\n                      \"Pacific/Niue\",\r\n                      \"Pacific/Pago_Pago\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Hawaiian Standard Time\",\r\n                    \"abbr\": \"HST\",\r\n                    \"offset\": -10,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-10:00) Hawaii\",\r\n                    \"utc\": [\r\n                      \"Etc/GMT+10\",\r\n                      \"Pacific/Honolulu\",\r\n                      \"Pacific/Johnston\",\r\n                      \"Pacific/Rarotonga\",\r\n                      \"Pacific/Tahiti\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Alaskan Standard Time\",\r\n                    \"abbr\": \"AKDT\",\r\n                    \"offset\": -8,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-09:00) Alaska\",\r\n                    \"utc\": [\r\n                      \"America/Anchorage\",\r\n                      \"America/Juneau\",\r\n                      \"America/Nome\",\r\n                      \"America/Sitka\",\r\n                      \"America/Yakutat\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Pacific Standard Time (Mexico)\",\r\n                    \"abbr\": \"PDT\",\r\n                    \"offset\": -7,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-08:00) Baja California\",\r\n                    \"utc\": [\r\n                      \"America/Santa_Isabel\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Pacific Standard Time\",\r\n                    \"abbr\": \"PDT\",\r\n                    \"offset\": -7,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-08:00) Pacific Time (US & Canada)\",\r\n                    \"utc\": [\r\n                      \"America/Dawson\",\r\n                      \"America/Los_Angeles\",\r\n                      \"America/Tijuana\",\r\n                      \"America/Vancouver\",\r\n                      \"America/Whitehorse\",\r\n                      \"PST8PDT\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"US Mountain Standard Time\",\r\n                    \"abbr\": \"UMST\",\r\n                    \"offset\": -7,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-07:00) Arizona\",\r\n                    \"utc\": [\r\n                      \"America/Creston\",\r\n                      \"America/Dawson_Creek\",\r\n                      \"America/Hermosillo\",\r\n                      \"America/Phoenix\",\r\n                      \"Etc/GMT+7\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Mountain Standard Time (Mexico)\",\r\n                    \"abbr\": \"MDT\",\r\n                    \"offset\": -6,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-07:00) Chihuahua, La Paz, Mazatlan\",\r\n                    \"utc\": [\r\n                      \"America/Chihuahua\",\r\n                      \"America/Mazatlan\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Mountain Standard Time\",\r\n                    \"abbr\": \"MDT\",\r\n                    \"offset\": -6,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-07:00) Mountain Time (US & Canada)\",\r\n                    \"utc\": [\r\n                      \"America/Boise\",\r\n                      \"America/Cambridge_Bay\",\r\n                      \"America/Denver\",\r\n                      \"America/Edmonton\",\r\n                      \"America/Inuvik\",\r\n                      \"America/Ojinaga\",\r\n                      \"America/Yellowknife\",\r\n                      \"MST7MDT\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central America Standard Time\",\r\n                    \"abbr\": \"CAST\",\r\n                    \"offset\": -6,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-06:00) Central America\",\r\n                    \"utc\": [\r\n                      \"America/Belize\",\r\n                      \"America/Costa_Rica\",\r\n                      \"America/El_Salvador\",\r\n                      \"America/Guatemala\",\r\n                      \"America/Managua\",\r\n                      \"America/Tegucigalpa\",\r\n                      \"Etc/GMT+6\",\r\n                      \"Pacific/Galapagos\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central Standard Time\",\r\n                    \"abbr\": \"CDT\",\r\n                    \"offset\": -5,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-06:00) Central Time (US & Canada)\",\r\n                    \"utc\": [\r\n                      \"America/Chicago\",\r\n                      \"America/Indiana/Knox\",\r\n                      \"America/Indiana/Tell_City\",\r\n                      \"America/Matamoros\",\r\n                      \"America/Menominee\",\r\n                      \"America/North_Dakota/Beulah\",\r\n                      \"America/North_Dakota/Center\",\r\n                      \"America/North_Dakota/New_Salem\",\r\n                      \"America/Rainy_River\",\r\n                      \"America/Rankin_Inlet\",\r\n                      \"America/Resolute\",\r\n                      \"America/Winnipeg\",\r\n                      \"CST6CDT\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central Standard Time (Mexico)\",\r\n                    \"abbr\": \"CDT\",\r\n                    \"offset\": -5,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-06:00) Guadalajara, Mexico City, Monterrey\",\r\n                    \"utc\": [\r\n                      \"America/Bahia_Banderas\",\r\n                      \"America/Cancun\",\r\n                      \"America/Merida\",\r\n                      \"America/Mexico_City\",\r\n                      \"America/Monterrey\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Canada Central Standard Time\",\r\n                    \"abbr\": \"CCST\",\r\n                    \"offset\": -6,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-06:00) Saskatchewan\",\r\n                    \"utc\": [\r\n                      \"America/Regina\",\r\n                      \"America/Swift_Current\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"SA Pacific Standard Time\",\r\n                    \"abbr\": \"SPST\",\r\n                    \"offset\": -5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-05:00) Bogota, Lima, Quito\",\r\n                    \"utc\": [\r\n                      \"America/Bogota\",\r\n                      \"America/Cayman\",\r\n                      \"America/Coral_Harbour\",\r\n                      \"America/Eirunepe\",\r\n                      \"America/Guayaquil\",\r\n                      \"America/Jamaica\",\r\n                      \"America/Lima\",\r\n                      \"America/Panama\",\r\n                      \"America/Rio_Branco\",\r\n                      \"Etc/GMT+5\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Eastern Standard Time\",\r\n                    \"abbr\": \"EDT\",\r\n                    \"offset\": -4,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-05:00) Eastern Time (US & Canada)\",\r\n                    \"utc\": [\r\n                      \"America/Detroit\",\r\n                      \"America/Havana\",\r\n                      \"America/Indiana/Petersburg\",\r\n                      \"America/Indiana/Vincennes\",\r\n                      \"America/Indiana/Winamac\",\r\n                      \"America/Iqaluit\",\r\n                      \"America/Kentucky/Monticello\",\r\n                      \"America/Louisville\",\r\n                      \"America/Montreal\",\r\n                      \"America/Nassau\",\r\n                      \"America/New_York\",\r\n                      \"America/Nipigon\",\r\n                      \"America/Pangnirtung\",\r\n                      \"America/Port-au-Prince\",\r\n                      \"America/Thunder_Bay\",\r\n                      \"America/Toronto\",\r\n                      \"EST5EDT\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"US Eastern Standard Time\",\r\n                    \"abbr\": \"UEDT\",\r\n                    \"offset\": -4,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-05:00) Indiana (East)\",\r\n                    \"utc\": [\r\n                      \"America/Indiana/Marengo\",\r\n                      \"America/Indiana/Vevay\",\r\n                      \"America/Indianapolis\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Venezuela Standard Time\",\r\n                    \"abbr\": \"VST\",\r\n                    \"offset\": -4.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-04:30) Caracas\",\r\n                    \"utc\": [\r\n                      \"America/Caracas\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Paraguay Standard Time\",\r\n                    \"abbr\": \"PST\",\r\n                    \"offset\": -4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-04:00) Asuncion\",\r\n                    \"utc\": [\r\n                      \"America/Asuncion\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Atlantic Standard Time\",\r\n                    \"abbr\": \"ADT\",\r\n                    \"offset\": -3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-04:00) Atlantic Time (Canada)\",\r\n                    \"utc\": [\r\n                      \"America/Glace_Bay\",\r\n                      \"America/Goose_Bay\",\r\n                      \"America/Halifax\",\r\n                      \"America/Moncton\",\r\n                      \"America/Thule\",\r\n                      \"Atlantic/Bermuda\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central Brazilian Standard Time\",\r\n                    \"abbr\": \"CBST\",\r\n                    \"offset\": -4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-04:00) Cuiaba\",\r\n                    \"utc\": [\r\n                      \"America/Campo_Grande\",\r\n                      \"America/Cuiaba\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"SA Western Standard Time\",\r\n                    \"abbr\": \"SWST\",\r\n                    \"offset\": -4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-04:00) Georgetown, La Paz, Manaus, San Juan\",\r\n                    \"utc\": [\r\n                      \"America/Anguilla\",\r\n                      \"America/Antigua\",\r\n                      \"America/Aruba\",\r\n                      \"America/Barbados\",\r\n                      \"America/Blanc-Sablon\",\r\n                      \"America/Boa_Vista\",\r\n                      \"America/Curacao\",\r\n                      \"America/Dominica\",\r\n                      \"America/Grand_Turk\",\r\n                      \"America/Grenada\",\r\n                      \"America/Guadeloupe\",\r\n                      \"America/Guyana\",\r\n                      \"America/Kralendijk\",\r\n                      \"America/La_Paz\",\r\n                      \"America/Lower_Princes\",\r\n                      \"America/Manaus\",\r\n                      \"America/Marigot\",\r\n                      \"America/Martinique\",\r\n                      \"America/Montserrat\",\r\n                      \"America/Port_of_Spain\",\r\n                      \"America/Porto_Velho\",\r\n                      \"America/Puerto_Rico\",\r\n                      \"America/Santo_Domingo\",\r\n                      \"America/St_Barthelemy\",\r\n                      \"America/St_Kitts\",\r\n                      \"America/St_Lucia\",\r\n                      \"America/St_Thomas\",\r\n                      \"America/St_Vincent\",\r\n                      \"America/Tortola\",\r\n                      \"Etc/GMT+4\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Pacific SA Standard Time\",\r\n                    \"abbr\": \"PSST\",\r\n                    \"offset\": -4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-04:00) Santiago\",\r\n                    \"utc\": [\r\n                      \"America/Santiago\",\r\n                      \"Antarctica/Palmer\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Newfoundland Standard Time\",\r\n                    \"abbr\": \"NDT\",\r\n                    \"offset\": -2.5,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-03:30) Newfoundland\",\r\n                    \"utc\": [\r\n                      \"America/St_Johns\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"E. South America Standard Time\",\r\n                    \"abbr\": \"ESAST\",\r\n                    \"offset\": -3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-03:00) Brasilia\",\r\n                    \"utc\": [\r\n                      \"America/Sao_Paulo\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Argentina Standard Time\",\r\n                    \"abbr\": \"AST\",\r\n                    \"offset\": -3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-03:00) Buenos Aires\",\r\n                    \"utc\": [\r\n                      \"America/Argentina/La_Rioja\",\r\n                      \"America/Argentina/Rio_Gallegos\",\r\n                      \"America/Argentina/Salta\",\r\n                      \"America/Argentina/San_Juan\",\r\n                      \"America/Argentina/San_Luis\",\r\n                      \"America/Argentina/Tucuman\",\r\n                      \"America/Argentina/Ushuaia\",\r\n                      \"America/Buenos_Aires\",\r\n                      \"America/Catamarca\",\r\n                      \"America/Cordoba\",\r\n                      \"America/Jujuy\",\r\n                      \"America/Mendoza\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"SA Eastern Standard Time\",\r\n                    \"abbr\": \"SEST\",\r\n                    \"offset\": -3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-03:00) Cayenne, Fortaleza\",\r\n                    \"utc\": [\r\n                      \"America/Araguaina\",\r\n                      \"America/Belem\",\r\n                      \"America/Cayenne\",\r\n                      \"America/Fortaleza\",\r\n                      \"America/Maceio\",\r\n                      \"America/Paramaribo\",\r\n                      \"America/Recife\",\r\n                      \"America/Santarem\",\r\n                      \"Antarctica/Rothera\",\r\n                      \"Atlantic/Stanley\",\r\n                      \"Etc/GMT+3\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Greenland Standard Time\",\r\n                    \"abbr\": \"GDT\",\r\n                    \"offset\": -2,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-03:00) Greenland\",\r\n                    \"utc\": [\r\n                      \"America/Godthab\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Montevideo Standard Time\",\r\n                    \"abbr\": \"MST\",\r\n                    \"offset\": -3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-03:00) Montevideo\",\r\n                    \"utc\": [\r\n                      \"America/Montevideo\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Bahia Standard Time\",\r\n                    \"abbr\": \"BST\",\r\n                    \"offset\": -3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-03:00) Salvador\",\r\n                    \"utc\": [\r\n                      \"America/Bahia\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"UTC-02\",\r\n                    \"abbr\": \"U\",\r\n                    \"offset\": -2,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-02:00) Coordinated Universal Time-02\",\r\n                    \"utc\": [\r\n                      \"America/Noronha\",\r\n                      \"Atlantic/South_Georgia\",\r\n                      \"Etc/GMT+2\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Mid-Atlantic Standard Time\",\r\n                    \"abbr\": \"MDT\",\r\n                    \"offset\": -1,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-02:00) Mid-Atlantic - Old\"\r\n                  },\r\n                  {\r\n                    \"name\": \"Azores Standard Time\",\r\n                    \"abbr\": \"ADT\",\r\n                    \"offset\": 0,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC-01:00) Azores\",\r\n                    \"utc\": [\r\n                      \"America/Scoresbysund\",\r\n                      \"Atlantic/Azores\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Cape Verde Standard Time\",\r\n                    \"abbr\": \"CVST\",\r\n                    \"offset\": -1,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC-01:00) Cape Verde Is.\",\r\n                    \"utc\": [\r\n                      \"Atlantic/Cape_Verde\",\r\n                      \"Etc/GMT+1\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Morocco Standard Time\",\r\n                    \"abbr\": \"MDT\",\r\n                    \"offset\": 1,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC) Casablanca\",\r\n                    \"utc\": [\r\n                      \"Africa/Casablanca\",\r\n                      \"Africa/El_Aaiun\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"UTC\",\r\n                    \"abbr\": \"CUT\",\r\n                    \"offset\": 0,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC) Coordinated Universal Time\",\r\n                    \"utc\": [\r\n                      \"America/Danmarkshavn\",\r\n                      \"Etc/GMT\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"GMT Standard Time\",\r\n                    \"abbr\": \"GDT\",\r\n                    \"offset\": 1,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC) Dublin, Edinburgh, Lisbon, London\",\r\n                    \"utc\": [\r\n                      \"Atlantic/Canary\",\r\n                      \"Atlantic/Faeroe\",\r\n                      \"Atlantic/Madeira\",\r\n                      \"Europe/Dublin\",\r\n                      \"Europe/Guernsey\",\r\n                      \"Europe/Isle_of_Man\",\r\n                      \"Europe/Jersey\",\r\n                      \"Europe/Lisbon\",\r\n                      \"Europe/London\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Greenwich Standard Time\",\r\n                    \"abbr\": \"GST\",\r\n                    \"offset\": 0,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC) Monrovia, Reykjavik\",\r\n                    \"utc\": [\r\n                      \"Africa/Abidjan\",\r\n                      \"Africa/Accra\",\r\n                      \"Africa/Bamako\",\r\n                      \"Africa/Banjul\",\r\n                      \"Africa/Bissau\",\r\n                      \"Africa/Conakry\",\r\n                      \"Africa/Dakar\",\r\n                      \"Africa/Freetown\",\r\n                      \"Africa/Lome\",\r\n                      \"Africa/Monrovia\",\r\n                      \"Africa/Nouakchott\",\r\n                      \"Africa/Ouagadougou\",\r\n                      \"Africa/Sao_Tome\",\r\n                      \"Atlantic/Reykjavik\",\r\n                      \"Atlantic/St_Helena\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"W. Europe Standard Time\",\r\n                    \"abbr\": \"WEDT\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna\",\r\n                    \"utc\": [\r\n                      \"Arctic/Longyearbyen\",\r\n                      \"Europe/Amsterdam\",\r\n                      \"Europe/Andorra\",\r\n                      \"Europe/Berlin\",\r\n                      \"Europe/Busingen\",\r\n                      \"Europe/Gibraltar\",\r\n                      \"Europe/Luxembourg\",\r\n                      \"Europe/Malta\",\r\n                      \"Europe/Monaco\",\r\n                      \"Europe/Oslo\",\r\n                      \"Europe/Rome\",\r\n                      \"Europe/San_Marino\",\r\n                      \"Europe/Stockholm\",\r\n                      \"Europe/Vaduz\",\r\n                      \"Europe/Vatican\",\r\n                      \"Europe/Vienna\",\r\n                      \"Europe/Zurich\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central Europe Standard Time\",\r\n                    \"abbr\": \"CEDT\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague\",\r\n                    \"utc\": [\r\n                      \"Europe/Belgrade\",\r\n                      \"Europe/Bratislava\",\r\n                      \"Europe/Budapest\",\r\n                      \"Europe/Ljubljana\",\r\n                      \"Europe/Podgorica\",\r\n                      \"Europe/Prague\",\r\n                      \"Europe/Tirane\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Romance Standard Time\",\r\n                    \"abbr\": \"RDT\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris\",\r\n                    \"utc\": [\r\n                      \"Africa/Ceuta\",\r\n                      \"Europe/Brussels\",\r\n                      \"Europe/Copenhagen\",\r\n                      \"Europe/Madrid\",\r\n                      \"Europe/Paris\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central European Standard Time\",\r\n                    \"abbr\": \"CEDT\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb\",\r\n                    \"utc\": [\r\n                      \"Europe/Sarajevo\",\r\n                      \"Europe/Skopje\",\r\n                      \"Europe/Warsaw\",\r\n                      \"Europe/Zagreb\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"W. Central Africa Standard Time\",\r\n                    \"abbr\": \"WCAST\",\r\n                    \"offset\": 1,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+01:00) West Central Africa\",\r\n                    \"utc\": [\r\n                      \"Africa/Algiers\",\r\n                      \"Africa/Bangui\",\r\n                      \"Africa/Brazzaville\",\r\n                      \"Africa/Douala\",\r\n                      \"Africa/Kinshasa\",\r\n                      \"Africa/Lagos\",\r\n                      \"Africa/Libreville\",\r\n                      \"Africa/Luanda\",\r\n                      \"Africa/Malabo\",\r\n                      \"Africa/Ndjamena\",\r\n                      \"Africa/Niamey\",\r\n                      \"Africa/Porto-Novo\",\r\n                      \"Africa/Tunis\",\r\n                      \"Etc/GMT-1\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Namibia Standard Time\",\r\n                    \"abbr\": \"NST\",\r\n                    \"offset\": 1,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+01:00) Windhoek\",\r\n                    \"utc\": [\r\n                      \"Africa/Windhoek\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"GTB Standard Time\",\r\n                    \"abbr\": \"GDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) Athens, Bucharest\",\r\n                    \"utc\": [\r\n                      \"Asia/Nicosia\",\r\n                      \"Europe/Athens\",\r\n                      \"Europe/Bucharest\",\r\n                      \"Europe/Chisinau\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Middle East Standard Time\",\r\n                    \"abbr\": \"MEDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) Beirut\",\r\n                    \"utc\": [\r\n                      \"Asia/Beirut\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Egypt Standard Time\",\r\n                    \"abbr\": \"EST\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+02:00) Cairo\",\r\n                    \"utc\": [\r\n                      \"Africa/Cairo\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Syria Standard Time\",\r\n                    \"abbr\": \"SDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) Damascus\",\r\n                    \"utc\": [\r\n                      \"Asia/Damascus\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"E. Europe Standard Time\",\r\n                    \"abbr\": \"EEDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) E. Europe\"\r\n                  },\r\n                  {\r\n                    \"name\": \"South Africa Standard Time\",\r\n                    \"abbr\": \"SAST\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+02:00) Harare, Pretoria\",\r\n                    \"utc\": [\r\n                      \"Africa/Blantyre\",\r\n                      \"Africa/Bujumbura\",\r\n                      \"Africa/Gaborone\",\r\n                      \"Africa/Harare\",\r\n                      \"Africa/Johannesburg\",\r\n                      \"Africa/Kigali\",\r\n                      \"Africa/Lubumbashi\",\r\n                      \"Africa/Lusaka\",\r\n                      \"Africa/Maputo\",\r\n                      \"Africa/Maseru\",\r\n                      \"Africa/Mbabane\",\r\n                      \"Etc/GMT-2\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"FLE Standard Time\",\r\n                    \"abbr\": \"FDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius\",\r\n                    \"utc\": [\r\n                      \"Europe/Helsinki\",\r\n                      \"Europe/Kiev\",\r\n                      \"Europe/Mariehamn\",\r\n                      \"Europe/Riga\",\r\n                      \"Europe/Sofia\",\r\n                      \"Europe/Tallinn\",\r\n                      \"Europe/Uzhgorod\",\r\n                      \"Europe/Vilnius\",\r\n                      \"Europe/Zaporozhye\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Turkey Standard Time\",\r\n                    \"abbr\": \"TDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) Istanbul\",\r\n                    \"utc\": [\r\n                      \"Europe/Istanbul\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Israel Standard Time\",\r\n                    \"abbr\": \"JDT\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+02:00) Jerusalem\",\r\n                    \"utc\": [\r\n                      \"Asia/Jerusalem\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Libya Standard Time\",\r\n                    \"abbr\": \"LST\",\r\n                    \"offset\": 2,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+02:00) Tripoli\",\r\n                    \"utc\": [\r\n                      \"Africa/Tripoli\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Jordan Standard Time\",\r\n                    \"abbr\": \"JST\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+03:00) Amman\",\r\n                    \"utc\": [\r\n                      \"Asia/Amman\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Arabic Standard Time\",\r\n                    \"abbr\": \"AST\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+03:00) Baghdad\",\r\n                    \"utc\": [\r\n                      \"Asia/Baghdad\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Kaliningrad Standard Time\",\r\n                    \"abbr\": \"KST\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+03:00) Kaliningrad, Minsk\",\r\n                    \"utc\": [\r\n                      \"Europe/Kaliningrad\",\r\n                      \"Europe/Minsk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Arab Standard Time\",\r\n                    \"abbr\": \"AST\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+03:00) Kuwait, Riyadh\",\r\n                    \"utc\": [\r\n                      \"Asia/Aden\",\r\n                      \"Asia/Bahrain\",\r\n                      \"Asia/Kuwait\",\r\n                      \"Asia/Qatar\",\r\n                      \"Asia/Riyadh\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"E. Africa Standard Time\",\r\n                    \"abbr\": \"EAST\",\r\n                    \"offset\": 3,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+03:00) Nairobi\",\r\n                    \"utc\": [\r\n                      \"Africa/Addis_Ababa\",\r\n                      \"Africa/Asmera\",\r\n                      \"Africa/Dar_es_Salaam\",\r\n                      \"Africa/Djibouti\",\r\n                      \"Africa/Juba\",\r\n                      \"Africa/Kampala\",\r\n                      \"Africa/Khartoum\",\r\n                      \"Africa/Mogadishu\",\r\n                      \"Africa/Nairobi\",\r\n                      \"Antarctica/Syowa\",\r\n                      \"Etc/GMT-3\",\r\n                      \"Indian/Antananarivo\",\r\n                      \"Indian/Comoro\",\r\n                      \"Indian/Mayotte\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Iran Standard Time\",\r\n                    \"abbr\": \"IDT\",\r\n                    \"offset\": 4.5,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+03:30) Tehran\",\r\n                    \"utc\": [\r\n                      \"Asia/Tehran\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Arabian Standard Time\",\r\n                    \"abbr\": \"AST\",\r\n                    \"offset\": 4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+04:00) Abu Dhabi, Muscat\",\r\n                    \"utc\": [\r\n                      \"Asia/Dubai\",\r\n                      \"Asia/Muscat\",\r\n                      \"Etc/GMT-4\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Azerbaijan Standard Time\",\r\n                    \"abbr\": \"ADT\",\r\n                    \"offset\": 5,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+04:00) Baku\",\r\n                    \"utc\": [\r\n                      \"Asia/Baku\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Russian Standard Time\",\r\n                    \"abbr\": \"RST\",\r\n                    \"offset\": 4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+04:00) Moscow, St. Petersburg, Volgograd\",\r\n                    \"utc\": [\r\n                      \"Europe/Moscow\",\r\n                      \"Europe/Samara\",\r\n                      \"Europe/Simferopol\",\r\n                      \"Europe/Volgograd\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Mauritius Standard Time\",\r\n                    \"abbr\": \"MST\",\r\n                    \"offset\": 4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+04:00) Port Louis\",\r\n                    \"utc\": [\r\n                      \"Indian/Mahe\",\r\n                      \"Indian/Mauritius\",\r\n                      \"Indian/Reunion\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Georgian Standard Time\",\r\n                    \"abbr\": \"GST\",\r\n                    \"offset\": 4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+04:00) Tbilisi\",\r\n                    \"utc\": [\r\n                      \"Asia/Tbilisi\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Caucasus Standard Time\",\r\n                    \"abbr\": \"CST\",\r\n                    \"offset\": 4,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+04:00) Yerevan\",\r\n                    \"utc\": [\r\n                      \"Asia/Yerevan\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Afghanistan Standard Time\",\r\n                    \"abbr\": \"AST\",\r\n                    \"offset\": 4.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+04:30) Kabul\",\r\n                    \"utc\": [\r\n                      \"Asia/Kabul\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"West Asia Standard Time\",\r\n                    \"abbr\": \"WAST\",\r\n                    \"offset\": 5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+05:00) Ashgabat, Tashkent\",\r\n                    \"utc\": [\r\n                      \"Antarctica/Mawson\",\r\n                      \"Asia/Aqtau\",\r\n                      \"Asia/Aqtobe\",\r\n                      \"Asia/Ashgabat\",\r\n                      \"Asia/Dushanbe\",\r\n                      \"Asia/Oral\",\r\n                      \"Asia/Samarkand\",\r\n                      \"Asia/Tashkent\",\r\n                      \"Etc/GMT-5\",\r\n                      \"Indian/Kerguelen\",\r\n                      \"Indian/Maldives\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Pakistan Standard Time\",\r\n                    \"abbr\": \"PST\",\r\n                    \"offset\": 5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+05:00) Islamabad, Karachi\",\r\n                    \"utc\": [\r\n                      \"Asia/Karachi\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"India Standard Time\",\r\n                    \"abbr\": \"IST\",\r\n                    \"offset\": 5.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi\",\r\n                    \"utc\": [\r\n                      \"Asia/Calcutta\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Sri Lanka Standard Time\",\r\n                    \"abbr\": \"SLST\",\r\n                    \"offset\": 5.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+05:30) Sri Jayawardenepura\",\r\n                    \"utc\": [\r\n                      \"Asia/Colombo\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Nepal Standard Time\",\r\n                    \"abbr\": \"NST\",\r\n                    \"offset\": 5.75,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+05:45) Kathmandu\",\r\n                    \"utc\": [\r\n                      \"Asia/Katmandu\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central Asia Standard Time\",\r\n                    \"abbr\": \"CAST\",\r\n                    \"offset\": 6,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+06:00) Astana\",\r\n                    \"utc\": [\r\n                      \"Antarctica/Vostok\",\r\n                      \"Asia/Almaty\",\r\n                      \"Asia/Bishkek\",\r\n                      \"Asia/Qyzylorda\",\r\n                      \"Asia/Urumqi\",\r\n                      \"Etc/GMT-6\",\r\n                      \"Indian/Chagos\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Bangladesh Standard Time\",\r\n                    \"abbr\": \"BST\",\r\n                    \"offset\": 6,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+06:00) Dhaka\",\r\n                    \"utc\": [\r\n                      \"Asia/Dhaka\",\r\n                      \"Asia/Thimphu\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Ekaterinburg Standard Time\",\r\n                    \"abbr\": \"EST\",\r\n                    \"offset\": 6,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+06:00) Ekaterinburg\",\r\n                    \"utc\": [\r\n                      \"Asia/Yekaterinburg\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Myanmar Standard Time\",\r\n                    \"abbr\": \"MST\",\r\n                    \"offset\": 6.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+06:30) Yangon (Rangoon)\",\r\n                    \"utc\": [\r\n                      \"Asia/Rangoon\",\r\n                      \"Indian/Cocos\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"SE Asia Standard Time\",\r\n                    \"abbr\": \"SAST\",\r\n                    \"offset\": 7,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+07:00) Bangkok, Hanoi, Jakarta\",\r\n                    \"utc\": [\r\n                      \"Antarctica/Davis\",\r\n                      \"Asia/Bangkok\",\r\n                      \"Asia/Hovd\",\r\n                      \"Asia/Jakarta\",\r\n                      \"Asia/Phnom_Penh\",\r\n                      \"Asia/Pontianak\",\r\n                      \"Asia/Saigon\",\r\n                      \"Asia/Vientiane\",\r\n                      \"Etc/GMT-7\",\r\n                      \"Indian/Christmas\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"N. Central Asia Standard Time\",\r\n                    \"abbr\": \"NCAST\",\r\n                    \"offset\": 7,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+07:00) Novosibirsk\",\r\n                    \"utc\": [\r\n                      \"Asia/Novokuznetsk\",\r\n                      \"Asia/Novosibirsk\",\r\n                      \"Asia/Omsk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"China Standard Time\",\r\n                    \"abbr\": \"CST\",\r\n                    \"offset\": 8,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi\",\r\n                    \"utc\": [\r\n                      \"Asia/Hong_Kong\",\r\n                      \"Asia/Macau\",\r\n                      \"Asia/Shanghai\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"North Asia Standard Time\",\r\n                    \"abbr\": \"NAST\",\r\n                    \"offset\": 8,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+08:00) Krasnoyarsk\",\r\n                    \"utc\": [\r\n                      \"Asia/Krasnoyarsk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Singapore Standard Time\",\r\n                    \"abbr\": \"MPST\",\r\n                    \"offset\": 8,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+08:00) Kuala Lumpur, Singapore\",\r\n                    \"utc\": [\r\n                      \"Asia/Brunei\",\r\n                      \"Asia/Kuala_Lumpur\",\r\n                      \"Asia/Kuching\",\r\n                      \"Asia/Makassar\",\r\n                      \"Asia/Manila\",\r\n                      \"Asia/Singapore\",\r\n                      \"Etc/GMT-8\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"W. Australia Standard Time\",\r\n                    \"abbr\": \"WAST\",\r\n                    \"offset\": 8,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+08:00) Perth\",\r\n                    \"utc\": [\r\n                      \"Antarctica/Casey\",\r\n                      \"Australia/Perth\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Taipei Standard Time\",\r\n                    \"abbr\": \"TST\",\r\n                    \"offset\": 8,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+08:00) Taipei\",\r\n                    \"utc\": [\r\n                      \"Asia/Taipei\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Ulaanbaatar Standard Time\",\r\n                    \"abbr\": \"UST\",\r\n                    \"offset\": 8,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+08:00) Ulaanbaatar\",\r\n                    \"utc\": [\r\n                      \"Asia/Choibalsan\",\r\n                      \"Asia/Ulaanbaatar\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"North Asia East Standard Time\",\r\n                    \"abbr\": \"NAEST\",\r\n                    \"offset\": 9,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+09:00) Irkutsk\",\r\n                    \"utc\": [\r\n                      \"Asia/Irkutsk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Tokyo Standard Time\",\r\n                    \"abbr\": \"TST\",\r\n                    \"offset\": 9,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+09:00) Osaka, Sapporo, Tokyo\",\r\n                    \"utc\": [\r\n                      \"Asia/Dili\",\r\n                      \"Asia/Jayapura\",\r\n                      \"Asia/Tokyo\",\r\n                      \"Etc/GMT-9\",\r\n                      \"Pacific/Palau\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Korea Standard Time\",\r\n                    \"abbr\": \"KST\",\r\n                    \"offset\": 9,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+09:00) Seoul\",\r\n                    \"utc\": [\r\n                      \"Asia/Pyongyang\",\r\n                      \"Asia/Seoul\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Cen. Australia Standard Time\",\r\n                    \"abbr\": \"CAST\",\r\n                    \"offset\": 9.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+09:30) Adelaide\",\r\n                    \"utc\": [\r\n                      \"Australia/Adelaide\",\r\n                      \"Australia/Broken_Hill\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"AUS Central Standard Time\",\r\n                    \"abbr\": \"ACST\",\r\n                    \"offset\": 9.5,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+09:30) Darwin\",\r\n                    \"utc\": [\r\n                      \"Australia/Darwin\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"E. Australia Standard Time\",\r\n                    \"abbr\": \"EAST\",\r\n                    \"offset\": 10,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+10:00) Brisbane\",\r\n                    \"utc\": [\r\n                      \"Australia/Brisbane\",\r\n                      \"Australia/Lindeman\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"AUS Eastern Standard Time\",\r\n                    \"abbr\": \"AEST\",\r\n                    \"offset\": 10,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+10:00) Canberra, Melbourne, Sydney\",\r\n                    \"utc\": [\r\n                      \"Australia/Melbourne\",\r\n                      \"Australia/Sydney\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"West Pacific Standard Time\",\r\n                    \"abbr\": \"WPST\",\r\n                    \"offset\": 10,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+10:00) Guam, Port Moresby\",\r\n                    \"utc\": [\r\n                      \"Antarctica/DumontDUrville\",\r\n                      \"Etc/GMT-10\",\r\n                      \"Pacific/Guam\",\r\n                      \"Pacific/Port_Moresby\",\r\n                      \"Pacific/Saipan\",\r\n                      \"Pacific/Truk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Tasmania Standard Time\",\r\n                    \"abbr\": \"TST\",\r\n                    \"offset\": 10,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+10:00) Hobart\",\r\n                    \"utc\": [\r\n                      \"Australia/Currie\",\r\n                      \"Australia/Hobart\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Yakutsk Standard Time\",\r\n                    \"abbr\": \"YST\",\r\n                    \"offset\": 10,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+10:00) Yakutsk\",\r\n                    \"utc\": [\r\n                      \"Asia/Chita\",\r\n                      \"Asia/Khandyga\",\r\n                      \"Asia/Yakutsk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Central Pacific Standard Time\",\r\n                    \"abbr\": \"CPST\",\r\n                    \"offset\": 11,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+11:00) Solomon Is., New Caledonia\",\r\n                    \"utc\": [\r\n                      \"Antarctica/Macquarie\",\r\n                      \"Etc/GMT-11\",\r\n                      \"Pacific/Efate\",\r\n                      \"Pacific/Guadalcanal\",\r\n                      \"Pacific/Kosrae\",\r\n                      \"Pacific/Noumea\",\r\n                      \"Pacific/Ponape\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Vladivostok Standard Time\",\r\n                    \"abbr\": \"VST\",\r\n                    \"offset\": 11,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+11:00) Vladivostok\",\r\n                    \"utc\": [\r\n                      \"Asia/Sakhalin\",\r\n                      \"Asia/Ust-Nera\",\r\n                      \"Asia/Vladivostok\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"New Zealand Standard Time\",\r\n                    \"abbr\": \"NZST\",\r\n                    \"offset\": 12,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+12:00) Auckland, Wellington\",\r\n                    \"utc\": [\r\n                      \"Antarctica/McMurdo\",\r\n                      \"Pacific/Auckland\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"UTC+12\",\r\n                    \"abbr\": \"U\",\r\n                    \"offset\": 12,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+12:00) Coordinated Universal Time+12\",\r\n                    \"utc\": [\r\n                      \"Etc/GMT-12\",\r\n                      \"Pacific/Funafuti\",\r\n                      \"Pacific/Kwajalein\",\r\n                      \"Pacific/Majuro\",\r\n                      \"Pacific/Nauru\",\r\n                      \"Pacific/Tarawa\",\r\n                      \"Pacific/Wake\",\r\n                      \"Pacific/Wallis\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Fiji Standard Time\",\r\n                    \"abbr\": \"FST\",\r\n                    \"offset\": 12,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+12:00) Fiji\",\r\n                    \"utc\": [\r\n                      \"Pacific/Fiji\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Magadan Standard Time\",\r\n                    \"abbr\": \"MST\",\r\n                    \"offset\": 12,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+12:00) Magadan\",\r\n                    \"utc\": [\r\n                      \"Asia/Anadyr\",\r\n                      \"Asia/Kamchatka\",\r\n                      \"Asia/Magadan\",\r\n                      \"Asia/Srednekolymsk\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Kamchatka Standard Time\",\r\n                    \"abbr\": \"KDT\",\r\n                    \"offset\": 13,\r\n                    \"isdst\": true,\r\n                    \"text\": \"(UTC+12:00) Petropavlovsk-Kamchatsky - Old\"\r\n                  },\r\n                  {\r\n                    \"name\": \"Tonga Standard Time\",\r\n                    \"abbr\": \"TST\",\r\n                    \"offset\": 13,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+13:00) Nuku'alofa\",\r\n                    \"utc\": [\r\n                      \"Etc/GMT-13\",\r\n                      \"Pacific/Enderbury\",\r\n                      \"Pacific/Fakaofo\",\r\n                      \"Pacific/Tongatapu\"\r\n                    ]\r\n                  },\r\n                  {\r\n                    \"name\": \"Samoa Standard Time\",\r\n                    \"abbr\": \"SST\",\r\n                    \"offset\": 13,\r\n                    \"isdst\": false,\r\n                    \"text\": \"(UTC+13:00) Samoa\",\r\n                    \"utc\": [\r\n                      \"Pacific/Apia\"\r\n                    ]\r\n                  }\r\n                ]\r\n    };\r\n\r\n    var o_hasOwnProperty = Object.prototype.hasOwnProperty;\r\n    var o_keys = (Object.keys || function(obj) {\r\n      var result = [];\r\n      for (var key in obj) {\r\n        if (o_hasOwnProperty.call(obj, key)) {\r\n          result.push(key);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    });\r\n\r\n    function _copyObject(source, target) {\r\n      var keys = o_keys(source);\r\n      var key;\r\n\r\n      for (var i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        target[key] = source[key] || target[key];\r\n      }\r\n    }\r\n\r\n    function _copyArray(source, target) {\r\n      for (var i = 0, l = source.length; i < l; i++) {\r\n        target[i] = source[i];\r\n      }\r\n    }\r\n\r\n    function copyObject(source, _target) {\r\n        var isArray = Array.isArray(source);\r\n        var target = _target || (isArray ? new Array(source.length) : {});\r\n\r\n        if (isArray) {\r\n          _copyArray(source, target);\r\n        } else {\r\n          _copyObject(source, target);\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /** Get the data based on key**/\r\n    Chance.prototype.get = function (name) {\r\n        return copyObject(data[name]);\r\n    };\r\n\r\n    // Mac Address\r\n    Chance.prototype.mac_address = function(options){\r\n        // typically mac addresses are separated by \":\"\r\n        // however they can also be separated by \"-\"\r\n        // the network variant uses a dot every fourth byte\r\n\r\n        options = initOptions(options);\r\n        if(!options.separator) {\r\n            options.separator =  options.networkVersion ? \".\" : \":\";\r\n        }\r\n\r\n        var mac_pool=\"ABCDEF1234567890\",\r\n            mac = \"\";\r\n        if(!options.networkVersion) {\r\n            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);\r\n        } else {\r\n            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);\r\n        }\r\n\r\n        return mac;\r\n    };\r\n\r\n    Chance.prototype.normal = function (options) {\r\n        options = initOptions(options, {mean : 0, dev : 1, pool : []});\r\n\r\n        testRange(\r\n            options.pool.constructor !== Array,\r\n            \"Chance: The pool option must be a valid array.\"\r\n        );\r\n\r\n        // If a pool has been passed, then we are returning an item from that pool,\r\n        // using the normal distribution settings that were passed in\r\n        if (options.pool.length > 0) {\r\n            return this.normal_pool(options);\r\n        }\r\n\r\n        // The Marsaglia Polar method\r\n        var s, u, v, norm,\r\n            mean = options.mean,\r\n            dev = options.dev;\r\n\r\n        do {\r\n            // U and V are from the uniform distribution on (-1, 1)\r\n            u = this.random() * 2 - 1;\r\n            v = this.random() * 2 - 1;\r\n\r\n            s = u * u + v * v;\r\n        } while (s >= 1);\r\n\r\n        // Compute the standard normal variate\r\n        norm = u * Math.sqrt(-2 * Math.log(s) / s);\r\n\r\n        // Shape and scale\r\n        return dev * norm + mean;\r\n    };\r\n\r\n    Chance.prototype.normal_pool = function(options) {\r\n        var performanceCounter = 0;\r\n        do {\r\n            var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));\r\n            if (idx < options.pool.length && idx >= 0) {\r\n                return options.pool[idx];\r\n            } else {\r\n                performanceCounter++;\r\n            }\r\n        } while(performanceCounter < 100);\r\n\r\n        throw new RangeError(\"Chance: Your pool is too small for the given mean and standard deviation. Please adjust.\");\r\n    };\r\n\r\n    Chance.prototype.radio = function (options) {\r\n        // Initial Letter (Typically Designated by Side of Mississippi River)\r\n        options = initOptions(options, {side : \"?\"});\r\n        var fl = \"\";\r\n        switch (options.side.toLowerCase()) {\r\n        case \"east\":\r\n        case \"e\":\r\n            fl = \"W\";\r\n            break;\r\n        case \"west\":\r\n        case \"w\":\r\n            fl = \"K\";\r\n            break;\r\n        default:\r\n            fl = this.character({pool: \"KW\"});\r\n            break;\r\n        }\r\n\r\n        return fl + this.character({alpha: true, casing: \"upper\"}) +\r\n                this.character({alpha: true, casing: \"upper\"}) +\r\n                this.character({alpha: true, casing: \"upper\"});\r\n    };\r\n\r\n    // Set the data as key and data or the data map\r\n    Chance.prototype.set = function (name, values) {\r\n        if (typeof name === \"string\") {\r\n            data[name] = values;\r\n        } else {\r\n            data = copyObject(name, data);\r\n        }\r\n    };\r\n\r\n    Chance.prototype.tv = function (options) {\r\n        return this.radio(options);\r\n    };\r\n\r\n    // ID number for Brazil companies\r\n    Chance.prototype.cnpj = function () {\r\n        var n = this.n(this.natural, 8, { max: 9 });\r\n        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\r\n        d1 = 11 - (d1 % 11);\r\n        if (d1>=10){\r\n            d1 = 0;\r\n        }\r\n        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\r\n        d2 = 11 - (d2 % 11);\r\n        if (d2>=10){\r\n            d2 = 0;\r\n        }\r\n        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;\r\n    };\r\n\r\n    // -- End Miscellaneous --\r\n\r\n    Chance.prototype.mersenne_twister = function (seed) {\r\n        return new MersenneTwister(seed);\r\n    };\r\n\r\n    Chance.prototype.blueimp_md5 = function () {\r\n        return new BlueImpMD5();\r\n    };\r\n\r\n    // Mersenne Twister from https://gist.github.com/banksean/300494\r\n    var MersenneTwister = function (seed) {\r\n        if (seed === undefined) {\r\n            // kept random number same size as time used previously to ensure no unexpected results downstream\r\n            seed = Math.floor(Math.random()*Math.pow(10,13));\r\n        }\r\n        /* Period parameters */\r\n        this.N = 624;\r\n        this.M = 397;\r\n        this.MATRIX_A = 0x9908b0df;   /* constant vector a */\r\n        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\r\n        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\r\n\r\n        this.mt = new Array(this.N); /* the array for the state vector */\r\n        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */\r\n\r\n        this.init_genrand(seed);\r\n    };\r\n\r\n    /* initializes mt[N] with a seed */\r\n    MersenneTwister.prototype.init_genrand = function (s) {\r\n        this.mt[0] = s >>> 0;\r\n        for (this.mti = 1; this.mti < this.N; this.mti++) {\r\n            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\r\n            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;\r\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\r\n            /* In the previous versions, MSBs of the seed affect   */\r\n            /* only MSBs of the array mt[].                        */\r\n            /* 2002/01/09 modified by Makoto Matsumoto             */\r\n            this.mt[this.mti] >>>= 0;\r\n            /* for >32 bit machines */\r\n        }\r\n    };\r\n\r\n    /* initialize by an array with array-length */\r\n    /* init_key is the array for initializing keys */\r\n    /* key_length is its length */\r\n    /* slight change for C++, 2004/2/26 */\r\n    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {\r\n        var i = 1, j = 0, k, s;\r\n        this.init_genrand(19650218);\r\n        k = (this.N > key_length ? this.N : key_length);\r\n        for (; k; k--) {\r\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\r\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */\r\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\r\n            i++;\r\n            j++;\r\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\r\n            if (j >= key_length) { j = 0; }\r\n        }\r\n        for (k = this.N - 1; k; k--) {\r\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\r\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */\r\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\r\n            i++;\r\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\r\n        }\r\n\r\n        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\r\n    };\r\n\r\n    /* generates a random number on [0,0xffffffff]-interval */\r\n    MersenneTwister.prototype.genrand_int32 = function () {\r\n        var y;\r\n        var mag01 = new Array(0x0, this.MATRIX_A);\r\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\r\n\r\n        if (this.mti >= this.N) { /* generate N words at one time */\r\n            var kk;\r\n\r\n            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */\r\n                this.init_genrand(5489); /* a default initial seed is used */\r\n            }\r\n            for (kk = 0; kk < this.N - this.M; kk++) {\r\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\r\n                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n            }\r\n            for (;kk < this.N - 1; kk++) {\r\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\r\n                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n            }\r\n            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\r\n            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n\r\n            this.mti = 0;\r\n        }\r\n\r\n        y = this.mt[this.mti++];\r\n\r\n        /* Tempering */\r\n        y ^= (y >>> 11);\r\n        y ^= (y << 7) & 0x9d2c5680;\r\n        y ^= (y << 15) & 0xefc60000;\r\n        y ^= (y >>> 18);\r\n\r\n        return y >>> 0;\r\n    };\r\n\r\n    /* generates a random number on [0,0x7fffffff]-interval */\r\n    MersenneTwister.prototype.genrand_int31 = function () {\r\n        return (this.genrand_int32() >>> 1);\r\n    };\r\n\r\n    /* generates a random number on [0,1]-real-interval */\r\n    MersenneTwister.prototype.genrand_real1 = function () {\r\n        return this.genrand_int32() * (1.0 / 4294967295.0);\r\n        /* divided by 2^32-1 */\r\n    };\r\n\r\n    /* generates a random number on [0,1)-real-interval */\r\n    MersenneTwister.prototype.random = function () {\r\n        return this.genrand_int32() * (1.0 / 4294967296.0);\r\n        /* divided by 2^32 */\r\n    };\r\n\r\n    /* generates a random number on (0,1)-real-interval */\r\n    MersenneTwister.prototype.genrand_real3 = function () {\r\n        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);\r\n        /* divided by 2^32 */\r\n    };\r\n\r\n    /* generates a random number on [0,1) with 53-bit resolution*/\r\n    MersenneTwister.prototype.genrand_res53 = function () {\r\n        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;\r\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\r\n    };\r\n\r\n    // BlueImp MD5 hashing algorithm from https://github.com/blueimp/JavaScript-MD5\r\n    var BlueImpMD5 = function () {};\r\n\r\n    BlueImpMD5.prototype.VERSION = '1.0.1';\r\n\r\n    /*\r\n    * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n    * to work around bugs in some JS interpreters.\r\n    */\r\n    BlueImpMD5.prototype.safe_add = function safe_add(x, y) {\r\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF),\r\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n        return (msw << 16) | (lsw & 0xFFFF);\r\n    };\r\n\r\n    /*\r\n    * Bitwise rotate a 32-bit number to the left.\r\n    */\r\n    BlueImpMD5.prototype.bit_roll = function (num, cnt) {\r\n        return (num << cnt) | (num >>> (32 - cnt));\r\n    };\r\n\r\n    /*\r\n    * These functions implement the five basic operations the algorithm uses.\r\n    */\r\n    BlueImpMD5.prototype.md5_cmn = function (q, a, b, x, s, t) {\r\n        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);\r\n    };\r\n    BlueImpMD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\r\n    };\r\n    BlueImpMD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\r\n    };\r\n    BlueImpMD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);\r\n    };\r\n    BlueImpMD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\r\n    };\r\n\r\n    /*\r\n    * Calculate the MD5 of an array of little-endian words, and a bit length.\r\n    */\r\n    BlueImpMD5.prototype.binl_md5 = function (x, len) {\r\n        /* append padding */\r\n        x[len >> 5] |= 0x80 << (len % 32);\r\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\r\n\r\n        var i, olda, oldb, oldc, oldd,\r\n            a =  1732584193,\r\n            b = -271733879,\r\n            c = -1732584194,\r\n            d =  271733878;\r\n\r\n        for (i = 0; i < x.length; i += 16) {\r\n            olda = a;\r\n            oldb = b;\r\n            oldc = c;\r\n            oldd = d;\r\n\r\n            a = this.md5_ff(a, b, c, d, x[i],       7, -680876936);\r\n            d = this.md5_ff(d, a, b, c, x[i +  1], 12, -389564586);\r\n            c = this.md5_ff(c, d, a, b, x[i +  2], 17,  606105819);\r\n            b = this.md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);\r\n            a = this.md5_ff(a, b, c, d, x[i +  4],  7, -176418897);\r\n            d = this.md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);\r\n            c = this.md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);\r\n            b = this.md5_ff(b, c, d, a, x[i +  7], 22, -45705983);\r\n            a = this.md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);\r\n            d = this.md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);\r\n            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);\r\n            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\r\n            a = this.md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);\r\n            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\r\n            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\r\n            b = this.md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);\r\n\r\n            a = this.md5_gg(a, b, c, d, x[i +  1],  5, -165796510);\r\n            d = this.md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);\r\n            c = this.md5_gg(c, d, a, b, x[i + 11], 14,  643717713);\r\n            b = this.md5_gg(b, c, d, a, x[i],      20, -373897302);\r\n            a = this.md5_gg(a, b, c, d, x[i +  5],  5, -701558691);\r\n            d = this.md5_gg(d, a, b, c, x[i + 10],  9,  38016083);\r\n            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\r\n            b = this.md5_gg(b, c, d, a, x[i +  4], 20, -405537848);\r\n            a = this.md5_gg(a, b, c, d, x[i +  9],  5,  568446438);\r\n            d = this.md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);\r\n            c = this.md5_gg(c, d, a, b, x[i +  3], 14, -187363961);\r\n            b = this.md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);\r\n            a = this.md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);\r\n            d = this.md5_gg(d, a, b, c, x[i +  2],  9, -51403784);\r\n            c = this.md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);\r\n            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\r\n\r\n            a = this.md5_hh(a, b, c, d, x[i +  5],  4, -378558);\r\n            d = this.md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);\r\n            c = this.md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);\r\n            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\r\n            a = this.md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);\r\n            d = this.md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);\r\n            c = this.md5_hh(c, d, a, b, x[i +  7], 16, -155497632);\r\n            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\r\n            a = this.md5_hh(a, b, c, d, x[i + 13],  4,  681279174);\r\n            d = this.md5_hh(d, a, b, c, x[i],      11, -358537222);\r\n            c = this.md5_hh(c, d, a, b, x[i +  3], 16, -722521979);\r\n            b = this.md5_hh(b, c, d, a, x[i +  6], 23,  76029189);\r\n            a = this.md5_hh(a, b, c, d, x[i +  9],  4, -640364487);\r\n            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\r\n            c = this.md5_hh(c, d, a, b, x[i + 15], 16,  530742520);\r\n            b = this.md5_hh(b, c, d, a, x[i +  2], 23, -995338651);\r\n\r\n            a = this.md5_ii(a, b, c, d, x[i],       6, -198630844);\r\n            d = this.md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);\r\n            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\r\n            b = this.md5_ii(b, c, d, a, x[i +  5], 21, -57434055);\r\n            a = this.md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);\r\n            d = this.md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);\r\n            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\r\n            b = this.md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);\r\n            a = this.md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);\r\n            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\r\n            c = this.md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);\r\n            b = this.md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);\r\n            a = this.md5_ii(a, b, c, d, x[i +  4],  6, -145523070);\r\n            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\r\n            c = this.md5_ii(c, d, a, b, x[i +  2], 15,  718787259);\r\n            b = this.md5_ii(b, c, d, a, x[i +  9], 21, -343485551);\r\n\r\n            a = this.safe_add(a, olda);\r\n            b = this.safe_add(b, oldb);\r\n            c = this.safe_add(c, oldc);\r\n            d = this.safe_add(d, oldd);\r\n        }\r\n        return [a, b, c, d];\r\n    };\r\n\r\n    /*\r\n    * Convert an array of little-endian words to a string\r\n    */\r\n    BlueImpMD5.prototype.binl2rstr = function (input) {\r\n        var i,\r\n            output = '';\r\n        for (i = 0; i < input.length * 32; i += 8) {\r\n            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    /*\r\n    * Convert a raw string to an array of little-endian words\r\n    * Characters >255 have their high-byte silently ignored.\r\n    */\r\n    BlueImpMD5.prototype.rstr2binl = function (input) {\r\n        var i,\r\n            output = [];\r\n        output[(input.length >> 2) - 1] = undefined;\r\n        for (i = 0; i < output.length; i += 1) {\r\n            output[i] = 0;\r\n        }\r\n        for (i = 0; i < input.length * 8; i += 8) {\r\n            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    /*\r\n    * Calculate the MD5 of a raw string\r\n    */\r\n    BlueImpMD5.prototype.rstr_md5 = function (s) {\r\n        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));\r\n    };\r\n\r\n    /*\r\n    * Calculate the HMAC-MD5, of a key and some data (raw strings)\r\n    */\r\n    BlueImpMD5.prototype.rstr_hmac_md5 = function (key, data) {\r\n        var i,\r\n            bkey = this.rstr2binl(key),\r\n            ipad = [],\r\n            opad = [],\r\n            hash;\r\n        ipad[15] = opad[15] = undefined;\r\n        if (bkey.length > 16) {\r\n            bkey = this.binl_md5(bkey, key.length * 8);\r\n        }\r\n        for (i = 0; i < 16; i += 1) {\r\n            ipad[i] = bkey[i] ^ 0x36363636;\r\n            opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n        }\r\n        hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\r\n        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));\r\n    };\r\n\r\n    /*\r\n    * Convert a raw string to a hex string\r\n    */\r\n    BlueImpMD5.prototype.rstr2hex = function (input) {\r\n        var hex_tab = '0123456789abcdef',\r\n            output = '',\r\n            x,\r\n            i;\r\n        for (i = 0; i < input.length; i += 1) {\r\n            x = input.charCodeAt(i);\r\n            output += hex_tab.charAt((x >>> 4) & 0x0F) +\r\n                hex_tab.charAt(x & 0x0F);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    /*\r\n    * Encode a string as utf-8\r\n    */\r\n    BlueImpMD5.prototype.str2rstr_utf8 = function (input) {\r\n        return unescape(encodeURIComponent(input));\r\n    };\r\n\r\n    /*\r\n    * Take string arguments and return either raw or hex encoded strings\r\n    */\r\n    BlueImpMD5.prototype.raw_md5 = function (s) {\r\n        return this.rstr_md5(this.str2rstr_utf8(s));\r\n    };\r\n    BlueImpMD5.prototype.hex_md5 = function (s) {\r\n        return this.rstr2hex(this.raw_md5(s));\r\n    };\r\n    BlueImpMD5.prototype.raw_hmac_md5 = function (k, d) {\r\n        return this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d));\r\n    };\r\n    BlueImpMD5.prototype.hex_hmac_md5 = function (k, d) {\r\n        return this.rstr2hex(this.raw_hmac_md5(k, d));\r\n    };\r\n\r\n    BlueImpMD5.prototype.md5 = function (string, key, raw) {\r\n        if (!key) {\r\n            if (!raw) {\r\n                return this.hex_md5(string);\r\n            }\r\n\r\n            return this.raw_md5(string);\r\n        }\r\n\r\n        if (!raw) {\r\n            return this.hex_hmac_md5(key, string);\r\n        }\r\n\r\n        return this.raw_hmac_md5(key, string);\r\n    };\r\n\r\n    // CommonJS module\r\n    if (typeof exports !== 'undefined') {\r\n        if (typeof module !== 'undefined' && module.exports) {\r\n            exports = module.exports = Chance;\r\n        }\r\n        exports.Chance = Chance;\r\n    }\r\n\r\n    // Register as an anonymous AMD module\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], function () {\r\n            return Chance;\r\n        });\r\n    }\r\n\r\n    // if there is a importsScrips object define chance for worker\r\n    if (typeof importScripts !== 'undefined') {\r\n        chance = new Chance();\r\n    }\r\n\r\n    // If there is a window object, that at least has a document property,\r\n    // instantiate and define chance on the window\r\n    if (typeof window === \"object\" && typeof window.document === \"object\") {\r\n        window.Chance = Chance;\r\n        window.chance = new Chance();\r\n    }\r\n})();\r\n","/**\r\n * @license AngularJS v1.6.0\r\n * (c) 2010-2016 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular) {\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name angular.mock\r\n * @description\r\n *\r\n * Namespace from 'angular-mocks.js' which contains testing related code.\r\n *\r\n */\r\nangular.mock = {};\r\n\r\n/**\r\n * ! This is a private undocumented service !\r\n *\r\n * @name $browser\r\n *\r\n * @description\r\n * This service is a mock implementation of {@link ng.$browser}. It provides fake\r\n * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,\r\n * cookies, etc.\r\n *\r\n * The api of this service is the same as that of the real {@link ng.$browser $browser}, except\r\n * that there are several helper methods available which can be used in tests.\r\n */\r\nangular.mock.$BrowserProvider = function() {\r\n  this.$get = function() {\r\n    return new angular.mock.$Browser();\r\n  };\r\n};\r\n\r\nangular.mock.$Browser = function() {\r\n  var self = this;\r\n\r\n  this.isMock = true;\r\n  self.$$url = 'http://server/';\r\n  self.$$lastUrl = self.$$url; // used by url polling fn\r\n  self.pollFns = [];\r\n\r\n  // TODO(vojta): remove this temporary api\r\n  self.$$completeOutstandingRequest = angular.noop;\r\n  self.$$incOutstandingRequestCount = angular.noop;\r\n\r\n\r\n  // register url polling fn\r\n\r\n  self.onUrlChange = function(listener) {\r\n    self.pollFns.push(\r\n      function() {\r\n        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {\r\n          self.$$lastUrl = self.$$url;\r\n          self.$$lastState = self.$$state;\r\n          listener(self.$$url, self.$$state);\r\n        }\r\n      }\r\n    );\r\n\r\n    return listener;\r\n  };\r\n\r\n  self.$$applicationDestroyed = angular.noop;\r\n  self.$$checkUrlChange = angular.noop;\r\n\r\n  self.deferredFns = [];\r\n  self.deferredNextId = 0;\r\n\r\n  self.defer = function(fn, delay) {\r\n    delay = delay || 0;\r\n    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});\r\n    self.deferredFns.sort(function(a, b) { return a.time - b.time;});\r\n    return self.deferredNextId++;\r\n  };\r\n\r\n\r\n  /**\r\n   * @name $browser#defer.now\r\n   *\r\n   * @description\r\n   * Current milliseconds mock time.\r\n   */\r\n  self.defer.now = 0;\r\n\r\n\r\n  self.defer.cancel = function(deferId) {\r\n    var fnIndex;\r\n\r\n    angular.forEach(self.deferredFns, function(fn, index) {\r\n      if (fn.id === deferId) fnIndex = index;\r\n    });\r\n\r\n    if (angular.isDefined(fnIndex)) {\r\n      self.deferredFns.splice(fnIndex, 1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n\r\n  /**\r\n   * @name $browser#defer.flush\r\n   *\r\n   * @description\r\n   * Flushes all pending requests and executes the defer callbacks.\r\n   *\r\n   * @param {number=} number of milliseconds to flush. See {@link #defer.now}\r\n   */\r\n  self.defer.flush = function(delay) {\r\n    var nextTime;\r\n\r\n    if (angular.isDefined(delay)) {\r\n      // A delay was passed so compute the next time\r\n      nextTime = self.defer.now + delay;\r\n    } else {\r\n      if (self.deferredFns.length) {\r\n        // No delay was passed so set the next time so that it clears the deferred queue\r\n        nextTime = self.deferredFns[self.deferredFns.length - 1].time;\r\n      } else {\r\n        // No delay passed, but there are no deferred tasks so flush - indicates an error!\r\n        throw new Error('No deferred tasks to be flushed');\r\n      }\r\n    }\r\n\r\n    while (self.deferredFns.length && self.deferredFns[0].time <= nextTime) {\r\n      // Increment the time and call the next deferred function\r\n      self.defer.now = self.deferredFns[0].time;\r\n      self.deferredFns.shift().fn();\r\n    }\r\n\r\n    // Ensure that the current time is correct\r\n    self.defer.now = nextTime;\r\n  };\r\n\r\n  self.$$baseHref = '/';\r\n  self.baseHref = function() {\r\n    return this.$$baseHref;\r\n  };\r\n};\r\nangular.mock.$Browser.prototype = {\r\n\r\n  /**\r\n   * @name $browser#poll\r\n   *\r\n   * @description\r\n   * run all fns in pollFns\r\n   */\r\n  poll: function poll() {\r\n    angular.forEach(this.pollFns, function(pollFn) {\r\n      pollFn();\r\n    });\r\n  },\r\n\r\n  url: function(url, replace, state) {\r\n    if (angular.isUndefined(state)) {\r\n      state = null;\r\n    }\r\n    if (url) {\r\n      this.$$url = url;\r\n      // Native pushState serializes & copies the object; simulate it.\r\n      this.$$state = angular.copy(state);\r\n      return this;\r\n    }\r\n\r\n    return this.$$url;\r\n  },\r\n\r\n  state: function() {\r\n    return this.$$state;\r\n  },\r\n\r\n  notifyWhenNoOutstandingRequests: function(fn) {\r\n    fn();\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @ngdoc provider\r\n * @name $exceptionHandlerProvider\r\n *\r\n * @description\r\n * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors\r\n * passed to the `$exceptionHandler`.\r\n */\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $exceptionHandler\r\n *\r\n * @description\r\n * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed\r\n * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration\r\n * information.\r\n *\r\n *\r\n * ```js\r\n *   describe('$exceptionHandlerProvider', function() {\r\n *\r\n *     it('should capture log messages and exceptions', function() {\r\n *\r\n *       module(function($exceptionHandlerProvider) {\r\n *         $exceptionHandlerProvider.mode('log');\r\n *       });\r\n *\r\n *       inject(function($log, $exceptionHandler, $timeout) {\r\n *         $timeout(function() { $log.log(1); });\r\n *         $timeout(function() { $log.log(2); throw 'banana peel'; });\r\n *         $timeout(function() { $log.log(3); });\r\n *         expect($exceptionHandler.errors).toEqual([]);\r\n *         expect($log.assertEmpty());\r\n *         $timeout.flush();\r\n *         expect($exceptionHandler.errors).toEqual(['banana peel']);\r\n *         expect($log.log.logs).toEqual([[1], [2], [3]]);\r\n *       });\r\n *     });\r\n *   });\r\n * ```\r\n */\r\n\r\nangular.mock.$ExceptionHandlerProvider = function() {\r\n  var handler;\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $exceptionHandlerProvider#mode\r\n   *\r\n   * @description\r\n   * Sets the logging mode.\r\n   *\r\n   * @param {string} mode Mode of operation, defaults to `rethrow`.\r\n   *\r\n   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`\r\n   *     mode stores an array of errors in `$exceptionHandler.errors`, to allow later assertion of\r\n   *     them. See {@link ngMock.$log#assertEmpty assertEmpty()} and\r\n   *     {@link ngMock.$log#reset reset()}.\r\n   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there\r\n   *     is a bug in the application or test, so this mock will make these tests fail. For any\r\n   *     implementations that expect exceptions to be thrown, the `rethrow` mode will also maintain\r\n   *     a log of thrown errors in `$exceptionHandler.errors`.\r\n   */\r\n  this.mode = function(mode) {\r\n\r\n    switch (mode) {\r\n      case 'log':\r\n      case 'rethrow':\r\n        var errors = [];\r\n        handler = function(e) {\r\n          if (arguments.length === 1) {\r\n            errors.push(e);\r\n          } else {\r\n            errors.push([].slice.call(arguments, 0));\r\n          }\r\n          if (mode === 'rethrow') {\r\n            throw e;\r\n          }\r\n        };\r\n        handler.errors = errors;\r\n        break;\r\n      default:\r\n        throw new Error('Unknown mode \\'' + mode + '\\', only \\'log\\'/\\'rethrow\\' modes are allowed!');\r\n    }\r\n  };\r\n\r\n  this.$get = function() {\r\n    return handler;\r\n  };\r\n\r\n  this.mode('rethrow');\r\n};\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $log\r\n *\r\n * @description\r\n * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays\r\n * (one array per logging level). These arrays are exposed as `logs` property of each of the\r\n * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.\r\n *\r\n */\r\nangular.mock.$LogProvider = function() {\r\n  var debug = true;\r\n\r\n  function concat(array1, array2, index) {\r\n    return array1.concat(Array.prototype.slice.call(array2, index));\r\n  }\r\n\r\n  this.debugEnabled = function(flag) {\r\n    if (angular.isDefined(flag)) {\r\n      debug = flag;\r\n      return this;\r\n    } else {\r\n      return debug;\r\n    }\r\n  };\r\n\r\n  this.$get = function() {\r\n    var $log = {\r\n      log: function() { $log.log.logs.push(concat([], arguments, 0)); },\r\n      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },\r\n      info: function() { $log.info.logs.push(concat([], arguments, 0)); },\r\n      error: function() { $log.error.logs.push(concat([], arguments, 0)); },\r\n      debug: function() {\r\n        if (debug) {\r\n          $log.debug.logs.push(concat([], arguments, 0));\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name $log#reset\r\n     *\r\n     * @description\r\n     * Reset all of the logging arrays to empty.\r\n     */\r\n    $log.reset = function() {\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#log.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#log `log()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.log('Some Log');\r\n       * var first = $log.log.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.log.logs = [];\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#info.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#info `info()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.info('Some Info');\r\n       * var first = $log.info.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.info.logs = [];\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#warn.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#warn `warn()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.warn('Some Warning');\r\n       * var first = $log.warn.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.warn.logs = [];\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#error.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#error `error()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.error('Some Error');\r\n       * var first = $log.error.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.error.logs = [];\r\n        /**\r\n       * @ngdoc property\r\n       * @name $log#debug.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#debug `debug()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.debug('Some Error');\r\n       * var first = $log.debug.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.debug.logs = [];\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name $log#assertEmpty\r\n     *\r\n     * @description\r\n     * Assert that all of the logging methods have no logged messages. If any messages are present,\r\n     * an exception is thrown.\r\n     */\r\n    $log.assertEmpty = function() {\r\n      var errors = [];\r\n      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {\r\n        angular.forEach($log[logLevel].logs, function(log) {\r\n          angular.forEach(log, function(logItem) {\r\n            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\\n' +\r\n                        (logItem.stack || ''));\r\n          });\r\n        });\r\n      });\r\n      if (errors.length) {\r\n        errors.unshift('Expected $log to be empty! Either a message was logged unexpectedly, or ' +\r\n          'an expected log message was not checked and removed:');\r\n        errors.push('');\r\n        throw new Error(errors.join('\\n---------\\n'));\r\n      }\r\n    };\r\n\r\n    $log.reset();\r\n    return $log;\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $interval\r\n *\r\n * @description\r\n * Mock implementation of the $interval service.\r\n *\r\n * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\r\n * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\r\n * time.\r\n *\r\n * @param {function()} fn A function that should be called repeatedly.\r\n * @param {number} delay Number of milliseconds between each function call.\r\n * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\r\n *   indefinitely.\r\n * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\r\n *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\r\n * @param {...*=} Pass additional parameters to the executed function.\r\n * @returns {promise} A promise which will be notified on each iteration.\r\n */\r\nangular.mock.$IntervalProvider = function() {\r\n  this.$get = ['$browser', '$rootScope', '$q', '$$q',\r\n       function($browser,   $rootScope,   $q,   $$q) {\r\n    var repeatFns = [],\r\n        nextRepeatId = 0,\r\n        now = 0;\r\n\r\n    var $interval = function(fn, delay, count, invokeApply) {\r\n      var hasParams = arguments.length > 4,\r\n          args = hasParams ? Array.prototype.slice.call(arguments, 4) : [],\r\n          iteration = 0,\r\n          skipApply = (angular.isDefined(invokeApply) && !invokeApply),\r\n          deferred = (skipApply ? $$q : $q).defer(),\r\n          promise = deferred.promise;\r\n\r\n      count = (angular.isDefined(count)) ? count : 0;\r\n      promise.then(null, function() {}, (!hasParams) ? fn : function() {\r\n        fn.apply(null, args);\r\n      });\r\n\r\n      promise.$$intervalId = nextRepeatId;\r\n\r\n      function tick() {\r\n        deferred.notify(iteration++);\r\n\r\n        if (count > 0 && iteration >= count) {\r\n          var fnIndex;\r\n          deferred.resolve(iteration);\r\n\r\n          angular.forEach(repeatFns, function(fn, index) {\r\n            if (fn.id === promise.$$intervalId) fnIndex = index;\r\n          });\r\n\r\n          if (angular.isDefined(fnIndex)) {\r\n            repeatFns.splice(fnIndex, 1);\r\n          }\r\n        }\r\n\r\n        if (skipApply) {\r\n          $browser.defer.flush();\r\n        } else {\r\n          $rootScope.$apply();\r\n        }\r\n      }\r\n\r\n      repeatFns.push({\r\n        nextTime:(now + delay),\r\n        delay: delay,\r\n        fn: tick,\r\n        id: nextRepeatId,\r\n        deferred: deferred\r\n      });\r\n      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\r\n\r\n      nextRepeatId++;\r\n      return promise;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name $interval#cancel\r\n     *\r\n     * @description\r\n     * Cancels a task associated with the `promise`.\r\n     *\r\n     * @param {promise} promise A promise from calling the `$interval` function.\r\n     * @returns {boolean} Returns `true` if the task was successfully cancelled.\r\n     */\r\n    $interval.cancel = function(promise) {\r\n      if (!promise) return false;\r\n      var fnIndex;\r\n\r\n      angular.forEach(repeatFns, function(fn, index) {\r\n        if (fn.id === promise.$$intervalId) fnIndex = index;\r\n      });\r\n\r\n      if (angular.isDefined(fnIndex)) {\r\n        repeatFns[fnIndex].deferred.promise.then(undefined, function() {});\r\n        repeatFns[fnIndex].deferred.reject('canceled');\r\n        repeatFns.splice(fnIndex, 1);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name $interval#flush\r\n     * @description\r\n     *\r\n     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.\r\n     *\r\n     * @param {number=} millis maximum timeout amount to flush up until.\r\n     *\r\n     * @return {number} The amount of time moved forward.\r\n     */\r\n    $interval.flush = function(millis) {\r\n      now += millis;\r\n      while (repeatFns.length && repeatFns[0].nextTime <= now) {\r\n        var task = repeatFns[0];\r\n        task.fn();\r\n        task.nextTime += task.delay;\r\n        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\r\n      }\r\n      return millis;\r\n    };\r\n\r\n    return $interval;\r\n  }];\r\n};\r\n\r\n\r\nfunction jsonStringToDate(string) {\r\n  // The R_ISO8061_STR regex is never going to fit into the 100 char limit!\r\n  // eslit-disable-next-line max-len\r\n  var R_ISO8061_STR = /^(-?\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d{3}))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d)))?$/;\r\n\r\n  var match;\r\n  if ((match = string.match(R_ISO8061_STR))) {\r\n    var date = new Date(0),\r\n        tzHour = 0,\r\n        tzMin  = 0;\r\n    if (match[9]) {\r\n      tzHour = toInt(match[9] + match[10]);\r\n      tzMin = toInt(match[9] + match[11]);\r\n    }\r\n    date.setUTCFullYear(toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\r\n    date.setUTCHours(toInt(match[4] || 0) - tzHour,\r\n                     toInt(match[5] || 0) - tzMin,\r\n                     toInt(match[6] || 0),\r\n                     toInt(match[7] || 0));\r\n    return date;\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction toInt(str) {\r\n  return parseInt(str, 10);\r\n}\r\n\r\nfunction padNumberInMock(num, digits, trim) {\r\n  var neg = '';\r\n  if (num < 0) {\r\n    neg =  '-';\r\n    num = -num;\r\n  }\r\n  num = '' + num;\r\n  while (num.length < digits) num = '0' + num;\r\n  if (trim) {\r\n    num = num.substr(num.length - digits);\r\n  }\r\n  return neg + num;\r\n}\r\n\r\n\r\n/**\r\n * @ngdoc type\r\n * @name angular.mock.TzDate\r\n * @description\r\n *\r\n * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.\r\n *\r\n * Mock of the Date type which has its timezone specified via constructor arg.\r\n *\r\n * The main purpose is to create Date-like instances with timezone fixed to the specified timezone\r\n * offset, so that we can test code that depends on local timezone settings without dependency on\r\n * the time zone settings of the machine where the code is running.\r\n *\r\n * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)\r\n * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*\r\n *\r\n * @example\r\n * !!!! WARNING !!!!!\r\n * This is not a complete Date object so only methods that were implemented can be called safely.\r\n * To make matters worse, TzDate instances inherit stuff from Date via a prototype.\r\n *\r\n * We do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is\r\n * incomplete we might be missing some non-standard methods. This can result in errors like:\r\n * \"Date.prototype.foo called on incompatible Object\".\r\n *\r\n * ```js\r\n * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\r\n * newYearInBratislava.getTimezoneOffset() => -60;\r\n * newYearInBratislava.getFullYear() => 2010;\r\n * newYearInBratislava.getMonth() => 0;\r\n * newYearInBratislava.getDate() => 1;\r\n * newYearInBratislava.getHours() => 0;\r\n * newYearInBratislava.getMinutes() => 0;\r\n * newYearInBratislava.getSeconds() => 0;\r\n * ```\r\n *\r\n */\r\nangular.mock.TzDate = function(offset, timestamp) {\r\n  var self = new Date(0);\r\n  if (angular.isString(timestamp)) {\r\n    var tsStr = timestamp;\r\n\r\n    self.origDate = jsonStringToDate(timestamp);\r\n\r\n    timestamp = self.origDate.getTime();\r\n    if (isNaN(timestamp)) {\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw {\r\n        name: 'Illegal Argument',\r\n        message: 'Arg \\'' + tsStr + '\\' passed into TzDate constructor is not a valid date string'\r\n      };\r\n    }\r\n  } else {\r\n    self.origDate = new Date(timestamp);\r\n  }\r\n\r\n  var localOffset = new Date(timestamp).getTimezoneOffset();\r\n  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;\r\n  self.date = new Date(timestamp + self.offsetDiff);\r\n\r\n  self.getTime = function() {\r\n    return self.date.getTime() - self.offsetDiff;\r\n  };\r\n\r\n  self.toLocaleDateString = function() {\r\n    return self.date.toLocaleDateString();\r\n  };\r\n\r\n  self.getFullYear = function() {\r\n    return self.date.getFullYear();\r\n  };\r\n\r\n  self.getMonth = function() {\r\n    return self.date.getMonth();\r\n  };\r\n\r\n  self.getDate = function() {\r\n    return self.date.getDate();\r\n  };\r\n\r\n  self.getHours = function() {\r\n    return self.date.getHours();\r\n  };\r\n\r\n  self.getMinutes = function() {\r\n    return self.date.getMinutes();\r\n  };\r\n\r\n  self.getSeconds = function() {\r\n    return self.date.getSeconds();\r\n  };\r\n\r\n  self.getMilliseconds = function() {\r\n    return self.date.getMilliseconds();\r\n  };\r\n\r\n  self.getTimezoneOffset = function() {\r\n    return offset * 60;\r\n  };\r\n\r\n  self.getUTCFullYear = function() {\r\n    return self.origDate.getUTCFullYear();\r\n  };\r\n\r\n  self.getUTCMonth = function() {\r\n    return self.origDate.getUTCMonth();\r\n  };\r\n\r\n  self.getUTCDate = function() {\r\n    return self.origDate.getUTCDate();\r\n  };\r\n\r\n  self.getUTCHours = function() {\r\n    return self.origDate.getUTCHours();\r\n  };\r\n\r\n  self.getUTCMinutes = function() {\r\n    return self.origDate.getUTCMinutes();\r\n  };\r\n\r\n  self.getUTCSeconds = function() {\r\n    return self.origDate.getUTCSeconds();\r\n  };\r\n\r\n  self.getUTCMilliseconds = function() {\r\n    return self.origDate.getUTCMilliseconds();\r\n  };\r\n\r\n  self.getDay = function() {\r\n    return self.date.getDay();\r\n  };\r\n\r\n  // provide this method only on browsers that already have it\r\n  if (self.toISOString) {\r\n    self.toISOString = function() {\r\n      return padNumberInMock(self.origDate.getUTCFullYear(), 4) + '-' +\r\n            padNumberInMock(self.origDate.getUTCMonth() + 1, 2) + '-' +\r\n            padNumberInMock(self.origDate.getUTCDate(), 2) + 'T' +\r\n            padNumberInMock(self.origDate.getUTCHours(), 2) + ':' +\r\n            padNumberInMock(self.origDate.getUTCMinutes(), 2) + ':' +\r\n            padNumberInMock(self.origDate.getUTCSeconds(), 2) + '.' +\r\n            padNumberInMock(self.origDate.getUTCMilliseconds(), 3) + 'Z';\r\n    };\r\n  }\r\n\r\n  //hide all methods not implemented in this mock that the Date prototype exposes\r\n  var unimplementedMethods = ['getUTCDay',\r\n      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\r\n      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',\r\n      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',\r\n      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',\r\n      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];\r\n\r\n  angular.forEach(unimplementedMethods, function(methodName) {\r\n    self[methodName] = function() {\r\n      throw new Error('Method \\'' + methodName + '\\' is not implemented in the TzDate mock');\r\n    };\r\n  });\r\n\r\n  return self;\r\n};\r\n\r\n//make \"tzDateInstance instanceof Date\" return true\r\nangular.mock.TzDate.prototype = Date.prototype;\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $animate\r\n *\r\n * @description\r\n * Mock implementation of the {@link ng.$animate `$animate`} service. Exposes two additional methods\r\n * for testing animations.\r\n *\r\n * You need to require the `ngAnimateMock` module in your test suite for instance `beforeEach(module('ngAnimateMock'))`\r\n */\r\nangular.mock.animate = angular.module('ngAnimateMock', ['ng'])\r\n\r\n  .config(['$provide', function($provide) {\r\n\r\n    $provide.factory('$$forceReflow', function() {\r\n      function reflowFn() {\r\n        reflowFn.totalReflows++;\r\n      }\r\n      reflowFn.totalReflows = 0;\r\n      return reflowFn;\r\n    });\r\n\r\n    $provide.factory('$$animateAsyncRun', function() {\r\n      var queue = [];\r\n      var queueFn = function() {\r\n        return function(fn) {\r\n          queue.push(fn);\r\n        };\r\n      };\r\n      queueFn.flush = function() {\r\n        if (queue.length === 0) return false;\r\n\r\n        for (var i = 0; i < queue.length; i++) {\r\n          queue[i]();\r\n        }\r\n        queue = [];\r\n\r\n        return true;\r\n      };\r\n      return queueFn;\r\n    });\r\n\r\n    $provide.decorator('$$animateJs', ['$delegate', function($delegate) {\r\n      var runners = [];\r\n\r\n      var animateJsConstructor = function() {\r\n        var animator = $delegate.apply($delegate, arguments);\r\n        // If no javascript animation is found, animator is undefined\r\n        if (animator) {\r\n          runners.push(animator);\r\n        }\r\n        return animator;\r\n      };\r\n\r\n      animateJsConstructor.$closeAndFlush = function() {\r\n        runners.forEach(function(runner) {\r\n          runner.end();\r\n        });\r\n        runners = [];\r\n      };\r\n\r\n      return animateJsConstructor;\r\n    }]);\r\n\r\n    $provide.decorator('$animateCss', ['$delegate', function($delegate) {\r\n      var runners = [];\r\n\r\n      var animateCssConstructor = function(element, options) {\r\n        var animator = $delegate(element, options);\r\n        runners.push(animator);\r\n        return animator;\r\n      };\r\n\r\n      animateCssConstructor.$closeAndFlush = function() {\r\n        runners.forEach(function(runner) {\r\n          runner.end();\r\n        });\r\n        runners = [];\r\n      };\r\n\r\n      return animateCssConstructor;\r\n    }]);\r\n\r\n    $provide.decorator('$animate', ['$delegate', '$timeout', '$browser', '$$rAF', '$animateCss', '$$animateJs',\r\n                                    '$$forceReflow', '$$animateAsyncRun', '$rootScope',\r\n                            function($delegate,   $timeout,   $browser,   $$rAF,   $animateCss,   $$animateJs,\r\n                                     $$forceReflow,   $$animateAsyncRun,  $rootScope) {\r\n      var animate = {\r\n        queue: [],\r\n        cancel: $delegate.cancel,\r\n        on: $delegate.on,\r\n        off: $delegate.off,\r\n        pin: $delegate.pin,\r\n        get reflows() {\r\n          return $$forceReflow.totalReflows;\r\n        },\r\n        enabled: $delegate.enabled,\r\n        /**\r\n         * @ngdoc method\r\n         * @name $animate#closeAndFlush\r\n         * @description\r\n         *\r\n         * This method will close all pending animations (both {@link ngAnimate#javascript-based-animations Javascript}\r\n         * and {@link ngAnimate.$animateCss CSS}) and it will also flush any remaining animation frames and/or callbacks.\r\n         */\r\n        closeAndFlush: function() {\r\n          // we allow the flush command to swallow the errors\r\n          // because depending on whether CSS or JS animations are\r\n          // used, there may not be a RAF flush. The primary flush\r\n          // at the end of this function must throw an exception\r\n          // because it will track if there were pending animations\r\n          this.flush(true);\r\n          $animateCss.$closeAndFlush();\r\n          $$animateJs.$closeAndFlush();\r\n          this.flush();\r\n        },\r\n        /**\r\n         * @ngdoc method\r\n         * @name $animate#flush\r\n         * @description\r\n         *\r\n         * This method is used to flush the pending callbacks and animation frames to either start\r\n         * an animation or conclude an animation. Note that this will not actually close an\r\n         * actively running animation (see {@link ngMock.$animate#closeAndFlush `closeAndFlush()`} for that).\r\n         */\r\n        flush: function(hideErrors) {\r\n          $rootScope.$digest();\r\n\r\n          var doNextRun, somethingFlushed = false;\r\n          do {\r\n            doNextRun = false;\r\n\r\n            if ($$rAF.queue.length) {\r\n              $$rAF.flush();\r\n              doNextRun = somethingFlushed = true;\r\n            }\r\n\r\n            if ($$animateAsyncRun.flush()) {\r\n              doNextRun = somethingFlushed = true;\r\n            }\r\n          } while (doNextRun);\r\n\r\n          if (!somethingFlushed && !hideErrors) {\r\n            throw new Error('No pending animations ready to be closed or flushed');\r\n          }\r\n\r\n          $rootScope.$digest();\r\n        }\r\n      };\r\n\r\n      angular.forEach(\r\n        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {\r\n        animate[method] = function() {\r\n          animate.queue.push({\r\n            event: method,\r\n            element: arguments[0],\r\n            options: arguments[arguments.length - 1],\r\n            args: arguments\r\n          });\r\n          return $delegate[method].apply($delegate, arguments);\r\n        };\r\n      });\r\n\r\n      return animate;\r\n    }]);\r\n\r\n  }]);\r\n\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angular.mock.dump\r\n * @description\r\n *\r\n * *NOTE*: This is not an injectable instance, just a globally available function.\r\n *\r\n * Method for serializing common angular objects (scope, elements, etc..) into strings.\r\n * It is useful for logging objects to the console when debugging.\r\n *\r\n * @param {*} object - any object to turn into string.\r\n * @return {string} a serialized string of the argument\r\n */\r\nangular.mock.dump = function(object) {\r\n  return serialize(object);\r\n\r\n  function serialize(object) {\r\n    var out;\r\n\r\n    if (angular.isElement(object)) {\r\n      object = angular.element(object);\r\n      out = angular.element('<div></div>');\r\n      angular.forEach(object, function(element) {\r\n        out.append(angular.element(element).clone());\r\n      });\r\n      out = out.html();\r\n    } else if (angular.isArray(object)) {\r\n      out = [];\r\n      angular.forEach(object, function(o) {\r\n        out.push(serialize(o));\r\n      });\r\n      out = '[ ' + out.join(', ') + ' ]';\r\n    } else if (angular.isObject(object)) {\r\n      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {\r\n        out = serializeScope(object);\r\n      } else if (object instanceof Error) {\r\n        out = object.stack || ('' + object.name + ': ' + object.message);\r\n      } else {\r\n        // TODO(i): this prevents methods being logged,\r\n        // we should have a better way to serialize objects\r\n        out = angular.toJson(object, true);\r\n      }\r\n    } else {\r\n      out = String(object);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function serializeScope(scope, offset) {\r\n    offset = offset ||  '  ';\r\n    var log = [offset + 'Scope(' + scope.$id + '): {'];\r\n    for (var key in scope) {\r\n      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\\$|this)/)) {\r\n        log.push('  ' + key + ': ' + angular.toJson(scope[key]));\r\n      }\r\n    }\r\n    var child = scope.$$childHead;\r\n    while (child) {\r\n      log.push(serializeScope(child, offset + '  '));\r\n      child = child.$$nextSibling;\r\n    }\r\n    log.push('}');\r\n    return log.join('\\n' + offset);\r\n  }\r\n};\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $httpBackend\r\n * @description\r\n * Fake HTTP backend implementation suitable for unit testing applications that use the\r\n * {@link ng.$http $http service}.\r\n *\r\n * <div class=\"alert alert-info\">\r\n * **Note**: For fake HTTP backend implementation suitable for end-to-end testing or backend-less\r\n * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.\r\n * </div>\r\n *\r\n * During unit testing, we want our unit tests to run quickly and have no external dependencies so\r\n * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or\r\n * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is\r\n * to verify whether a certain request has been sent or not, or alternatively just let the\r\n * application make requests, respond with pre-trained responses and assert that the end result is\r\n * what we expect it to be.\r\n *\r\n * This mock implementation can be used to respond with static or dynamic responses via the\r\n * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).\r\n *\r\n * When an Angular application needs some data from a server, it calls the $http service, which\r\n * sends the request to a real server using $httpBackend service. With dependency injection, it is\r\n * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify\r\n * the requests and respond with some testing data without sending a request to a real server.\r\n *\r\n * There are two ways to specify what test data should be returned as http responses by the mock\r\n * backend when the code under test makes http requests:\r\n *\r\n * - `$httpBackend.expect` - specifies a request expectation\r\n * - `$httpBackend.when` - specifies a backend definition\r\n *\r\n *\r\n * ## Request Expectations vs Backend Definitions\r\n *\r\n * Request expectations provide a way to make assertions about requests made by the application and\r\n * to define responses for those requests. The test will fail if the expected requests are not made\r\n * or they are made in the wrong order.\r\n *\r\n * Backend definitions allow you to define a fake backend for your application which doesn't assert\r\n * if a particular request was made or not, it just returns a trained response if a request is made.\r\n * The test will pass whether or not the request gets made during testing.\r\n *\r\n *\r\n * <table class=\"table\">\r\n *   <tr><th width=\"220px\"></th><th>Request expectations</th><th>Backend definitions</th></tr>\r\n *   <tr>\r\n *     <th>Syntax</th>\r\n *     <td>.expect(...).respond(...)</td>\r\n *     <td>.when(...).respond(...)</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Typical usage</th>\r\n *     <td>strict unit tests</td>\r\n *     <td>loose (black-box) unit testing</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Fulfills multiple requests</th>\r\n *     <td>NO</td>\r\n *     <td>YES</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Order of requests matters</th>\r\n *     <td>YES</td>\r\n *     <td>NO</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Request required</th>\r\n *     <td>YES</td>\r\n *     <td>NO</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Response required</th>\r\n *     <td>optional (see below)</td>\r\n *     <td>YES</td>\r\n *   </tr>\r\n * </table>\r\n *\r\n * In cases where both backend definitions and request expectations are specified during unit\r\n * testing, the request expectations are evaluated first.\r\n *\r\n * If a request expectation has no response specified, the algorithm will search your backend\r\n * definitions for an appropriate response.\r\n *\r\n * If a request didn't match any expectation or if the expectation doesn't have the response\r\n * defined, the backend definitions are evaluated in sequential order to see if any of them match\r\n * the request. The response from the first matched definition is returned.\r\n *\r\n *\r\n * ## Flushing HTTP requests\r\n *\r\n * The $httpBackend used in production always responds to requests asynchronously. If we preserved\r\n * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,\r\n * to follow and to maintain. But neither can the testing mock respond synchronously; that would\r\n * change the execution of the code under test. For this reason, the mock $httpBackend has a\r\n * `flush()` method, which allows the test to explicitly flush pending requests. This preserves\r\n * the async api of the backend, while allowing the test to execute synchronously.\r\n *\r\n *\r\n * ## Unit testing with mock $httpBackend\r\n * The following code shows how to setup and use the mock backend when unit testing a controller.\r\n * First we create the controller under test:\r\n *\r\n  ```js\r\n  // The module code\r\n  angular\r\n    .module('MyApp', [])\r\n    .controller('MyController', MyController);\r\n\r\n  // The controller code\r\n  function MyController($scope, $http) {\r\n    var authToken;\r\n\r\n    $http.get('/auth.py').then(function(response) {\r\n      authToken = response.headers('A-Token');\r\n      $scope.user = response.data;\r\n    });\r\n\r\n    $scope.saveMessage = function(message) {\r\n      var headers = { 'Authorization': authToken };\r\n      $scope.status = 'Saving...';\r\n\r\n      $http.post('/add-msg.py', message, { headers: headers } ).then(function(response) {\r\n        $scope.status = '';\r\n      }).catch(function() {\r\n        $scope.status = 'Failed...';\r\n      });\r\n    };\r\n  }\r\n  ```\r\n *\r\n * Now we setup the mock backend and create the test specs:\r\n *\r\n  ```js\r\n    // testing controller\r\n    describe('MyController', function() {\r\n       var $httpBackend, $rootScope, createController, authRequestHandler;\r\n\r\n       // Set up the module\r\n       beforeEach(module('MyApp'));\r\n\r\n       beforeEach(inject(function($injector) {\r\n         // Set up the mock http service responses\r\n         $httpBackend = $injector.get('$httpBackend');\r\n         // backend definition common for all tests\r\n         authRequestHandler = $httpBackend.when('GET', '/auth.py')\r\n                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});\r\n\r\n         // Get hold of a scope (i.e. the root scope)\r\n         $rootScope = $injector.get('$rootScope');\r\n         // The $controller service is used to create instances of controllers\r\n         var $controller = $injector.get('$controller');\r\n\r\n         createController = function() {\r\n           return $controller('MyController', {'$scope' : $rootScope });\r\n         };\r\n       }));\r\n\r\n\r\n       afterEach(function() {\r\n         $httpBackend.verifyNoOutstandingExpectation();\r\n         $httpBackend.verifyNoOutstandingRequest();\r\n       });\r\n\r\n\r\n       it('should fetch authentication token', function() {\r\n         $httpBackend.expectGET('/auth.py');\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n       });\r\n\r\n\r\n       it('should fail authentication', function() {\r\n\r\n         // Notice how you can change the response even after it was set\r\n         authRequestHandler.respond(401, '');\r\n\r\n         $httpBackend.expectGET('/auth.py');\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n         expect($rootScope.status).toBe('Failed...');\r\n       });\r\n\r\n\r\n       it('should send msg to server', function() {\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n\r\n         // now you don’t care about the authentication, but\r\n         // the controller will still send the request and\r\n         // $httpBackend will respond without you having to\r\n         // specify the expectation and response for this request\r\n\r\n         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\r\n         $rootScope.saveMessage('message content');\r\n         expect($rootScope.status).toBe('Saving...');\r\n         $httpBackend.flush();\r\n         expect($rootScope.status).toBe('');\r\n       });\r\n\r\n\r\n       it('should send auth header', function() {\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n\r\n         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\r\n           // check if the header was sent, if it wasn't the expectation won't\r\n           // match the request and the test will fail\r\n           return headers['Authorization'] === 'xxx';\r\n         }).respond(201, '');\r\n\r\n         $rootScope.saveMessage('whatever');\r\n         $httpBackend.flush();\r\n       });\r\n    });\r\n  ```\r\n *\r\n * ## Dynamic responses\r\n *\r\n * You define a response to a request by chaining a call to `respond()` onto a definition or expectation.\r\n * If you provide a **callback** as the first parameter to `respond(callback)` then you can dynamically generate\r\n * a response based on the properties of the request.\r\n *\r\n * The `callback` function should be of the form `function(method, url, data, headers, params)`.\r\n *\r\n * ### Query parameters\r\n *\r\n * By default, query parameters on request URLs are parsed into the `params` object. So a request URL\r\n * of `/list?q=searchstr&orderby=-name` would set `params` to be `{q: 'searchstr', orderby: '-name'}`.\r\n *\r\n * ### Regex parameter matching\r\n *\r\n * If an expectation or definition uses a **regex** to match the URL, you can provide an array of **keys** via a\r\n * `params` argument. The index of each **key** in the array will match the index of a **group** in the\r\n * **regex**.\r\n *\r\n * The `params` object in the **callback** will now have properties with these keys, which hold the value of the\r\n * corresponding **group** in the **regex**.\r\n *\r\n * This also applies to the `when` and `expect` shortcut methods.\r\n *\r\n *\r\n * ```js\r\n *   $httpBackend.expect('GET', /\\/user\\/(.+)/, undefined, undefined, ['id'])\r\n *     .respond(function(method, url, data, headers, params) {\r\n *       // for requested url of '/user/1234' params is {id: '1234'}\r\n *     });\r\n *\r\n *   $httpBackend.whenPATCH(/\\/user\\/(.+)\\/article\\/(.+)/, undefined, undefined, ['user', 'article'])\r\n *     .respond(function(method, url, data, headers, params) {\r\n *       // for url of '/user/1234/article/567' params is {user: '1234', article: '567'}\r\n *     });\r\n * ```\r\n *\r\n * ## Matching route requests\r\n *\r\n * For extra convenience, `whenRoute` and `expectRoute` shortcuts are available. These methods offer colon\r\n * delimited matching of the url path, ignoring the query string. This allows declarations\r\n * similar to how application routes are configured with `$routeProvider`. Because these methods convert\r\n * the definition url to regex, declaration order is important. Combined with query parameter parsing,\r\n * the following is possible:\r\n *\r\n  ```js\r\n    $httpBackend.whenRoute('GET', '/users/:id')\r\n      .respond(function(method, url, data, headers, params) {\r\n        return [200, MockUserList[Number(params.id)]];\r\n      });\r\n\r\n    $httpBackend.whenRoute('GET', '/users')\r\n      .respond(function(method, url, data, headers, params) {\r\n        var userList = angular.copy(MockUserList),\r\n          defaultSort = 'lastName',\r\n          count, pages, isPrevious, isNext;\r\n\r\n        // paged api response '/v1/users?page=2'\r\n        params.page = Number(params.page) || 1;\r\n\r\n        // query for last names '/v1/users?q=Archer'\r\n        if (params.q) {\r\n          userList = $filter('filter')({lastName: params.q});\r\n        }\r\n\r\n        pages = Math.ceil(userList.length / pagingLength);\r\n        isPrevious = params.page > 1;\r\n        isNext = params.page < pages;\r\n\r\n        return [200, {\r\n          count:    userList.length,\r\n          previous: isPrevious,\r\n          next:     isNext,\r\n          // sort field -> '/v1/users?sortBy=firstName'\r\n          results:  $filter('orderBy')(userList, params.sortBy || defaultSort)\r\n                      .splice((params.page - 1) * pagingLength, pagingLength)\r\n        }];\r\n      });\r\n  ```\r\n */\r\nangular.mock.$HttpBackendProvider = function() {\r\n  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];\r\n};\r\n\r\n/**\r\n * General factory function for $httpBackend mock.\r\n * Returns instance for unit testing (when no arguments specified):\r\n *   - passing through is disabled\r\n *   - auto flushing is disabled\r\n *\r\n * Returns instance for e2e testing (when `$delegate` and `$browser` specified):\r\n *   - passing through (delegating request to real backend) is enabled\r\n *   - auto flushing is enabled\r\n *\r\n * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)\r\n * @param {Object=} $browser Auto-flushing enabled if specified\r\n * @return {Object} Instance of $httpBackend mock\r\n */\r\nfunction createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {\r\n  var definitions = [],\r\n      expectations = [],\r\n      responses = [],\r\n      responsesPush = angular.bind(responses, responses.push),\r\n      copy = angular.copy;\r\n\r\n  function createResponse(status, data, headers, statusText) {\r\n    if (angular.isFunction(status)) return status;\r\n\r\n    return function() {\r\n      return angular.isNumber(status)\r\n          ? [status, data, headers, statusText]\r\n          : [200, status, data, headers];\r\n    };\r\n  }\r\n\r\n  // TODO(vojta): change params to: method, url, data, headers, callback\r\n  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {\r\n\r\n    var xhr = new MockXhr(),\r\n        expectation = expectations[0],\r\n        wasExpected = false;\r\n\r\n    xhr.$$events = eventHandlers;\r\n    xhr.upload.$$events = uploadEventHandlers;\r\n\r\n    function prettyPrint(data) {\r\n      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)\r\n          ? data\r\n          : angular.toJson(data);\r\n    }\r\n\r\n    function wrapResponse(wrapped) {\r\n      if (!$browser && timeout) {\r\n        if (timeout.then) {\r\n          timeout.then(handleTimeout);\r\n        } else {\r\n          $timeout(handleTimeout, timeout);\r\n        }\r\n      }\r\n\r\n      return handleResponse;\r\n\r\n      function handleResponse() {\r\n        var response = wrapped.response(method, url, data, headers, wrapped.params(url));\r\n        xhr.$$respHeaders = response[2];\r\n        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),\r\n                 copy(response[3] || ''));\r\n      }\r\n\r\n      function handleTimeout() {\r\n        for (var i = 0, ii = responses.length; i < ii; i++) {\r\n          if (responses[i] === handleResponse) {\r\n            responses.splice(i, 1);\r\n            callback(-1, undefined, '');\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (expectation && expectation.match(method, url)) {\r\n      if (!expectation.matchData(data)) {\r\n        throw new Error('Expected ' + expectation + ' with different data\\n' +\r\n            'EXPECTED: ' + prettyPrint(expectation.data) + '\\nGOT:      ' + data);\r\n      }\r\n\r\n      if (!expectation.matchHeaders(headers)) {\r\n        throw new Error('Expected ' + expectation + ' with different headers\\n' +\r\n                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\\nGOT:      ' +\r\n                        prettyPrint(headers));\r\n      }\r\n\r\n      expectations.shift();\r\n\r\n      if (expectation.response) {\r\n        responses.push(wrapResponse(expectation));\r\n        return;\r\n      }\r\n      wasExpected = true;\r\n    }\r\n\r\n    var i = -1, definition;\r\n    while ((definition = definitions[++i])) {\r\n      if (definition.match(method, url, data, headers || {})) {\r\n        if (definition.response) {\r\n          // if $browser specified, we do auto flush all requests\r\n          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));\r\n        } else if (definition.passThrough) {\r\n          $delegate(method, url, data, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers);\r\n        } else throw new Error('No response defined !');\r\n        return;\r\n      }\r\n    }\r\n    throw wasExpected ?\r\n        new Error('No response defined !') :\r\n        new Error('Unexpected request: ' + method + ' ' + url + '\\n' +\r\n                  (expectation ? 'Expected ' + expectation : 'No more request expected'));\r\n  }\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#when\r\n   * @description\r\n   * Creates a new backend definition.\r\n   *\r\n   * @param {string} method HTTP method.\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\r\n   *   data string and returns true if the data is as expected.\r\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\r\n   *   object and returns true if the headers match the current definition.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   *\r\n   *  - respond –\r\n   *      ```js\r\n   *      {function([status,] data[, headers, statusText])\r\n   *      | function(function(method, url, data, headers, params)}\r\n   *      ```\r\n   *    – The respond method takes a set of static data to be returned or a function that can\r\n   *    return an array containing response status (number), response data (Array|Object|string),\r\n   *    response headers (Object), and the text for the status (string). The respond method returns\r\n   *    the `requestHandler` object for possible overrides.\r\n   */\r\n  $httpBackend.when = function(method, url, data, headers, keys) {\r\n\r\n    assertArgDefined(arguments, 1, 'url');\r\n\r\n    var definition = new MockHttpExpectation(method, url, data, headers, keys),\r\n        chain = {\r\n          respond: function(status, data, headers, statusText) {\r\n            definition.passThrough = undefined;\r\n            definition.response = createResponse(status, data, headers, statusText);\r\n            return chain;\r\n          }\r\n        };\r\n\r\n    if ($browser) {\r\n      chain.passThrough = function() {\r\n        definition.response = undefined;\r\n        definition.passThrough = true;\r\n        return chain;\r\n      };\r\n    }\r\n\r\n    definitions.push(definition);\r\n    return chain;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenGET\r\n   * @description\r\n   * Creates a new backend definition for GET requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenHEAD\r\n   * @description\r\n   * Creates a new backend definition for HEAD requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenDELETE\r\n   * @description\r\n   * Creates a new backend definition for DELETE requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenPOST\r\n   * @description\r\n   * Creates a new backend definition for POST requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\r\n   *   data string and returns true if the data is as expected.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenPUT\r\n   * @description\r\n   * Creates a new backend definition for PUT requests.  For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\r\n   *   data string and returns true if the data is as expected.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenJSONP\r\n   * @description\r\n   * Creates a new backend definition for JSONP requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n  createShortMethods('when');\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenRoute\r\n   * @description\r\n   * Creates a new backend definition that compares only with the requested route.\r\n   *\r\n   * @param {string} method HTTP method.\r\n   * @param {string} url HTTP url string that supports colon param matching.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled. See #when for more info.\r\n   */\r\n  $httpBackend.whenRoute = function(method, url) {\r\n    var pathObj = parseRoute(url);\r\n    return $httpBackend.when(method, pathObj.regexp, undefined, undefined, pathObj.keys);\r\n  };\r\n\r\n  function parseRoute(url) {\r\n    var ret = {\r\n      regexp: url\r\n    },\r\n    keys = ret.keys = [];\r\n\r\n    if (!url || !angular.isString(url)) return ret;\r\n\r\n    url = url\r\n      .replace(/([().])/g, '\\\\$1')\r\n      .replace(/(\\/)?:(\\w+)([?*])?/g, function(_, slash, key, option) {\r\n        var optional = option === '?' ? option : null;\r\n        var star = option === '*' ? option : null;\r\n        keys.push({ name: key, optional: !!optional });\r\n        slash = slash || '';\r\n        return ''\r\n          + (optional ? '' : slash)\r\n          + '(?:'\r\n          + (optional ? slash : '')\r\n          + (star && '(.+?)' || '([^/]+)')\r\n          + (optional || '')\r\n          + ')'\r\n          + (optional || '');\r\n      })\r\n      .replace(/([/$*])/g, '\\\\$1');\r\n\r\n    ret.regexp = new RegExp('^' + url, 'i');\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expect\r\n   * @description\r\n   * Creates a new request expectation.\r\n   *\r\n   * @param {string} method HTTP method.\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\r\n   *   object and returns true if the headers match the current expectation.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *  request is handled. You can save this object for later use and invoke `respond` again in\r\n   *  order to change how a matched request is handled.\r\n   *\r\n   *  - respond –\r\n   *    ```\r\n   *    { function([status,] data[, headers, statusText])\r\n   *    | function(function(method, url, data, headers, params)}\r\n   *    ```\r\n   *    – The respond method takes a set of static data to be returned or a function that can\r\n   *    return an array containing response status (number), response data (Array|Object|string),\r\n   *    response headers (Object), and the text for the status (string). The respond method returns\r\n   *    the `requestHandler` object for possible overrides.\r\n   */\r\n  $httpBackend.expect = function(method, url, data, headers, keys) {\r\n\r\n    assertArgDefined(arguments, 1, 'url');\r\n\r\n    var expectation = new MockHttpExpectation(method, url, data, headers, keys),\r\n        chain = {\r\n          respond: function(status, data, headers, statusText) {\r\n            expectation.response = createResponse(status, data, headers, statusText);\r\n            return chain;\r\n          }\r\n        };\r\n\r\n    expectations.push(expectation);\r\n    return chain;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectGET\r\n   * @description\r\n   * Creates a new request expectation for GET requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled. See #expect for more info.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectHEAD\r\n   * @description\r\n   * Creates a new request expectation for HEAD requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectDELETE\r\n   * @description\r\n   * Creates a new request expectation for DELETE requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectPOST\r\n   * @description\r\n   * Creates a new request expectation for POST requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectPUT\r\n   * @description\r\n   * Creates a new request expectation for PUT requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectPATCH\r\n   * @description\r\n   * Creates a new request expectation for PATCH requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectJSONP\r\n   * @description\r\n   * Creates a new request expectation for JSONP requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)=} url HTTP url or function that receives an url\r\n   *   and returns true if the url matches the current definition.\r\n   * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n  createShortMethods('expect');\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectRoute\r\n   * @description\r\n   * Creates a new request expectation that compares only with the requested route.\r\n   *\r\n   * @param {string} method HTTP method.\r\n   * @param {string} url HTTP url string that supports colon param matching.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled. See #expect for more info.\r\n   */\r\n  $httpBackend.expectRoute = function(method, url) {\r\n    var pathObj = parseRoute(url);\r\n    return $httpBackend.expect(method, pathObj.regexp, undefined, undefined, pathObj.keys);\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#flush\r\n   * @description\r\n   * Flushes pending requests using the trained responses. Requests are flushed in the order they\r\n   * were made, but it is also possible to skip one or more requests (for example to have them\r\n   * flushed later). This is useful for simulating scenarios where responses arrive from the server\r\n   * in any order.\r\n   *\r\n   * If there are no pending requests to flush when the method is called, an exception is thrown (as\r\n   * this is typically a sign of programming error).\r\n   *\r\n   * @param {number=} count - Number of responses to flush. If undefined/null, all pending requests\r\n   *     (starting after `skip`) will be flushed.\r\n   * @param {number=} [skip=0] - Number of pending requests to skip. For example, a value of `5`\r\n   *     would skip the first 5 pending requests and start flushing from the 6th onwards.\r\n   */\r\n  $httpBackend.flush = function(count, skip, digest) {\r\n    if (digest !== false) $rootScope.$digest();\r\n\r\n    skip = skip || 0;\r\n    if (skip >= responses.length) throw new Error('No pending request to flush !');\r\n\r\n    if (angular.isDefined(count) && count !== null) {\r\n      while (count--) {\r\n        var part = responses.splice(skip, 1);\r\n        if (!part.length) throw new Error('No more pending request to flush !');\r\n        part[0]();\r\n      }\r\n    } else {\r\n      while (responses.length > skip) {\r\n        responses.splice(skip, 1)[0]();\r\n      }\r\n    }\r\n    $httpBackend.verifyNoOutstandingExpectation(digest);\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#verifyNoOutstandingExpectation\r\n   * @description\r\n   * Verifies that all of the requests defined via the `expect` api were made. If any of the\r\n   * requests were not made, verifyNoOutstandingExpectation throws an exception.\r\n   *\r\n   * Typically, you would call this method following each test case that asserts requests using an\r\n   * \"afterEach\" clause.\r\n   *\r\n   * ```js\r\n   *   afterEach($httpBackend.verifyNoOutstandingExpectation);\r\n   * ```\r\n   */\r\n  $httpBackend.verifyNoOutstandingExpectation = function(digest) {\r\n    if (digest !== false) $rootScope.$digest();\r\n    if (expectations.length) {\r\n      throw new Error('Unsatisfied requests: ' + expectations.join(', '));\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#verifyNoOutstandingRequest\r\n   * @description\r\n   * Verifies that there are no outstanding requests that need to be flushed.\r\n   *\r\n   * Typically, you would call this method following each test case that asserts requests using an\r\n   * \"afterEach\" clause.\r\n   *\r\n   * ```js\r\n   *   afterEach($httpBackend.verifyNoOutstandingRequest);\r\n   * ```\r\n   */\r\n  $httpBackend.verifyNoOutstandingRequest = function(digest) {\r\n    if (digest !== false) $rootScope.$digest();\r\n    if (responses.length) {\r\n      throw new Error('Unflushed requests: ' + responses.length);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#resetExpectations\r\n   * @description\r\n   * Resets all request expectations, but preserves all backend definitions. Typically, you would\r\n   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of\r\n   * $httpBackend mock.\r\n   */\r\n  $httpBackend.resetExpectations = function() {\r\n    expectations.length = 0;\r\n    responses.length = 0;\r\n  };\r\n\r\n  return $httpBackend;\r\n\r\n\r\n  function createShortMethods(prefix) {\r\n    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {\r\n     $httpBackend[prefix + method] = function(url, headers, keys) {\r\n        assertArgDefined(arguments, 0, 'url');\r\n\r\n        // Change url to `null` if `undefined` to stop it throwing an exception further down\r\n        if (angular.isUndefined(url)) url = null;\r\n\r\n       return $httpBackend[prefix](method, url, undefined, headers, keys);\r\n     };\r\n    });\r\n\r\n    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {\r\n      $httpBackend[prefix + method] = function(url, data, headers, keys) {\r\n        assertArgDefined(arguments, 0, 'url');\r\n\r\n        // Change url to `null` if `undefined` to stop it throwing an exception further down\r\n        if (angular.isUndefined(url)) url = null;\r\n\r\n        return $httpBackend[prefix](method, url, data, headers, keys);\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nfunction assertArgDefined(args, index, name) {\r\n  if (args.length > index && angular.isUndefined(args[index])) {\r\n    throw new Error('Undefined argument `' + name + '`; the argument is provided but not defined');\r\n  }\r\n}\r\n\r\n\r\nfunction MockHttpExpectation(method, url, data, headers, keys) {\r\n\r\n  function getUrlParams(u) {\r\n    var params = u.slice(u.indexOf('?') + 1).split('&');\r\n    return params.sort();\r\n  }\r\n\r\n  function compareUrl(u) {\r\n    return (url.slice(0, url.indexOf('?')) === u.slice(0, u.indexOf('?')) &&\r\n      getUrlParams(url).join() === getUrlParams(u).join());\r\n  }\r\n\r\n  this.data = data;\r\n  this.headers = headers;\r\n\r\n  this.match = function(m, u, d, h) {\r\n    if (method !== m) return false;\r\n    if (!this.matchUrl(u)) return false;\r\n    if (angular.isDefined(d) && !this.matchData(d)) return false;\r\n    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;\r\n    return true;\r\n  };\r\n\r\n  this.matchUrl = function(u) {\r\n    if (!url) return true;\r\n    if (angular.isFunction(url.test)) return url.test(u);\r\n    if (angular.isFunction(url)) return url(u);\r\n    return (url === u || compareUrl(u));\r\n  };\r\n\r\n  this.matchHeaders = function(h) {\r\n    if (angular.isUndefined(headers)) return true;\r\n    if (angular.isFunction(headers)) return headers(h);\r\n    return angular.equals(headers, h);\r\n  };\r\n\r\n  this.matchData = function(d) {\r\n    if (angular.isUndefined(data)) return true;\r\n    if (data && angular.isFunction(data.test)) return data.test(d);\r\n    if (data && angular.isFunction(data)) return data(d);\r\n    if (data && !angular.isString(data)) {\r\n      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));\r\n    }\r\n    // eslint-disable-next-line eqeqeq\r\n    return data == d;\r\n  };\r\n\r\n  this.toString = function() {\r\n    return method + ' ' + url;\r\n  };\r\n\r\n  this.params = function(u) {\r\n    return angular.extend(parseQuery(), pathParams());\r\n\r\n    function pathParams() {\r\n      var keyObj = {};\r\n      if (!url || !angular.isFunction(url.test) || !keys || keys.length === 0) return keyObj;\r\n\r\n      var m = url.exec(u);\r\n      if (!m) return keyObj;\r\n      for (var i = 1, len = m.length; i < len; ++i) {\r\n        var key = keys[i - 1];\r\n        var val = m[i];\r\n        if (key && val) {\r\n          keyObj[key.name || key] = val;\r\n        }\r\n      }\r\n\r\n      return keyObj;\r\n    }\r\n\r\n    function parseQuery() {\r\n      var obj = {}, key_value, key,\r\n          queryStr = u.indexOf('?') > -1\r\n          ? u.substring(u.indexOf('?') + 1)\r\n          : '';\r\n\r\n      angular.forEach(queryStr.split('&'), function(keyValue) {\r\n        if (keyValue) {\r\n          key_value = keyValue.replace(/\\+/g,'%20').split('=');\r\n          key = tryDecodeURIComponent(key_value[0]);\r\n          if (angular.isDefined(key)) {\r\n            var val = angular.isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;\r\n            if (!hasOwnProperty.call(obj, key)) {\r\n              obj[key] = val;\r\n            } else if (angular.isArray(obj[key])) {\r\n              obj[key].push(val);\r\n            } else {\r\n              obj[key] = [obj[key],val];\r\n            }\r\n          }\r\n        }\r\n      });\r\n      return obj;\r\n    }\r\n    function tryDecodeURIComponent(value) {\r\n      try {\r\n        return decodeURIComponent(value);\r\n      } catch (e) {\r\n        // Ignore any invalid uri component\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction createMockXhr() {\r\n  return new MockXhr();\r\n}\r\n\r\nfunction MockXhr() {\r\n\r\n  // hack for testing $http, $httpBackend\r\n  MockXhr.$$lastInstance = this;\r\n\r\n  this.open = function(method, url, async) {\r\n    this.$$method = method;\r\n    this.$$url = url;\r\n    this.$$async = async;\r\n    this.$$reqHeaders = {};\r\n    this.$$respHeaders = {};\r\n  };\r\n\r\n  this.send = function(data) {\r\n    this.$$data = data;\r\n  };\r\n\r\n  this.setRequestHeader = function(key, value) {\r\n    this.$$reqHeaders[key] = value;\r\n  };\r\n\r\n  this.getResponseHeader = function(name) {\r\n    // the lookup must be case insensitive,\r\n    // that's why we try two quick lookups first and full scan last\r\n    var header = this.$$respHeaders[name];\r\n    if (header) return header;\r\n\r\n    name = angular.lowercase(name);\r\n    header = this.$$respHeaders[name];\r\n    if (header) return header;\r\n\r\n    header = undefined;\r\n    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {\r\n      if (!header && angular.lowercase(headerName) === name) header = headerVal;\r\n    });\r\n    return header;\r\n  };\r\n\r\n  this.getAllResponseHeaders = function() {\r\n    var lines = [];\r\n\r\n    angular.forEach(this.$$respHeaders, function(value, key) {\r\n      lines.push(key + ': ' + value);\r\n    });\r\n    return lines.join('\\n');\r\n  };\r\n\r\n  this.abort = angular.noop;\r\n\r\n  // This section simulates the events on a real XHR object (and the upload object)\r\n  // When we are testing $httpBackend (inside the angular project) we make partial use of this\r\n  // but store the events directly ourselves on `$$events`, instead of going through the `addEventListener`\r\n  this.$$events = {};\r\n  this.addEventListener = function(name, listener) {\r\n    if (angular.isUndefined(this.$$events[name])) this.$$events[name] = [];\r\n    this.$$events[name].push(listener);\r\n  };\r\n\r\n  this.upload = {\r\n    $$events: {},\r\n    addEventListener: this.addEventListener\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $timeout\r\n * @description\r\n *\r\n * This service is just a simple decorator for {@link ng.$timeout $timeout} service\r\n * that adds a \"flush\" and \"verifyNoPendingTasks\" methods.\r\n */\r\n\r\nangular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $timeout#flush\r\n   * @description\r\n   *\r\n   * Flushes the queue of pending tasks.\r\n   *\r\n   * @param {number=} delay maximum timeout amount to flush up until\r\n   */\r\n  $delegate.flush = function(delay) {\r\n    $browser.defer.flush(delay);\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $timeout#verifyNoPendingTasks\r\n   * @description\r\n   *\r\n   * Verifies that there are no pending tasks that need to be flushed.\r\n   */\r\n  $delegate.verifyNoPendingTasks = function() {\r\n    if ($browser.deferredFns.length) {\r\n      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +\r\n          formatPendingTasksAsString($browser.deferredFns));\r\n    }\r\n  };\r\n\r\n  function formatPendingTasksAsString(tasks) {\r\n    var result = [];\r\n    angular.forEach(tasks, function(task) {\r\n      result.push('{id: ' + task.id + ', time: ' + task.time + '}');\r\n    });\r\n\r\n    return result.join(', ');\r\n  }\r\n\r\n  return $delegate;\r\n}];\r\n\r\nangular.mock.$RAFDecorator = ['$delegate', function($delegate) {\r\n  var rafFn = function(fn) {\r\n    var index = rafFn.queue.length;\r\n    rafFn.queue.push(fn);\r\n    return function() {\r\n      rafFn.queue.splice(index, 1);\r\n    };\r\n  };\r\n\r\n  rafFn.queue = [];\r\n  rafFn.supported = $delegate.supported;\r\n\r\n  rafFn.flush = function() {\r\n    if (rafFn.queue.length === 0) {\r\n      throw new Error('No rAF callbacks present');\r\n    }\r\n\r\n    var length = rafFn.queue.length;\r\n    for (var i = 0; i < length; i++) {\r\n      rafFn.queue[i]();\r\n    }\r\n\r\n    rafFn.queue = rafFn.queue.slice(i);\r\n  };\r\n\r\n  return rafFn;\r\n}];\r\n\r\n/**\r\n *\r\n */\r\nvar originalRootElement;\r\nangular.mock.$RootElementProvider = function() {\r\n  this.$get = ['$injector', function($injector) {\r\n    originalRootElement = angular.element('<div ng-app></div>').data('$injector', $injector);\r\n    return originalRootElement;\r\n  }];\r\n};\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $controller\r\n * @description\r\n * A decorator for {@link ng.$controller} with additional `bindings` parameter, useful when testing\r\n * controllers of directives that use {@link $compile#-bindtocontroller- `bindToController`}.\r\n *\r\n * Depending on the value of\r\n * {@link ng.$compileProvider#preAssignBindingsEnabled `preAssignBindingsEnabled()`}, the properties\r\n * will be bound before or after invoking the constructor.\r\n *\r\n *\r\n * ## Example\r\n *\r\n * ```js\r\n *\r\n * // Directive definition ...\r\n *\r\n * myMod.directive('myDirective', {\r\n *   controller: 'MyDirectiveController',\r\n *   bindToController: {\r\n *     name: '@'\r\n *   }\r\n * });\r\n *\r\n *\r\n * // Controller definition ...\r\n *\r\n * myMod.controller('MyDirectiveController', ['$log', function($log) {\r\n *   this.log = function() {\r\n *     $log.info(this.name);\r\n *   };\r\n * }]);\r\n *\r\n *\r\n * // In a test ...\r\n *\r\n * describe('myDirectiveController', function() {\r\n *   describe('log()', function() {\r\n *     it('should write the bound name to the log', inject(function($controller, $log) {\r\n *       var ctrl = $controller('MyDirectiveController', { /* no locals &#42;/ }, { name: 'Clark Kent' });\r\n *       ctrl.log();\r\n *\r\n *       expect(ctrl.name).toEqual('Clark Kent');\r\n *       expect($log.info.logs).toEqual(['Clark Kent']);\r\n *     }));\r\n *   });\r\n * });\r\n *\r\n * ```\r\n *\r\n * @param {Function|string} constructor If called with a function then it's considered to be the\r\n *    controller constructor function. Otherwise it's considered to be a string which is used\r\n *    to retrieve the controller constructor using the following steps:\r\n *\r\n *    * check if a controller with given name is registered via `$controllerProvider`\r\n *    * check if evaluating the string on the current scope returns a constructor\r\n *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global\r\n *      `window` object (deprecated, not recommended)\r\n *\r\n *    The string can use the `controller as property` syntax, where the controller instance is published\r\n *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this\r\n *    to work correctly.\r\n *\r\n * @param {Object} locals Injection locals for Controller.\r\n * @param {Object=} bindings Properties to add to the controller instance. This is used to simulate\r\n *                           the `bindToController` feature and simplify certain kinds of tests.\r\n * @return {Object} Instance of given controller.\r\n */\r\nfunction createControllerDecorator(compileProvider) {\r\n  angular.mock.$ControllerDecorator = ['$delegate', function($delegate) {\r\n    return function(expression, locals, later, ident) {\r\n      if (later && typeof later === 'object') {\r\n        var preAssignBindingsEnabled = compileProvider.preAssignBindingsEnabled();\r\n\r\n        var instantiate = $delegate(expression, locals, true, ident);\r\n        if (preAssignBindingsEnabled) {\r\n          angular.extend(instantiate.instance, later);\r\n        }\r\n\r\n        var instance = instantiate();\r\n        if (!preAssignBindingsEnabled || instance !== instantiate.instance) {\r\n          angular.extend(instance, later);\r\n        }\r\n\r\n        return instance;\r\n      }\r\n      return $delegate(expression, locals, later, ident);\r\n    };\r\n  }];\r\n\r\n  return angular.mock.$ControllerDecorator;\r\n}\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $componentController\r\n * @description\r\n * A service that can be used to create instances of component controllers. Useful for unit-testing.\r\n *\r\n * Be aware that the controller will be instantiated and attached to the scope as specified in\r\n * the component definition object. If you do not provide a `$scope` object in the `locals` param\r\n * then the helper will create a new isolated scope as a child of `$rootScope`.\r\n *\r\n * If you are using `$element` or `$attrs` in the controller, make sure to provide them as `locals`.\r\n * The `$element` must be a jqLite-wrapped DOM element, and `$attrs` should be an object that\r\n * has all properties / functions that you are using in the controller. If this is getting too complex,\r\n * you should compile the component instead and access the component's controller via the\r\n * {@link angular.element#methods `controller`} function.\r\n *\r\n * See also the section on {@link guide/component#unit-testing-component-controllers unit-testing component controllers}\r\n * in the guide.\r\n *\r\n * @param {string} componentName the name of the component whose controller we want to instantiate\r\n * @param {Object} locals Injection locals for Controller.\r\n * @param {Object=} bindings Properties to add to the controller before invoking the constructor. This is used\r\n *                           to simulate the `bindToController` feature and simplify certain kinds of tests.\r\n * @param {string=} ident Override the property name to use when attaching the controller to the scope.\r\n * @return {Object} Instance of requested controller.\r\n */\r\nangular.mock.$ComponentControllerProvider = ['$compileProvider',\r\n    function ComponentControllerProvider($compileProvider) {\r\n  this.$get = ['$controller','$injector', '$rootScope', function($controller, $injector, $rootScope) {\r\n    return function $componentController(componentName, locals, bindings, ident) {\r\n      // get all directives associated to the component name\r\n      var directives = $injector.get(componentName + 'Directive');\r\n      // look for those directives that are components\r\n      var candidateDirectives = directives.filter(function(directiveInfo) {\r\n        // components have controller, controllerAs and restrict:'E'\r\n        return directiveInfo.controller && directiveInfo.controllerAs && directiveInfo.restrict === 'E';\r\n      });\r\n      // check if valid directives found\r\n      if (candidateDirectives.length === 0) {\r\n        throw new Error('No component found');\r\n      }\r\n      if (candidateDirectives.length > 1) {\r\n        throw new Error('Too many components found');\r\n      }\r\n      // get the info of the component\r\n      var directiveInfo = candidateDirectives[0];\r\n      // create a scope if needed\r\n      locals = locals || {};\r\n      locals.$scope = locals.$scope || $rootScope.$new(true);\r\n      return $controller(directiveInfo.controller, locals, bindings, ident || directiveInfo.controllerAs);\r\n    };\r\n  }];\r\n}];\r\n\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngMock\r\n * @packageName angular-mocks\r\n * @description\r\n *\r\n * # ngMock\r\n *\r\n * The `ngMock` module provides support to inject and mock Angular services into unit tests.\r\n * In addition, ngMock also extends various core ng services such that they can be\r\n * inspected and controlled in a synchronous manner within test code.\r\n *\r\n *\r\n * <div doc-module-components=\"ngMock\"></div>\r\n *\r\n * @installation\r\n *\r\n *  First, download the file:\r\n *  * [Google CDN](https://developers.google.com/speed/libraries/devguide#angularjs) e.g.\r\n *    `\"//ajax.googleapis.com/ajax/libs/angularjs/X.Y.Z/angular-mocks.js\"`\r\n *  * [NPM](https://www.npmjs.com/) e.g. `npm install angular-mocks@X.Y.Z`\r\n *  * [Yarn](https://yarnpkg.com) e.g. `yarn add angular-mocks@X.Y.Z`\r\n *  * [Bower](http://bower.io) e.g. `bower install angular-mocks#X.Y.Z`\r\n *  * [code.angularjs.org](https://code.angularjs.org/) (discouraged for production use)  e.g.\r\n *    `\"//code.angularjs.org/X.Y.Z/angular-mocks.js\"`\r\n *\r\n * where X.Y.Z is the AngularJS version you are running.\r\n *\r\n * Then, configure your test runner to load `angular-mocks.js` after `angular.js`.\r\n * This example uses <a href=\"http://karma-runner.github.io/\">Karma</a>:\r\n *\r\n * ```\r\n * config.set({\r\n *   files: [\r\n *     'build/angular.js', // and other module files you need\r\n *     'build/angular-mocks.js',\r\n *     '<path/to/application/files>',\r\n *     '<path/to/spec/files>'\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * Including the `angular-mocks.js` file automatically adds the `ngMock` module, so your tests\r\n *  are ready to go!\r\n */\r\nangular.module('ngMock', ['ng']).provider({\r\n  $browser: angular.mock.$BrowserProvider,\r\n  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,\r\n  $log: angular.mock.$LogProvider,\r\n  $interval: angular.mock.$IntervalProvider,\r\n  $httpBackend: angular.mock.$HttpBackendProvider,\r\n  $rootElement: angular.mock.$RootElementProvider,\r\n  $componentController: angular.mock.$ComponentControllerProvider\r\n}).config(['$provide', '$compileProvider', function($provide, $compileProvider) {\r\n  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);\r\n  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);\r\n  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);\r\n  $provide.decorator('$controller', createControllerDecorator($compileProvider));\r\n}]);\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngMockE2E\r\n * @module ngMockE2E\r\n * @packageName angular-mocks\r\n * @description\r\n *\r\n * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.\r\n * Currently there is only one mock present in this module -\r\n * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.\r\n */\r\nangular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {\r\n  $provide.value('$httpBackend', angular.injector(['ng']).get('$httpBackend'));\r\n  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);\r\n}]);\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $httpBackend\r\n * @module ngMockE2E\r\n * @description\r\n * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of\r\n * applications that use the {@link ng.$http $http service}.\r\n *\r\n * <div class=\"alert alert-info\">\r\n * **Note**: For fake http backend implementation suitable for unit testing please see\r\n * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.\r\n * </div>\r\n *\r\n * This implementation can be used to respond with static or dynamic responses via the `when` api\r\n * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the\r\n * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch\r\n * templates from a webserver).\r\n *\r\n * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application\r\n * is being developed with the real backend api replaced with a mock, it is often desirable for\r\n * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch\r\n * templates or static files from the webserver). To configure the backend with this behavior\r\n * use the `passThrough` request handler of `when` instead of `respond`.\r\n *\r\n * Additionally, we don't want to manually have to flush mocked out requests like we do during unit\r\n * testing. For this reason the e2e $httpBackend flushes mocked out requests\r\n * automatically, closely simulating the behavior of the XMLHttpRequest object.\r\n *\r\n * To setup the application to run with this http backend, you have to create a module that depends\r\n * on the `ngMockE2E` and your application modules and defines the fake backend:\r\n *\r\n * ```js\r\n *   var myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\r\n *   myAppDev.run(function($httpBackend) {\r\n *     var phones = [{name: 'phone1'}, {name: 'phone2'}];\r\n *\r\n *     // returns the current list of phones\r\n *     $httpBackend.whenGET('/phones').respond(phones);\r\n *\r\n *     // adds a new phone to the phones array\r\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\r\n *       var phone = angular.fromJson(data);\r\n *       phones.push(phone);\r\n *       return [200, phone, {}];\r\n *     });\r\n *     $httpBackend.whenGET(/^\\/templates\\//).passThrough(); // Requests for templates are handled by the real server\r\n *     //...\r\n *   });\r\n * ```\r\n *\r\n * Afterwards, bootstrap your app with this new module.\r\n *\r\n * ## Example\r\n * <example name=\"httpbackend-e2e-testing\" module=\"myAppE2E\" deps=\"angular-mocks.js\">\r\n * <file name=\"app.js\">\r\n *   var myApp = angular.module('myApp', []);\r\n *\r\n *   myApp.controller('MainCtrl', function MainCtrl($http) {\r\n *     var ctrl = this;\r\n *\r\n *     ctrl.phones = [];\r\n *     ctrl.newPhone = {\r\n *       name: ''\r\n *     };\r\n *\r\n *     ctrl.getPhones = function() {\r\n *       $http.get('/phones').then(function(response) {\r\n *         ctrl.phones = response.data;\r\n *       });\r\n *     };\r\n *\r\n *     ctrl.addPhone = function(phone) {\r\n *       $http.post('/phones', phone).then(function() {\r\n *         ctrl.newPhone = {name: ''};\r\n *         return ctrl.getPhones();\r\n *       });\r\n *     };\r\n *\r\n *     ctrl.getPhones();\r\n *   });\r\n * </file>\r\n * <file name=\"e2e.js\">\r\n *   var myAppDev = angular.module('myAppE2E', ['myApp', 'ngMockE2E']);\r\n *\r\n *   myAppDev.run(function($httpBackend) {\r\n *     var phones = [{name: 'phone1'}, {name: 'phone2'}];\r\n *\r\n *     // returns the current list of phones\r\n *     $httpBackend.whenGET('/phones').respond(phones);\r\n *\r\n *     // adds a new phone to the phones array\r\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\r\n *       var phone = angular.fromJson(data);\r\n *       phones.push(phone);\r\n *       return [200, phone, {}];\r\n *     });\r\n *   });\r\n * </file>\r\n * <file name=\"index.html\">\r\n *   <div ng-controller=\"MainCtrl as $ctrl\">\r\n *   <form name=\"newPhoneForm\" ng-submit=\"$ctrl.addPhone($ctrl.newPhone)\">\r\n *     <input type=\"text\" ng-model=\"$ctrl.newPhone.name\">\r\n *     <input type=\"submit\" value=\"Add Phone\">\r\n *   </form>\r\n *   <h1>Phones</h1>\r\n *   <ul>\r\n *     <li ng-repeat=\"phone in $ctrl.phones\">{{phone.name}}</li>\r\n *   </ul>\r\n *   </div>\r\n * </file>\r\n * </example>\r\n *\r\n *\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#when\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition.\r\n *\r\n * @param {string} method HTTP method.\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\r\n *   object and returns true if the headers match the current definition.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n *\r\n *  - respond –\r\n *    ```\r\n *    { function([status,] data[, headers, statusText])\r\n *    | function(function(method, url, data, headers, params)}\r\n *    ```\r\n *    – The respond method takes a set of static data to be returned or a function that can return\r\n *    an array containing response status (number), response data (Array|Object|string), response\r\n *    headers (Object), and the text for the status (string).\r\n *  - passThrough – `{function()}` – Any request matching a backend definition with\r\n *    `passThrough` handler will be passed through to the real backend (an XHR request will be made\r\n *    to the server.)\r\n *  - Both methods return the `requestHandler` object for possible overrides.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenGET\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for GET requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenHEAD\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for HEAD requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenDELETE\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for DELETE requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenPOST\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for POST requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenPUT\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for PUT requests.  For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenPATCH\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for PATCH requests.  For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenJSONP\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for JSONP requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)=} url HTTP url or function that receives a url\r\n *   and returns true if the url matches the current definition.\r\n * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on\r\n *   {@link ngMock.$httpBackend $httpBackend mock}.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenRoute\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition that compares only with the requested route.\r\n *\r\n * @param {string} method HTTP method.\r\n * @param {string} url HTTP url string that supports colon param matching.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\nangular.mock.e2e = {};\r\nangular.mock.e2e.$httpBackendDecorator =\r\n  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];\r\n\r\n\r\n/**\r\n * @ngdoc type\r\n * @name $rootScope.Scope\r\n * @module ngMock\r\n * @description\r\n * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These\r\n * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when\r\n * `ngMock` module is loaded.\r\n *\r\n * In addition to all the regular `Scope` methods, the following helper methods are available:\r\n */\r\nangular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {\r\n\r\n  var $rootScopePrototype = Object.getPrototypeOf($delegate);\r\n\r\n  $rootScopePrototype.$countChildScopes = countChildScopes;\r\n  $rootScopePrototype.$countWatchers = countWatchers;\r\n\r\n  return $delegate;\r\n\r\n  // ------------------------------------------------------------------------------------------ //\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $rootScope.Scope#$countChildScopes\r\n   * @module ngMock\r\n   * @this $rootScope.Scope\r\n   * @description\r\n   * Counts all the direct and indirect child scopes of the current scope.\r\n   *\r\n   * The current scope is excluded from the count. The count includes all isolate child scopes.\r\n   *\r\n   * @returns {number} Total number of child scopes.\r\n   */\r\n  function countChildScopes() {\r\n    var count = 0; // exclude the current scope\r\n    var pendingChildHeads = [this.$$childHead];\r\n    var currentScope;\r\n\r\n    while (pendingChildHeads.length) {\r\n      currentScope = pendingChildHeads.shift();\r\n\r\n      while (currentScope) {\r\n        count += 1;\r\n        pendingChildHeads.push(currentScope.$$childHead);\r\n        currentScope = currentScope.$$nextSibling;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $rootScope.Scope#$countWatchers\r\n   * @this $rootScope.Scope\r\n   * @module ngMock\r\n   * @description\r\n   * Counts all the watchers of direct and indirect child scopes of the current scope.\r\n   *\r\n   * The watchers of the current scope are included in the count and so are all the watchers of\r\n   * isolate child scopes.\r\n   *\r\n   * @returns {number} Total number of watchers.\r\n   */\r\n  function countWatchers() {\r\n    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope\r\n    var pendingChildHeads = [this.$$childHead];\r\n    var currentScope;\r\n\r\n    while (pendingChildHeads.length) {\r\n      currentScope = pendingChildHeads.shift();\r\n\r\n      while (currentScope) {\r\n        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;\r\n        pendingChildHeads.push(currentScope.$$childHead);\r\n        currentScope = currentScope.$$nextSibling;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n}];\r\n\r\n\r\n(function(jasmineOrMocha) {\r\n\r\n  if (!jasmineOrMocha) {\r\n    return;\r\n  }\r\n\r\n  var currentSpec = null,\r\n      injectorState = new InjectorState(),\r\n      annotatedFunctions = [],\r\n      wasInjectorCreated = function() {\r\n        return !!currentSpec;\r\n      };\r\n\r\n  angular.mock.$$annotate = angular.injector.$$annotate;\r\n  angular.injector.$$annotate = function(fn) {\r\n    if (typeof fn === 'function' && !fn.$inject) {\r\n      annotatedFunctions.push(fn);\r\n    }\r\n    return angular.mock.$$annotate.apply(this, arguments);\r\n  };\r\n\r\n  /**\r\n   * @ngdoc function\r\n   * @name angular.mock.module\r\n   * @description\r\n   *\r\n   * *NOTE*: This function is also published on window for easy access.<br>\r\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n   *\r\n   * This function registers a module configuration code. It collects the configuration information\r\n   * which will be used when the injector is created by {@link angular.mock.inject inject}.\r\n   *\r\n   * See {@link angular.mock.inject inject} for usage example\r\n   *\r\n   * @param {...(string|Function|Object)} fns any number of modules which are represented as string\r\n   *        aliases or as anonymous module initialization functions. The modules are used to\r\n   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\r\n   *        object literal is passed each key-value pair will be registered on the module via\r\n   *        {@link auto.$provide $provide}.value, the key being the string name (or token) to associate\r\n   *        with the value on the injector.\r\n   */\r\n  var module = window.module = angular.mock.module = function() {\r\n    var moduleFns = Array.prototype.slice.call(arguments, 0);\r\n    return wasInjectorCreated() ? workFn() : workFn;\r\n    /////////////////////\r\n    function workFn() {\r\n      if (currentSpec.$injector) {\r\n        throw new Error('Injector already created, can not register a module!');\r\n      } else {\r\n        var fn, modules = currentSpec.$modules || (currentSpec.$modules = []);\r\n        angular.forEach(moduleFns, function(module) {\r\n          if (angular.isObject(module) && !angular.isArray(module)) {\r\n            fn = ['$provide', function($provide) {\r\n              angular.forEach(module, function(value, key) {\r\n                $provide.value(key, value);\r\n              });\r\n            }];\r\n          } else {\r\n            fn = module;\r\n          }\r\n          if (currentSpec.$providerInjector) {\r\n            currentSpec.$providerInjector.invoke(fn);\r\n          } else {\r\n            modules.push(fn);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  module.$$beforeAllHook = (window.before || window.beforeAll);\r\n  module.$$afterAllHook = (window.after || window.afterAll);\r\n\r\n  // purely for testing ngMock itself\r\n  module.$$currentSpec = function(to) {\r\n    if (arguments.length === 0) return to;\r\n    currentSpec = to;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc function\r\n   * @name angular.mock.module.sharedInjector\r\n   * @description\r\n   *\r\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n   *\r\n   * This function ensures a single injector will be used for all tests in a given describe context.\r\n   * This contrasts with the default behaviour where a new injector is created per test case.\r\n   *\r\n   * Use sharedInjector when you want to take advantage of Jasmine's `beforeAll()`, or mocha's\r\n   * `before()` methods. Call `module.sharedInjector()` before you setup any other hooks that\r\n   * will create (i.e call `module()`) or use (i.e call `inject()`) the injector.\r\n   *\r\n   * You cannot call `sharedInjector()` from within a context already using `sharedInjector()`.\r\n   *\r\n   * ## Example\r\n   *\r\n   * Typically beforeAll is used to make many assertions about a single operation. This can\r\n   * cut down test run-time as the test setup doesn't need to be re-run, and enabling focussed\r\n   * tests each with a single assertion.\r\n   *\r\n   * ```js\r\n   * describe(\"Deep Thought\", function() {\r\n   *\r\n   *   module.sharedInjector();\r\n   *\r\n   *   beforeAll(module(\"UltimateQuestion\"));\r\n   *\r\n   *   beforeAll(inject(function(DeepThought) {\r\n   *     expect(DeepThought.answer).toBeUndefined();\r\n   *     DeepThought.generateAnswer();\r\n   *   }));\r\n   *\r\n   *   it(\"has calculated the answer correctly\", inject(function(DeepThought) {\r\n   *     // Because of sharedInjector, we have access to the instance of the DeepThought service\r\n   *     // that was provided to the beforeAll() hook. Therefore we can test the generated answer\r\n   *     expect(DeepThought.answer).toBe(42);\r\n   *   }));\r\n   *\r\n   *   it(\"has calculated the answer within the expected time\", inject(function(DeepThought) {\r\n   *     expect(DeepThought.runTimeMillennia).toBeLessThan(8000);\r\n   *   }));\r\n   *\r\n   *   it(\"has double checked the answer\", inject(function(DeepThought) {\r\n   *     expect(DeepThought.absolutelySureItIsTheRightAnswer).toBe(true);\r\n   *   }));\r\n   *\r\n   * });\r\n   *\r\n   * ```\r\n   */\r\n  module.sharedInjector = function() {\r\n    if (!(module.$$beforeAllHook && module.$$afterAllHook)) {\r\n      throw Error('sharedInjector() cannot be used unless your test runner defines beforeAll/afterAll');\r\n    }\r\n\r\n    var initialized = false;\r\n\r\n    module.$$beforeAllHook(/** @this */ function() {\r\n      if (injectorState.shared) {\r\n        injectorState.sharedError = Error('sharedInjector() cannot be called inside a context that has already called sharedInjector()');\r\n        throw injectorState.sharedError;\r\n      }\r\n      initialized = true;\r\n      currentSpec = this;\r\n      injectorState.shared = true;\r\n    });\r\n\r\n    module.$$afterAllHook(function() {\r\n      if (initialized) {\r\n        injectorState = new InjectorState();\r\n        module.$$cleanup();\r\n      } else {\r\n        injectorState.sharedError = null;\r\n      }\r\n    });\r\n  };\r\n\r\n  module.$$beforeEach = function() {\r\n    if (injectorState.shared && currentSpec && currentSpec !== this) {\r\n      var state = currentSpec;\r\n      currentSpec = this;\r\n      angular.forEach(['$injector','$modules','$providerInjector', '$injectorStrict'], function(k) {\r\n        currentSpec[k] = state[k];\r\n        state[k] = null;\r\n      });\r\n    } else {\r\n      currentSpec = this;\r\n      originalRootElement = null;\r\n      annotatedFunctions = [];\r\n    }\r\n  };\r\n\r\n  module.$$afterEach = function() {\r\n    if (injectorState.cleanupAfterEach()) {\r\n      module.$$cleanup();\r\n    }\r\n  };\r\n\r\n  module.$$cleanup = function() {\r\n    var injector = currentSpec.$injector;\r\n\r\n    annotatedFunctions.forEach(function(fn) {\r\n      delete fn.$inject;\r\n    });\r\n\r\n    angular.forEach(currentSpec.$modules, function(module) {\r\n      if (module && module.$$hashKey) {\r\n        module.$$hashKey = undefined;\r\n      }\r\n    });\r\n\r\n    currentSpec.$injector = null;\r\n    currentSpec.$modules = null;\r\n    currentSpec.$providerInjector = null;\r\n    currentSpec = null;\r\n\r\n    if (injector) {\r\n      // Ensure `$rootElement` is instantiated, before checking `originalRootElement`\r\n      var $rootElement = injector.get('$rootElement');\r\n      var rootNode = $rootElement && $rootElement[0];\r\n      var cleanUpNodes = !originalRootElement ? [] : [originalRootElement[0]];\r\n      if (rootNode && (!originalRootElement || rootNode !== originalRootElement[0])) {\r\n        cleanUpNodes.push(rootNode);\r\n      }\r\n      angular.element.cleanData(cleanUpNodes);\r\n\r\n      // Ensure `$destroy()` is available, before calling it\r\n      // (a mocked `$rootScope` might not implement it (or not even be an object at all))\r\n      var $rootScope = injector.get('$rootScope');\r\n      if ($rootScope && $rootScope.$destroy) $rootScope.$destroy();\r\n    }\r\n\r\n    // clean up jquery's fragment cache\r\n    angular.forEach(angular.element.fragments, function(val, key) {\r\n      delete angular.element.fragments[key];\r\n    });\r\n\r\n    MockXhr.$$lastInstance = null;\r\n\r\n    angular.forEach(angular.callbacks, function(val, key) {\r\n      delete angular.callbacks[key];\r\n    });\r\n    angular.callbacks.$$counter = 0;\r\n  };\r\n\r\n  (window.beforeEach || window.setup)(module.$$beforeEach);\r\n  (window.afterEach || window.teardown)(module.$$afterEach);\r\n\r\n  /**\r\n   * @ngdoc function\r\n   * @name angular.mock.inject\r\n   * @description\r\n   *\r\n   * *NOTE*: This function is also published on window for easy access.<br>\r\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n   *\r\n   * The inject function wraps a function into an injectable function. The inject() creates new\r\n   * instance of {@link auto.$injector $injector} per test, which is then used for\r\n   * resolving references.\r\n   *\r\n   *\r\n   * ## Resolving References (Underscore Wrapping)\r\n   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this\r\n   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable\r\n   * that is declared in the scope of the `describe()` block. Since we would, most likely, want\r\n   * the variable to have the same name of the reference we have a problem, since the parameter\r\n   * to the `inject()` function would hide the outer variable.\r\n   *\r\n   * To help with this, the injected parameters can, optionally, be enclosed with underscores.\r\n   * These are ignored by the injector when the reference name is resolved.\r\n   *\r\n   * For example, the parameter `_myService_` would be resolved as the reference `myService`.\r\n   * Since it is available in the function body as `_myService_`, we can then assign it to a variable\r\n   * defined in an outer scope.\r\n   *\r\n   * ```\r\n   * // Defined out reference variable outside\r\n   * var myService;\r\n   *\r\n   * // Wrap the parameter in underscores\r\n   * beforeEach( inject( function(_myService_){\r\n   *   myService = _myService_;\r\n   * }));\r\n   *\r\n   * // Use myService in a series of tests.\r\n   * it('makes use of myService', function() {\r\n   *   myService.doStuff();\r\n   * });\r\n   *\r\n   * ```\r\n   *\r\n   * See also {@link angular.mock.module angular.mock.module}\r\n   *\r\n   * ## Example\r\n   * Example of what a typical jasmine tests looks like with the inject method.\r\n   * ```js\r\n   *\r\n   *   angular.module('myApplicationModule', [])\r\n   *       .value('mode', 'app')\r\n   *       .value('version', 'v1.0.1');\r\n   *\r\n   *\r\n   *   describe('MyApp', function() {\r\n   *\r\n   *     // You need to load modules that you want to test,\r\n   *     // it loads only the \"ng\" module by default.\r\n   *     beforeEach(module('myApplicationModule'));\r\n   *\r\n   *\r\n   *     // inject() is used to inject arguments of all given functions\r\n   *     it('should provide a version', inject(function(mode, version) {\r\n   *       expect(version).toEqual('v1.0.1');\r\n   *       expect(mode).toEqual('app');\r\n   *     }));\r\n   *\r\n   *\r\n   *     // The inject and module method can also be used inside of the it or beforeEach\r\n   *     it('should override a version and test the new version is injected', function() {\r\n   *       // module() takes functions or strings (module aliases)\r\n   *       module(function($provide) {\r\n   *         $provide.value('version', 'overridden'); // override version here\r\n   *       });\r\n   *\r\n   *       inject(function(version) {\r\n   *         expect(version).toEqual('overridden');\r\n   *       });\r\n   *     });\r\n   *   });\r\n   *\r\n   * ```\r\n   *\r\n   * @param {...Function} fns any number of functions which will be injected using the injector.\r\n   */\r\n\r\n\r\n\r\n  var ErrorAddingDeclarationLocationStack = function ErrorAddingDeclarationLocationStack(e, errorForStack) {\r\n    this.message = e.message;\r\n    this.name = e.name;\r\n    if (e.line) this.line = e.line;\r\n    if (e.sourceId) this.sourceId = e.sourceId;\r\n    if (e.stack && errorForStack)\r\n      this.stack = e.stack + '\\n' + errorForStack.stack;\r\n    if (e.stackArray) this.stackArray = e.stackArray;\r\n  };\r\n  ErrorAddingDeclarationLocationStack.prototype = Error.prototype;\r\n\r\n  window.inject = angular.mock.inject = function() {\r\n    var blockFns = Array.prototype.slice.call(arguments, 0);\r\n    var errorForStack = new Error('Declaration Location');\r\n    // IE10+ and PhanthomJS do not set stack trace information, until the error is thrown\r\n    if (!errorForStack.stack) {\r\n      try {\r\n        throw errorForStack;\r\n      } catch (e) { /* empty */ }\r\n    }\r\n    return wasInjectorCreated() ? WorkFn.call(currentSpec) : WorkFn;\r\n    /////////////////////\r\n    function WorkFn() {\r\n      var modules = currentSpec.$modules || [];\r\n      var strictDi = !!currentSpec.$injectorStrict;\r\n      modules.unshift(['$injector', function($injector) {\r\n        currentSpec.$providerInjector = $injector;\r\n      }]);\r\n      modules.unshift('ngMock');\r\n      modules.unshift('ng');\r\n      var injector = currentSpec.$injector;\r\n      if (!injector) {\r\n        if (strictDi) {\r\n          // If strictDi is enabled, annotate the providerInjector blocks\r\n          angular.forEach(modules, function(moduleFn) {\r\n            if (typeof moduleFn === 'function') {\r\n              angular.injector.$$annotate(moduleFn);\r\n            }\r\n          });\r\n        }\r\n        injector = currentSpec.$injector = angular.injector(modules, strictDi);\r\n        currentSpec.$injectorStrict = strictDi;\r\n      }\r\n      for (var i = 0, ii = blockFns.length; i < ii; i++) {\r\n        if (currentSpec.$injectorStrict) {\r\n          // If the injector is strict / strictDi, and the spec wants to inject using automatic\r\n          // annotation, then annotate the function here.\r\n          injector.annotate(blockFns[i]);\r\n        }\r\n        try {\r\n          injector.invoke(blockFns[i] || angular.noop, this);\r\n        } catch (e) {\r\n          if (e.stack && errorForStack) {\r\n            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);\r\n          }\r\n          throw e;\r\n        } finally {\r\n          errorForStack = null;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  angular.mock.inject.strictDi = function(value) {\r\n    value = arguments.length ? !!value : true;\r\n    return wasInjectorCreated() ? workFn() : workFn;\r\n\r\n    function workFn() {\r\n      if (value !== currentSpec.$injectorStrict) {\r\n        if (currentSpec.$injector) {\r\n          throw new Error('Injector already created, can not modify strict annotations');\r\n        } else {\r\n          currentSpec.$injectorStrict = value;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  function InjectorState() {\r\n    this.shared = false;\r\n    this.sharedError = null;\r\n\r\n    this.cleanupAfterEach = function() {\r\n      return !this.shared || this.sharedError;\r\n    };\r\n  }\r\n})(window.jasmine || window.mocha);\r\n\r\n'use strict';\r\n\r\n(function() {\r\n  /**\r\n   * Triggers a browser event. Attempts to choose the right event if one is\r\n   * not specified.\r\n   *\r\n   * @param {Object} element Either a wrapped jQuery/jqLite node or a DOMElement\r\n   * @param {string} eventType Optional event type\r\n   * @param {Object=} eventData An optional object which contains additional event data (such as x,y\r\n   * coordinates, keys, etc...) that are passed into the event when triggered\r\n   */\r\n  window.browserTrigger = function browserTrigger(element, eventType, eventData) {\r\n    if (element && !element.nodeName) element = element[0];\r\n    if (!element) return;\r\n\r\n    eventData = eventData || {};\r\n    var relatedTarget = eventData.relatedTarget || element;\r\n    var keys = eventData.keys;\r\n    var x = eventData.x;\r\n    var y = eventData.y;\r\n\r\n    var inputType = (element.type) ? element.type.toLowerCase() : null,\r\n        nodeName = element.nodeName.toLowerCase();\r\n    if (!eventType) {\r\n      eventType = {\r\n        'text':            'change',\r\n        'textarea':        'change',\r\n        'hidden':          'change',\r\n        'password':        'change',\r\n        'button':          'click',\r\n        'submit':          'click',\r\n        'reset':           'click',\r\n        'image':           'click',\r\n        'checkbox':        'click',\r\n        'radio':           'click',\r\n        'select-one':      'change',\r\n        'select-multiple': 'change',\r\n        '_default_':       'click'\r\n      }[inputType || '_default_'];\r\n    }\r\n\r\n    if (nodeName === 'option') {\r\n      element.parentNode.value = element.value;\r\n      element = element.parentNode;\r\n      eventType = 'change';\r\n    }\r\n\r\n    keys = keys || [];\r\n    function pressed(key) {\r\n      return keys.indexOf(key) !== -1;\r\n    }\r\n\r\n    var evnt;\r\n    if (/transitionend/.test(eventType)) {\r\n      if (window.WebKitTransitionEvent) {\r\n        evnt = new window.WebKitTransitionEvent(eventType, eventData);\r\n        evnt.initEvent(eventType, false, true);\r\n      } else {\r\n        try {\r\n          evnt = new window.TransitionEvent(eventType, eventData);\r\n        } catch (e) {\r\n          evnt = window.document.createEvent('TransitionEvent');\r\n          evnt.initTransitionEvent(eventType, null, null, null, eventData.elapsedTime || 0);\r\n        }\r\n      }\r\n    } else if (/animationend/.test(eventType)) {\r\n      if (window.WebKitAnimationEvent) {\r\n        evnt = new window.WebKitAnimationEvent(eventType, eventData);\r\n        evnt.initEvent(eventType, false, true);\r\n      } else {\r\n        try {\r\n          evnt = new window.AnimationEvent(eventType, eventData);\r\n        } catch (e) {\r\n          evnt = window.document.createEvent('AnimationEvent');\r\n          evnt.initAnimationEvent(eventType, null, null, null, eventData.elapsedTime || 0);\r\n        }\r\n      }\r\n    } else if (/touch/.test(eventType) && supportsTouchEvents()) {\r\n      evnt = createTouchEvent(element, eventType, x, y);\r\n    } else if (/key/.test(eventType)) {\r\n      evnt = window.document.createEvent('Events');\r\n      evnt.initEvent(eventType, eventData.bubbles, eventData.cancelable);\r\n      evnt.view = window;\r\n      evnt.ctrlKey = pressed('ctrl');\r\n      evnt.altKey = pressed('alt');\r\n      evnt.shiftKey = pressed('shift');\r\n      evnt.metaKey = pressed('meta');\r\n      evnt.keyCode = eventData.keyCode;\r\n      evnt.charCode = eventData.charCode;\r\n      evnt.which = eventData.which;\r\n    } else {\r\n      evnt = window.document.createEvent('MouseEvents');\r\n      x = x || 0;\r\n      y = y || 0;\r\n      evnt.initMouseEvent(eventType, true, true, window, 0, x, y, x, y, pressed('ctrl'),\r\n          pressed('alt'), pressed('shift'), pressed('meta'), 0, relatedTarget);\r\n    }\r\n\r\n    /* we're unable to change the timeStamp value directly so this\r\n     * is only here to allow for testing where the timeStamp value is\r\n     * read */\r\n    evnt.$manualTimeStamp = eventData.timeStamp;\r\n\r\n    if (!evnt) return;\r\n\r\n    var originalPreventDefault = evnt.preventDefault,\r\n        appWindow = element.ownerDocument.defaultView,\r\n        fakeProcessDefault = true,\r\n        finalProcessDefault,\r\n        angular = appWindow.angular || {};\r\n\r\n    // igor: temporary fix for https://bugzilla.mozilla.org/show_bug.cgi?id=684208\r\n    angular['ff-684208-preventDefault'] = false;\r\n    evnt.preventDefault = function() {\r\n      fakeProcessDefault = false;\r\n      return originalPreventDefault.apply(evnt, arguments);\r\n    };\r\n\r\n    if (!eventData.bubbles || supportsEventBubblingInDetachedTree() || isAttachedToDocument(element)) {\r\n      element.dispatchEvent(evnt);\r\n    } else {\r\n      triggerForPath(element, evnt);\r\n    }\r\n\r\n    finalProcessDefault = !(angular['ff-684208-preventDefault'] || !fakeProcessDefault);\r\n\r\n    delete angular['ff-684208-preventDefault'];\r\n\r\n    return finalProcessDefault;\r\n  };\r\n\r\n  function supportsTouchEvents() {\r\n    if ('_cached' in supportsTouchEvents) {\r\n      return supportsTouchEvents._cached;\r\n    }\r\n    if (!window.document.createTouch || !window.document.createTouchList) {\r\n      supportsTouchEvents._cached = false;\r\n      return false;\r\n    }\r\n    try {\r\n      window.document.createEvent('TouchEvent');\r\n    } catch (e) {\r\n      supportsTouchEvents._cached = false;\r\n      return false;\r\n    }\r\n    supportsTouchEvents._cached = true;\r\n    return true;\r\n  }\r\n\r\n  function createTouchEvent(element, eventType, x, y) {\r\n    var evnt = new window.Event(eventType);\r\n    x = x || 0;\r\n    y = y || 0;\r\n\r\n    var touch = window.document.createTouch(window, element, Date.now(), x, y, x, y);\r\n    var touches = window.document.createTouchList(touch);\r\n\r\n    evnt.touches = touches;\r\n\r\n    return evnt;\r\n  }\r\n\r\n  function supportsEventBubblingInDetachedTree() {\r\n    if ('_cached' in supportsEventBubblingInDetachedTree) {\r\n      return supportsEventBubblingInDetachedTree._cached;\r\n    }\r\n    supportsEventBubblingInDetachedTree._cached = false;\r\n    var doc = window.document;\r\n    if (doc) {\r\n      var parent = doc.createElement('div'),\r\n          child = parent.cloneNode();\r\n      parent.appendChild(child);\r\n      parent.addEventListener('e', function() {\r\n        supportsEventBubblingInDetachedTree._cached = true;\r\n      });\r\n      var evnt = window.document.createEvent('Events');\r\n      evnt.initEvent('e', true, true);\r\n      child.dispatchEvent(evnt);\r\n    }\r\n    return supportsEventBubblingInDetachedTree._cached;\r\n  }\r\n\r\n  function triggerForPath(element, evnt) {\r\n    var stop = false;\r\n\r\n    var _stopPropagation = evnt.stopPropagation;\r\n    evnt.stopPropagation = function() {\r\n      stop = true;\r\n      _stopPropagation.apply(evnt, arguments);\r\n    };\r\n    patchEventTargetForBubbling(evnt, element);\r\n    do {\r\n      element.dispatchEvent(evnt);\r\n      // eslint-disable-next-line no-unmodified-loop-condition\r\n    } while (!stop && (element = element.parentNode));\r\n  }\r\n\r\n  function patchEventTargetForBubbling(event, target) {\r\n    event._target = target;\r\n    Object.defineProperty(event, 'target', {get: function() { return this._target;}});\r\n  }\r\n\r\n  function isAttachedToDocument(element) {\r\n    while ((element = element.parentNode)) {\r\n        if (element === window) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n  }\r\n})();\r\n\r\n\r\n})(window, window.angular);\r\n"]}