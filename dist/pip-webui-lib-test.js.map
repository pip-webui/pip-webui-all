{"version":3,"sources":["chance.js"],"names":[],"mappingsfile":"pip-webui-lib-test.js","sourcesContent":["//  Chance.js 1.0.2\r\n//  http://chancejs.com\r\n//  (c) 2013 Victor Quinn\r\n//  Chance may be freely distributed or modified under the MIT license.\r\n\r\n(function () {\r\n\r\n    // Constants\r\n    var MAX_INT = 9007199254740992;\r\n    var MIN_INT = -MAX_INT;\r\n    var NUMBERS = '0123456789';\r\n    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';\r\n    var CHARS_UPPER = CHARS_LOWER.toUpperCase();\r\n    var HEX_POOL  = NUMBERS + \"abcdef\";\r\n\r\n    // Cached array helpers\r\n    var slice = Array.prototype.slice;\r\n\r\n    // Constructor\r\n    function Chance (seed) {\r\n        if (!(this instanceof Chance)) {\r\n            return seed == null ? new Chance() : new Chance(seed);\r\n        }\r\n\r\n        // if user has provided a function, use that as the generator\r\n        if (typeof seed === 'function') {\r\n            this.random = seed;\r\n            return this;\r\n        }\r\n\r\n        if (arguments.length) {\r\n            // set a starting value of zero so we can add to it\r\n            this.seed = 0;\r\n        }\r\n\r\n        // otherwise, leave this.seed blank so that MT will receive a blank\r\n\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            var seedling = 0;\r\n            if (Object.prototype.toString.call(arguments[i]) === '[object String]') {\r\n                for (var j = 0; j < arguments[i].length; j++) {\r\n                    // create a numeric hash for each argument, add to seedling\r\n                    var hash = 0;\r\n                    for (var k = 0; k < arguments[i].length; k++) {\r\n                        hash = arguments[i].charCodeAt(k) + (hash << 6) + (hash << 16) - hash;\r\n                    }\r\n                    seedling += hash;\r\n                }\r\n            } else {\r\n                seedling = arguments[i];\r\n            }\r\n            this.seed += (arguments.length - i) * seedling;\r\n        }\r\n\r\n        // If no generator function was provided, use our MT\r\n        this.mt = this.mersenne_twister(this.seed);\r\n        this.bimd5 = this.blueimp_md5();\r\n        this.random = function () {\r\n            return this.mt.random(this.seed);\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    Chance.prototype.VERSION = \"1.0.2\";\r\n\r\n    // Random helper functions\r\n    function initOptions(options, defaults) {\r\n        options || (options = {});\r\n\r\n        if (defaults) {\r\n            for (var i in defaults) {\r\n                if (typeof options[i] === 'undefined') {\r\n                    options[i] = defaults[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    function testRange(test, errorMessage) {\r\n        if (test) {\r\n            throw new RangeError(errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encode the input string with Base64.\r\n     */\r\n    var base64 = function() {\r\n        throw new Error('No Base64 encoder available.');\r\n    };\r\n\r\n    // Select proper Base64 encoder.\r\n    (function determineBase64Encoder() {\r\n        if (typeof btoa === 'function') {\r\n            base64 = btoa;\r\n        } else if (typeof Buffer === 'function') {\r\n            base64 = function(input) {\r\n                return new Buffer(input).toString('base64');\r\n            };\r\n        }\r\n    })();\r\n\r\n    // -- Basics --\r\n\r\n    /**\r\n     *  Return a random bool, either true or false\r\n     *\r\n     *  @param {Object} [options={ likelihood: 50 }] alter the likelihood of\r\n     *    receiving a true or false value back.\r\n     *  @throws {RangeError} if the likelihood is out of bounds\r\n     *  @returns {Bool} either true or false\r\n     */\r\n    Chance.prototype.bool = function (options) {\r\n        // likelihood of success (true)\r\n        options = initOptions(options, {likelihood : 50});\r\n\r\n        // Note, we could get some minor perf optimizations by checking range\r\n        // prior to initializing defaults, but that makes code a bit messier\r\n        // and the check more complicated as we have to check existence of\r\n        // the object then existence of the key before checking constraints.\r\n        // Since the options initialization should be minor computationally,\r\n        // decision made for code cleanliness intentionally. This is mentioned\r\n        // here as it's the first occurrence, will not be mentioned again.\r\n        testRange(\r\n            options.likelihood < 0 || options.likelihood > 100,\r\n            \"Chance: Likelihood accepts values from 0 to 100.\"\r\n        );\r\n\r\n        return this.random() * 100 < options.likelihood;\r\n    };\r\n\r\n    /**\r\n     *  Return a random character.\r\n     *\r\n     *  @param {Object} [options={}] can specify a character pool, only alpha,\r\n     *    only symbols, and casing (lower or upper)\r\n     *  @returns {String} a single random character\r\n     *  @throws {RangeError} Can only specify alpha or symbols, not both\r\n     */\r\n    Chance.prototype.character = function (options) {\r\n        options = initOptions(options);\r\n        testRange(\r\n            options.alpha && options.symbols,\r\n            \"Chance: Cannot specify both alpha and symbols.\"\r\n        );\r\n\r\n        var symbols = \"!@#$%^&*()[]\",\r\n            letters, pool;\r\n\r\n        if (options.casing === 'lower') {\r\n            letters = CHARS_LOWER;\r\n        } else if (options.casing === 'upper') {\r\n            letters = CHARS_UPPER;\r\n        } else {\r\n            letters = CHARS_LOWER + CHARS_UPPER;\r\n        }\r\n\r\n        if (options.pool) {\r\n            pool = options.pool;\r\n        } else if (options.alpha) {\r\n            pool = letters;\r\n        } else if (options.symbols) {\r\n            pool = symbols;\r\n        } else {\r\n            pool = letters + NUMBERS + symbols;\r\n        }\r\n\r\n        return pool.charAt(this.natural({max: (pool.length - 1)}));\r\n    };\r\n\r\n    // Note, wanted to use \"float\" or \"double\" but those are both JS reserved words.\r\n\r\n    // Note, fixed means N OR LESS digits after the decimal. This because\r\n    // It could be 14.9000 but in JavaScript, when this is cast as a number,\r\n    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are\r\n    // needed\r\n    /**\r\n     *  Return a random floating point number\r\n     *\r\n     *  @param {Object} [options={}] can specify a fixed precision, min, max\r\n     *  @returns {Number} a single floating point number\r\n     *  @throws {RangeError} Can only specify fixed or precision, not both. Also\r\n     *    min cannot be greater than max\r\n     */\r\n    Chance.prototype.floating = function (options) {\r\n        options = initOptions(options, {fixed : 4});\r\n        testRange(\r\n            options.fixed && options.precision,\r\n            \"Chance: Cannot specify both fixed and precision.\"\r\n        );\r\n\r\n        var num;\r\n        var fixed = Math.pow(10, options.fixed);\r\n\r\n        var max = MAX_INT / fixed;\r\n        var min = -max;\r\n\r\n        testRange(\r\n            options.min && options.fixed && options.min < min,\r\n            \"Chance: Min specified is out of range with fixed. Min should be, at least, \" + min\r\n        );\r\n        testRange(\r\n            options.max && options.fixed && options.max > max,\r\n            \"Chance: Max specified is out of range with fixed. Max should be, at most, \" + max\r\n        );\r\n\r\n        options = initOptions(options, { min : min, max : max });\r\n\r\n        // Todo - Make this work!\r\n        // options.precision = (typeof options.precision !== \"undefined\") ? options.precision : false;\r\n\r\n        num = this.integer({min: options.min * fixed, max: options.max * fixed});\r\n        var num_fixed = (num / fixed).toFixed(options.fixed);\r\n\r\n        return parseFloat(num_fixed);\r\n    };\r\n\r\n    /**\r\n     *  Return a random integer\r\n     *\r\n     *  NOTE the max and min are INCLUDED in the range. So:\r\n     *  chance.integer({min: 1, max: 3});\r\n     *  would return either 1, 2, or 3.\r\n     *\r\n     *  @param {Object} [options={}] can specify a min and/or max\r\n     *  @returns {Number} a single random integer number\r\n     *  @throws {RangeError} min cannot be greater than max\r\n     */\r\n    Chance.prototype.integer = function (options) {\r\n        // 9007199254740992 (2^53) is the max integer number in JavaScript\r\n        // See: http://vq.io/132sa2j\r\n        options = initOptions(options, {min: MIN_INT, max: MAX_INT});\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);\r\n    };\r\n\r\n    /**\r\n     *  Return a random natural\r\n     *\r\n     *  NOTE the max and min are INCLUDED in the range. So:\r\n     *  chance.natural({min: 1, max: 3});\r\n     *  would return either 1, 2, or 3.\r\n     *\r\n     *  @param {Object} [options={}] can specify a min and/or max\r\n     *  @returns {Number} a single random integer number\r\n     *  @throws {RangeError} min cannot be greater than max\r\n     */\r\n    Chance.prototype.natural = function (options) {\r\n        options = initOptions(options, {min: 0, max: MAX_INT});\r\n        testRange(options.min < 0, \"Chance: Min cannot be less than zero.\");\r\n        return this.integer(options);\r\n    };\r\n\r\n    /**\r\n     *  Return a random string\r\n     *\r\n     *  @param {Object} [options={}] can specify a length\r\n     *  @returns {String} a string of random length\r\n     *  @throws {RangeError} length cannot be less than zero\r\n     */\r\n    Chance.prototype.string = function (options) {\r\n        options = initOptions(options, { length: this.natural({min: 5, max: 20}) });\r\n        testRange(options.length < 0, \"Chance: Length cannot be less than zero.\");\r\n        var length = options.length,\r\n            text = this.n(this.character, length, options);\r\n\r\n        return text.join(\"\");\r\n    };\r\n\r\n    // -- End Basics --\r\n\r\n    // -- Helpers --\r\n\r\n    Chance.prototype.capitalize = function (word) {\r\n        return word.charAt(0).toUpperCase() + word.substr(1);\r\n    };\r\n\r\n    Chance.prototype.mixin = function (obj) {\r\n        for (var func_name in obj) {\r\n            Chance.prototype[func_name] = obj[func_name];\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *  Given a function that generates something random and a number of items to generate,\r\n     *    return an array of items where none repeat.\r\n     *\r\n     *  @param {Function} fn the function that generates something random\r\n     *  @param {Number} num number of terms to generate\r\n     *  @param {Object} options any options to pass on to the generator function\r\n     *  @returns {Array} an array of length `num` with every item generated by `fn` and unique\r\n     *\r\n     *  There can be more parameters after these. All additional parameters are provided to the given function\r\n     */\r\n    Chance.prototype.unique = function(fn, num, options) {\r\n        testRange(\r\n            typeof fn !== \"function\",\r\n            \"Chance: The first argument must be a function.\"\r\n        );\r\n\r\n        var comparator = options.comparator || function(arr, val) { return arr.indexOf(val) !== -1; };\r\n\r\n        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);\r\n\r\n        while (arr.length < num) {\r\n            var clonedParams = JSON.parse(JSON.stringify(params));\r\n            result = fn.apply(this, clonedParams);\r\n            if (!comparator(arr, result)) {\r\n                arr.push(result);\r\n                // reset count when unique found\r\n                count = 0;\r\n            }\r\n\r\n            if (++count > MAX_DUPLICATES) {\r\n                throw new RangeError(\"Chance: num is likely too large for sample set\");\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *  Gives an array of n random terms\r\n     *\r\n     *  @param {Function} fn the function that generates something random\r\n     *  @param {Number} n number of terms to generate\r\n     *  @returns {Array} an array of length `n` with items generated by `fn`\r\n     *\r\n     *  There can be more parameters after these. All additional parameters are provided to the given function\r\n     */\r\n    Chance.prototype.n = function(fn, n) {\r\n        testRange(\r\n            typeof fn !== \"function\",\r\n            \"Chance: The first argument must be a function.\"\r\n        );\r\n\r\n        if (typeof n === 'undefined') {\r\n            n = 1;\r\n        }\r\n        var i = n, arr = [], params = slice.call(arguments, 2);\r\n\r\n        // Providing a negative count should result in a noop.\r\n        i = Math.max( 0, i );\r\n\r\n        for (null; i--; null) {\r\n            arr.push(fn.apply(this, params));\r\n        }\r\n\r\n        return arr;\r\n    };\r\n\r\n    // H/T to SO for this one: http://vq.io/OtUrZ5\r\n    Chance.prototype.pad = function (number, width, pad) {\r\n        // Default pad to 0 if none provided\r\n        pad = pad || '0';\r\n        // Convert number to a string\r\n        number = number + '';\r\n        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;\r\n    };\r\n\r\n    // DEPRECATED on 2015-10-01\r\n    Chance.prototype.pick = function (arr, count) {\r\n        if (arr.length === 0) {\r\n            throw new RangeError(\"Chance: Cannot pick() from an empty array\");\r\n        }\r\n        if (!count || count === 1) {\r\n            return arr[this.natural({max: arr.length - 1})];\r\n        } else {\r\n            return this.shuffle(arr).slice(0, count);\r\n        }\r\n    };\r\n\r\n    // Given an array, returns a single random element\r\n    Chance.prototype.pickone = function (arr) {\r\n        if (arr.length === 0) {\r\n          throw new RangeError(\"Chance: Cannot pickone() from an empty array\");\r\n        }\r\n        return arr[this.natural({max: arr.length - 1})];\r\n    };\r\n\r\n    // Given an array, returns a random set with 'count' elements\r\n    Chance.prototype.pickset = function (arr, count) {\r\n        if (count === 0) {\r\n            return [];\r\n        }\r\n        if (arr.length === 0) {\r\n            throw new RangeError(\"Chance: Cannot pickset() from an empty array\");\r\n        }\r\n        if (count < 0) {\r\n            throw new RangeError(\"Chance: count must be positive number\");\r\n        }\r\n        if (!count || count === 1) {\r\n            return [ this.pickone(arr) ];\r\n        } else {\r\n            return this.shuffle(arr).slice(0, count);\r\n        }\r\n    };\r\n\r\n    Chance.prototype.shuffle = function (arr) {\r\n        var old_array = arr.slice(0),\r\n            new_array = [],\r\n            j = 0,\r\n            length = Number(old_array.length);\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            // Pick a random index from the array\r\n            j = this.natural({max: old_array.length - 1});\r\n            // Add it to the new array\r\n            new_array[i] = old_array[j];\r\n            // Remove that element from the original array\r\n            old_array.splice(j, 1);\r\n        }\r\n\r\n        return new_array;\r\n    };\r\n\r\n    // Returns a single item from an array with relative weighting of odds\r\n    Chance.prototype.weighted = function(arr, weights) {\r\n        if (arr.length !== weights.length) {\r\n            throw new RangeError(\"Chance: length of array and weights must match\");\r\n        }\r\n\r\n        // Handle weights that are less or equal to zero.\r\n        for (var weightIndex = weights.length - 1; weightIndex >= 0; --weightIndex) {\r\n            // If the weight is less or equal to zero, remove it and the value.\r\n            if (weights[weightIndex] <= 0) {\r\n                arr.splice(weightIndex,1);\r\n                weights.splice(weightIndex,1);\r\n            }\r\n        }\r\n\r\n        var sum = weights.reduce(function(total, weight) {\r\n            return total + weight;\r\n        }, 0);\r\n\r\n        // get an index\r\n        var selected = this.random() * sum;\r\n\r\n        var total = 0;\r\n        var chosen;\r\n        // Using some() here so we can bail as soon as we get our match\r\n        weights.some(function(weight, index) {\r\n            if (selected <= total + weight) {\r\n                chosen = arr[index];\r\n                return true;\r\n            }\r\n            total += weight;\r\n            return false;\r\n        });\r\n\r\n        return chosen;\r\n    };\r\n\r\n    // -- End Helpers --\r\n\r\n    // -- Text --\r\n\r\n    Chance.prototype.paragraph = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var sentences = options.sentences || this.natural({min: 3, max: 7}),\r\n            sentence_array = this.n(this.sentence, sentences);\r\n\r\n        return sentence_array.join(' ');\r\n    };\r\n\r\n    // Could get smarter about this than generating random words and\r\n    // chaining them together. Such as: http://vq.io/1a5ceOh\r\n    Chance.prototype.sentence = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var words = options.words || this.natural({min: 12, max: 18}),\r\n            punctuation = options.punctuation,\r\n            text, word_array = this.n(this.word, words);\r\n\r\n        text = word_array.join(' ');\r\n        \r\n        // Capitalize first letter of sentence\r\n        text = this.capitalize(text);\r\n        \r\n        // Make sure punctuation has a usable value\r\n        if (punctuation !== false && !/^[\\.\\?;!:]$/.test(punctuation)) {\r\n            punctuation = '.';\r\n        }\r\n        \r\n        // Add punctuation mark\r\n        if (punctuation) {\r\n            text += punctuation;\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    Chance.prototype.syllable = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var length = options.length || this.natural({min: 2, max: 3}),\r\n            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones\r\n            vowels = 'aeiou', // vowels\r\n            all = consonants + vowels, // all\r\n            text = '',\r\n            chr;\r\n\r\n        // I'm sure there's a more elegant way to do this, but this works\r\n        // decently well.\r\n        for (var i = 0; i < length; i++) {\r\n            if (i === 0) {\r\n                // First character can be anything\r\n                chr = this.character({pool: all});\r\n            } else if (consonants.indexOf(chr) === -1) {\r\n                // Last character was a vowel, now we want a consonant\r\n                chr = this.character({pool: consonants});\r\n            } else {\r\n                // Last character was a consonant, now we want a vowel\r\n                chr = this.character({pool: vowels});\r\n            }\r\n\r\n            text += chr;\r\n        }\r\n\r\n        if (options.capitalize) {\r\n            text = this.capitalize(text);\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    Chance.prototype.word = function (options) {\r\n        options = initOptions(options);\r\n\r\n        testRange(\r\n            options.syllables && options.length,\r\n            \"Chance: Cannot specify both syllables AND length.\"\r\n        );\r\n\r\n        var syllables = options.syllables || this.natural({min: 1, max: 3}),\r\n            text = '';\r\n\r\n        if (options.length) {\r\n            // Either bound word by length\r\n            do {\r\n                text += this.syllable();\r\n            } while (text.length < options.length);\r\n            text = text.substring(0, options.length);\r\n        } else {\r\n            // Or by number of syllables\r\n            for (var i = 0; i < syllables; i++) {\r\n                text += this.syllable();\r\n            }\r\n        }\r\n\r\n        if (options.capitalize) {\r\n            text = this.capitalize(text);\r\n        }\r\n\r\n        return text;\r\n    };\r\n\r\n    // -- End Text --\r\n\r\n    // -- Person --\r\n\r\n    Chance.prototype.age = function (options) {\r\n        options = initOptions(options);\r\n        var ageRange;\r\n\r\n        switch (options.type) {\r\n            case 'child':\r\n                ageRange = {min: 1, max: 12};\r\n                break;\r\n            case 'teen':\r\n                ageRange = {min: 13, max: 19};\r\n                break;\r\n            case 'adult':\r\n                ageRange = {min: 18, max: 65};\r\n                break;\r\n            case 'senior':\r\n                ageRange = {min: 65, max: 100};\r\n                break;\r\n            case 'all':\r\n                ageRange = {min: 1, max: 100};\r\n                break;\r\n            default:\r\n                ageRange = {min: 18, max: 65};\r\n                break;\r\n        }\r\n\r\n        return this.natural(ageRange);\r\n    };\r\n\r\n    Chance.prototype.birthday = function (options) {\r\n        options = initOptions(options, {\r\n            year: (new Date().getFullYear() - this.age(options))\r\n        });\r\n\r\n        return this.date(options);\r\n    };\r\n\r\n    // CPF; ID to identify taxpayers in Brazil\r\n    Chance.prototype.cpf = function () {\r\n        var n = this.n(this.natural, 9, { max: 9 });\r\n        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;\r\n        d1 = 11 - (d1 % 11);\r\n        if (d1>=10) {\r\n            d1 = 0;\r\n        }\r\n        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;\r\n        d2 = 11 - (d2 % 11);\r\n        if (d2>=10) {\r\n            d2 = 0;\r\n        }\r\n        return ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;\r\n    };\r\n\r\n    // CNPJ: ID to identify companies in Brazil\r\n    Chance.prototype.cnpj = function () {\r\n        var n = this.n(this.natural, 12, { max: 12 });\r\n        var d1 = n[11]*2+n[10]*3+n[9]*4+n[8]*5+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\r\n        d1 = 11 - (d1 % 11);\r\n        if (d1<2) {\r\n            d1 = 0;\r\n        }\r\n        var d2 = d1*2+n[11]*3+n[10]*4+n[9]*5+n[8]*6+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\r\n        d2 = 11 - (d2 % 11);\r\n        if (d2<2) {\r\n            d2 = 0;\r\n        }\r\n        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/'+n[8]+n[9]+n[10]+n[11]+'-'+d1+d2;\r\n    };\r\n\r\n    Chance.prototype.first = function (options) {\r\n        options = initOptions(options, {gender: this.gender(), nationality: 'en'});\r\n        return this.pick(this.get(\"firstNames\")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);\r\n    };\r\n\r\n    Chance.prototype.gender = function () {\r\n        return this.pick(['Male', 'Female']);\r\n    };\r\n\r\n    Chance.prototype.last = function (options) {\r\n        options = initOptions(options, {nationality: 'en'});\r\n        return this.pick(this.get(\"lastNames\")[options.nationality.toLowerCase()]);\r\n    };\r\n    \r\n    Chance.prototype.israelId=function(){\r\n        var x=this.string({pool: '0123456789',length:8});\r\n        var y=0;\r\n        for (var i=0;i<x.length;i++){\r\n            var thisDigit=  x[i] *  (i/2===parseInt(i/2) ? 1 : 2);\r\n            thisDigit=this.pad(thisDigit,2).toString();\r\n            thisDigit=parseInt(thisDigit[0]) + parseInt(thisDigit[1]);\r\n            y=y+thisDigit;\r\n        }\r\n        x=x+(10-parseInt(y.toString().slice(-1))).toString().slice(-1);\r\n        return x;\r\n    };\r\n\r\n    Chance.prototype.mrz = function (options) {\r\n        var checkDigit = function (input) {\r\n            var alpha = \"<ABCDEFGHIJKLMNOPQRSTUVWXYXZ\".split(''),\r\n                multipliers = [ 7, 3, 1 ],\r\n                runningTotal = 0;\r\n\r\n            if (typeof input !== 'string') {\r\n                input = input.toString();\r\n            }\r\n\r\n            input.split('').forEach(function(character, idx) {\r\n                var pos = alpha.indexOf(character);\r\n\r\n                if(pos !== -1) {\r\n                    character = pos === 0 ? 0 : pos + 9;\r\n                } else {\r\n                    character = parseInt(character, 10);\r\n                }\r\n                character *= multipliers[idx % multipliers.length];\r\n                runningTotal += character;\r\n            });\r\n            return runningTotal % 10;\r\n        };\r\n        var generate = function (opts) {\r\n            var pad = function (length) {\r\n                return new Array(length + 1).join('<');\r\n            };\r\n            var number = [ 'P<',\r\n                           opts.issuer,\r\n                           opts.last.toUpperCase(),\r\n                           '<<',\r\n                           opts.first.toUpperCase(),\r\n                           pad(39 - (opts.last.length + opts.first.length + 2)),\r\n                           opts.passportNumber,\r\n                           checkDigit(opts.passportNumber),\r\n                           opts.nationality,\r\n                           opts.dob,\r\n                           checkDigit(opts.dob),\r\n                           opts.gender,\r\n                           opts.expiry,\r\n                           checkDigit(opts.expiry),\r\n                           pad(14),\r\n                           checkDigit(pad(14)) ].join('');\r\n\r\n            return number +\r\n                (checkDigit(number.substr(44, 10) +\r\n                            number.substr(57, 7) +\r\n                            number.substr(65, 7)));\r\n        };\r\n\r\n        var that = this;\r\n\r\n        options = initOptions(options, {\r\n            first: this.first(),\r\n            last: this.last(),\r\n            passportNumber: this.integer({min: 100000000, max: 999999999}),\r\n            dob: (function () {\r\n                var date = that.birthday({type: 'adult'});\r\n                return [date.getFullYear().toString().substr(2),\r\n                        that.pad(date.getMonth() + 1, 2),\r\n                        that.pad(date.getDate(), 2)].join('');\r\n            }()),\r\n            expiry: (function () {\r\n                var date = new Date();\r\n                return [(date.getFullYear() + 5).toString().substr(2),\r\n                        that.pad(date.getMonth() + 1, 2),\r\n                        that.pad(date.getDate(), 2)].join('');\r\n            }()),\r\n            gender: this.gender() === 'Female' ? 'F': 'M',\r\n            issuer: 'GBR',\r\n            nationality: 'GBR'\r\n        });\r\n        return generate (options);\r\n    };\r\n\r\n    Chance.prototype.name = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var first = this.first(options),\r\n            last = this.last(options),\r\n            name;\r\n\r\n        if (options.middle) {\r\n            name = first + ' ' + this.first(options) + ' ' + last;\r\n        } else if (options.middle_initial) {\r\n            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;\r\n        } else {\r\n            name = first + ' ' + last;\r\n        }\r\n\r\n        if (options.prefix) {\r\n            name = this.prefix(options) + ' ' + name;\r\n        }\r\n\r\n        if (options.suffix) {\r\n            name = name + ' ' + this.suffix(options);\r\n        }\r\n\r\n        return name;\r\n    };\r\n\r\n    // Return the list of available name prefixes based on supplied gender.\r\n    // @todo introduce internationalization\r\n    Chance.prototype.name_prefixes = function (gender) {\r\n        gender = gender || \"all\";\r\n        gender = gender.toLowerCase();\r\n\r\n        var prefixes = [\r\n            { name: 'Doctor', abbreviation: 'Dr.' }\r\n        ];\r\n\r\n        if (gender === \"male\" || gender === \"all\") {\r\n            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });\r\n        }\r\n\r\n        if (gender === \"female\" || gender === \"all\") {\r\n            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });\r\n            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });\r\n        }\r\n\r\n        return prefixes;\r\n    };\r\n\r\n    // Alias for name_prefix\r\n    Chance.prototype.prefix = function (options) {\r\n        return this.name_prefix(options);\r\n    };\r\n\r\n    Chance.prototype.name_prefix = function (options) {\r\n        options = initOptions(options, { gender: \"all\" });\r\n        return options.full ?\r\n            this.pick(this.name_prefixes(options.gender)).name :\r\n            this.pick(this.name_prefixes(options.gender)).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.ssn = function (options) {\r\n        options = initOptions(options, {ssnFour: false, dashes: true});\r\n        var ssn_pool = \"1234567890\",\r\n            ssn,\r\n            dash = options.dashes ? '-' : '';\r\n\r\n        if(!options.ssnFour) {\r\n            ssn = this.string({pool: ssn_pool, length: 3}) + dash +\r\n            this.string({pool: ssn_pool, length: 2}) + dash +\r\n            this.string({pool: ssn_pool, length: 4});\r\n        } else {\r\n            ssn = this.string({pool: ssn_pool, length: 4});\r\n        }\r\n        return ssn;\r\n    };\r\n\r\n    // Return the list of available name suffixes\r\n    // @todo introduce internationalization\r\n    Chance.prototype.name_suffixes = function () {\r\n        var suffixes = [\r\n            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },\r\n            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },\r\n            { name: 'Esquire', abbreviation: 'Esq.' },\r\n            { name: 'Junior', abbreviation: 'Jr.' },\r\n            { name: 'Juris Doctor', abbreviation: 'J.D.' },\r\n            { name: 'Master of Arts', abbreviation: 'M.A.' },\r\n            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },\r\n            { name: 'Master of Science', abbreviation: 'M.S.' },\r\n            { name: 'Medical Doctor', abbreviation: 'M.D.' },\r\n            { name: 'Senior', abbreviation: 'Sr.' },\r\n            { name: 'The Third', abbreviation: 'III' },\r\n            { name: 'The Fourth', abbreviation: 'IV' },\r\n            { name: 'Bachelor of Engineering', abbreviation: 'B.E' },\r\n            { name: 'Bachelor of Technology', abbreviation: 'B.TECH' }\r\n        ];\r\n        return suffixes;\r\n    };\r\n\r\n    // Alias for name_suffix\r\n    Chance.prototype.suffix = function (options) {\r\n        return this.name_suffix(options);\r\n    };\r\n\r\n    Chance.prototype.name_suffix = function (options) {\r\n        options = initOptions(options);\r\n        return options.full ?\r\n            this.pick(this.name_suffixes()).name :\r\n            this.pick(this.name_suffixes()).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.nationalities = function () {\r\n        return this.get(\"nationalities\");\r\n    };\r\n\r\n    // Generate random nationality based on json list\r\n    Chance.prototype.nationality = function () {\r\n        var nationality = this.pick(this.nationalities());\r\n        return nationality.name;\r\n    };\r\n\r\n    // -- End Person --\r\n\r\n    // -- Mobile --\r\n    // Android GCM Registration ID\r\n    Chance.prototype.android_id = function () {\r\n        return \"APA91\" + this.string({ pool: \"0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\", length: 178 });\r\n    };\r\n\r\n    // Apple Push Token\r\n    Chance.prototype.apple_token = function () {\r\n        return this.string({ pool: \"abcdef1234567890\", length: 64 });\r\n    };\r\n\r\n    // Windows Phone 8 ANID2\r\n    Chance.prototype.wp8_anid2 = function () {\r\n        return base64( this.hash( { length : 32 } ) );\r\n    };\r\n\r\n    // Windows Phone 7 ANID\r\n    Chance.prototype.wp7_anid = function () {\r\n        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });\r\n    };\r\n\r\n    // BlackBerry Device PIN\r\n    Chance.prototype.bb_pin = function () {\r\n        return this.hash({ length: 8 });\r\n    };\r\n\r\n    // -- End Mobile --\r\n\r\n    // -- Web --\r\n    Chance.prototype.avatar = function (options) {\r\n        var url = null;\r\n        var URL_BASE = '//www.gravatar.com/avatar/';\r\n        var PROTOCOLS = {\r\n            http: 'http',\r\n            https: 'https'\r\n        };\r\n        var FILE_TYPES = {\r\n            bmp: 'bmp',\r\n            gif: 'gif',\r\n            jpg: 'jpg',\r\n            png: 'png'\r\n        };\r\n        var FALLBACKS = {\r\n            '404': '404', // Return 404 if not found\r\n            mm: 'mm', // Mystery man\r\n            identicon: 'identicon', // Geometric pattern based on hash\r\n            monsterid: 'monsterid', // A generated monster icon\r\n            wavatar: 'wavatar', // A generated face\r\n            retro: 'retro', // 8-bit icon\r\n            blank: 'blank' // A transparent png\r\n        };\r\n        var RATINGS = {\r\n            g: 'g',\r\n            pg: 'pg',\r\n            r: 'r',\r\n            x: 'x'\r\n        };\r\n        var opts = {\r\n            protocol: null,\r\n            email: null,\r\n            fileExtension: null,\r\n            size: null,\r\n            fallback: null,\r\n            rating: null\r\n        };\r\n\r\n        if (!options) {\r\n            // Set to a random email\r\n            opts.email = this.email();\r\n            options = {};\r\n        }\r\n        else if (typeof options === 'string') {\r\n            opts.email = options;\r\n            options = {};\r\n        }\r\n        else if (typeof options !== 'object') {\r\n            return null;\r\n        }\r\n        else if (options.constructor === 'Array') {\r\n            return null;\r\n        }\r\n\r\n        opts = initOptions(options, opts);\r\n\r\n        if (!opts.email) {\r\n            // Set to a random email\r\n            opts.email = this.email();\r\n        }\r\n\r\n        // Safe checking for params\r\n        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ':' : '';\r\n        opts.size = parseInt(opts.size, 0) ? opts.size : '';\r\n        opts.rating = RATINGS[opts.rating] ? opts.rating : '';\r\n        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : '';\r\n        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : '';\r\n\r\n        url =\r\n            opts.protocol +\r\n            URL_BASE +\r\n            this.bimd5.md5(opts.email) +\r\n            (opts.fileExtension ? '.' + opts.fileExtension : '') +\r\n            (opts.size || opts.rating || opts.fallback ? '?' : '') +\r\n            (opts.size ? '&s=' + opts.size.toString() : '') +\r\n            (opts.rating ? '&r=' + opts.rating : '') +\r\n            (opts.fallback ? '&d=' + opts.fallback : '')\r\n            ;\r\n\r\n        return url;\r\n    };\r\n\r\n    /**\r\n     * #Description:\r\n     * ===============================================\r\n     * Generate random color value base on color type:\r\n     * -> hex\r\n     * -> rgb\r\n     * -> rgba\r\n     * -> 0x\r\n     * -> named color\r\n     *\r\n     * #Examples: \r\n     * ===============================================\r\n     * * Geerate random hex color\r\n     * chance.color() => '#79c157' / 'rgb(110,52,164)' / '0x67ae0b' / '#e2e2e2' / '#29CFA7'\r\n     * \r\n     * * Generate Hex based color value\r\n     * chance.color({format: 'hex'})    => '#d67118'\r\n     *\r\n     * * Generate simple rgb value\r\n     * chance.color({format: 'rgb'})    => 'rgb(110,52,164)'\r\n     *\r\n     * * Generate Ox based color value\r\n     * chance.color({format: '0x'})     => '0x67ae0b' \r\n     *\r\n     * * Generate graiscale based value\r\n     * chance.color({grayscale: true})  => '#e2e2e2'\r\n     *\r\n     * * Return valide color name\r\n     * chance.color({format: 'name'})   => 'red'\r\n     * \r\n     * * Make color uppercase\r\n     * chance.color({casing: 'upper'})  => '#29CFA7'\r\n     *\r\n     * @param  [object] options\r\n     * @return [string] color value\r\n     */\r\n    Chance.prototype.color = function (options) {\r\n\r\n        function gray(value, delimiter) {\r\n            return [value, value, value].join(delimiter || '');\r\n        }\r\n\r\n        function rgb(hasAlpha) {\r\n\r\n            var rgbValue    = (hasAlpha)    ? 'rgba' : 'rgb'; \r\n            var alphaChanal = (hasAlpha)    ? (',' + this.floating({min:0, max:1})) : \"\";\r\n            var colorValue  = (isGrayscale) ? (gray(this.natural({max: 255}), ',')) : (this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.natural({max: 255}));\r\n\r\n            return rgbValue + '(' + colorValue + alphaChanal + ')';\r\n        }\r\n\r\n        function hex(start, end, withHash) {\r\n\r\n            var simbol = (withHash) ? \"#\" : \"\";\r\n            var expression  = (isGrayscale ? gray(this.hash({length: start})) : this.hash({length: end})); \r\n            return simbol + expression;\r\n        }\r\n\r\n        options = initOptions(options, {\r\n            format: this.pick(['hex', 'shorthex', 'rgb', 'rgba', '0x', 'name']),\r\n            grayscale: false,\r\n            casing: 'lower'\r\n        });\r\n\r\n        var isGrayscale = options.grayscale;\r\n        var colorValue;\r\n\r\n        if (options.format === 'hex') {\r\n            colorValue =  hex.call(this, 2, 6, true);\r\n        }\r\n        else if (options.format === 'shorthex') {\r\n            colorValue = hex.call(this, 1, 3, true);\r\n        } \r\n        else if (options.format === 'rgb') {\r\n            colorValue = rgb.call(this, false);\r\n        } \r\n        else if (options.format === 'rgba') {\r\n            colorValue = rgb.call(this, true);\r\n        } \r\n        else if (options.format === '0x') {\r\n            colorValue = '0x' + hex.call(this, 2, 6);\r\n        } \r\n        else if(options.format === 'name') {\r\n            return this.pick(this.get(\"colorNames\"));\r\n        }\r\n        else {\r\n            throw new RangeError('Invalid format provided. Please provide one of \"hex\", \"shorthex\", \"rgb\", \"rgba\", \"0x\" or \"name\".');\r\n        }\r\n\r\n        if (options.casing === 'upper' ) {\r\n            colorValue = colorValue.toUpperCase();\r\n        }\r\n\r\n        return colorValue;\r\n    };\r\n\r\n    Chance.prototype.domain = function (options) {\r\n        options = initOptions(options);\r\n        return this.word() + '.' + (options.tld || this.tld());\r\n    };\r\n\r\n    Chance.prototype.email = function (options) {\r\n        options = initOptions(options);\r\n        return this.word({length: options.length}) + '@' + (options.domain || this.domain());\r\n    };\r\n\r\n    Chance.prototype.fbid = function () {\r\n        return parseInt('10000' + this.natural({max: 100000000000}), 10);\r\n    };\r\n\r\n    Chance.prototype.google_analytics = function () {\r\n        var account = this.pad(this.natural({max: 999999}), 6);\r\n        var property = this.pad(this.natural({max: 99}), 2);\r\n\r\n        return 'UA-' + account + '-' + property;\r\n    };\r\n\r\n    Chance.prototype.hashtag = function () {\r\n        return '#' + this.word();\r\n    };\r\n\r\n    Chance.prototype.ip = function () {\r\n        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy\r\n        // this should probably be updated to account for that rare as it may be\r\n        return this.natural({min: 1, max: 254}) + '.' +\r\n               this.natural({max: 255}) + '.' +\r\n               this.natural({max: 255}) + '.' +\r\n               this.natural({min: 1, max: 254});\r\n    };\r\n\r\n    Chance.prototype.ipv6 = function () {\r\n        var ip_addr = this.n(this.hash, 8, {length: 4});\r\n\r\n        return ip_addr.join(\":\");\r\n    };\r\n\r\n    Chance.prototype.klout = function () {\r\n        return this.natural({min: 1, max: 99});\r\n    };\r\n\r\n    Chance.prototype.semver = function (options) {\r\n        options = initOptions(options, { include_prerelease: true });\r\n\r\n        var range = this.pickone([\"^\", \"~\", \"<\", \">\", \"<=\", \">=\", \"=\"]);\r\n        if (options.range) {\r\n            range = options.range;\r\n        }\r\n\r\n        var prerelease = \"\";\r\n        if (options.include_prerelease) {\r\n            prerelease = this.weighted([\"\", \"-dev\", \"-beta\", \"-alpha\"], [50, 10, 5, 1]);\r\n        }\r\n        return range + this.rpg('3d10').join('.') + prerelease;\r\n    };\r\n\r\n    Chance.prototype.tlds = function () {\r\n        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io', 'ac', 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax', 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bm', 'bn', 'bo', 'bq', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'fi', 'fj', 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io', 'iq', 'ir', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki', 'km', 'kn', 'kp', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss', 'st', 'su', 'sv', 'sx', 'sy', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tp', 'tr', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug', 'uk', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'];\r\n    };\r\n\r\n    Chance.prototype.tld = function () {\r\n        return this.pick(this.tlds());\r\n    };\r\n\r\n    Chance.prototype.twitter = function () {\r\n        return '@' + this.word();\r\n    };\r\n\r\n    Chance.prototype.url = function (options) {\r\n        options = initOptions(options, { protocol: \"http\", domain: this.domain(options), domain_prefix: \"\", path: this.word(), extensions: []});\r\n\r\n        var extension = options.extensions.length > 0 ? \".\" + this.pick(options.extensions) : \"\";\r\n        var domain = options.domain_prefix ? options.domain_prefix + \".\" + options.domain : options.domain;\r\n\r\n        return options.protocol + \"://\" + domain + \"/\" + options.path + extension;\r\n    };\r\n\r\n    // -- End Web --\r\n\r\n    // -- Location --\r\n\r\n    Chance.prototype.address = function (options) {\r\n        options = initOptions(options);\r\n        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);\r\n    };\r\n\r\n    Chance.prototype.altitude = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: 0, max: 8848});\r\n        return this.floating({\r\n            min: options.min,\r\n            max: options.max,\r\n            fixed: options.fixed\r\n        });\r\n    };\r\n\r\n    Chance.prototype.areacode = function (options) {\r\n        options = initOptions(options, {parens : true});\r\n        // Don't want area codes to start with 1, or have a 9 as the second digit\r\n        var areacode = this.natural({min: 2, max: 9}).toString() +\r\n                this.natural({min: 0, max: 8}).toString() +\r\n                this.natural({min: 0, max: 9}).toString();\r\n\r\n        return options.parens ? '(' + areacode + ')' : areacode;\r\n    };\r\n\r\n    Chance.prototype.city = function () {\r\n        return this.capitalize(this.word({syllables: 3}));\r\n    };\r\n\r\n    Chance.prototype.coordinates = function (options) {\r\n        return this.latitude(options) + ', ' + this.longitude(options);\r\n    };\r\n\r\n    Chance.prototype.countries = function () {\r\n        return this.get(\"countries\");\r\n    };\r\n\r\n    Chance.prototype.country = function (options) {\r\n        options = initOptions(options);\r\n        var country = this.pick(this.countries());\r\n        return options.full ? country.name : country.abbreviation;\r\n    };\r\n\r\n    Chance.prototype.depth = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: -10994, max: 0});\r\n        return this.floating({\r\n            min: options.min,\r\n            max: options.max,\r\n            fixed: options.fixed\r\n        });\r\n    };\r\n\r\n    Chance.prototype.geohash = function (options) {\r\n        options = initOptions(options, { length: 7 });\r\n        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });\r\n    };\r\n\r\n    Chance.prototype.geojson = function (options) {\r\n        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);\r\n    };\r\n\r\n    Chance.prototype.latitude = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: -90, max: 90});\r\n        return this.floating({min: options.min, max: options.max, fixed: options.fixed});\r\n    };\r\n\r\n    Chance.prototype.longitude = function (options) {\r\n        options = initOptions(options, {fixed: 5, min: -180, max: 180});\r\n        return this.floating({min: options.min, max: options.max, fixed: options.fixed});\r\n    };\r\n\r\n    Chance.prototype.phone = function (options) {\r\n        var self = this,\r\n            numPick,\r\n            ukNum = function (parts) {\r\n                var section = [];\r\n                //fills the section part of the phone number with random numbers.\r\n                parts.sections.forEach(function(n) {\r\n                    section.push(self.string({ pool: '0123456789', length: n}));\r\n                });\r\n                return parts.area + section.join(' ');\r\n            };\r\n        options = initOptions(options, {\r\n            formatted: true,\r\n            country: 'us',\r\n            mobile: false\r\n        });\r\n        if (!options.formatted) {\r\n            options.parens = false;\r\n        }\r\n        var phone;\r\n        switch (options.country) {\r\n            case 'fr':\r\n                if (!options.mobile) {\r\n                    numPick = this.pick([\r\n                        // Valid zone and département codes.\r\n                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),\r\n                        '09' + self.string({ pool: '0123456789', length: 8}),\r\n                    ]);\r\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\r\n                } else {\r\n                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});\r\n                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;\r\n                }\r\n                break;\r\n            case 'uk':\r\n                if (!options.mobile) {\r\n                    numPick = this.pick([\r\n                        //valid area codes of major cities/counties followed by random numbers in required format.\r\n                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },\r\n                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },\r\n                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },\r\n                        { area: '024 7', sections: [3,4] },\r\n                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },\r\n                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [5] },\r\n                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [5] },\r\n                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [5] },\r\n                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [5] },\r\n                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [5] },\r\n                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [5] },\r\n                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [5] },\r\n                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [5] }\r\n                    ]);\r\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');\r\n                } else {\r\n                    numPick = this.pick([\r\n                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },\r\n                        { area: '07624 ', sections: [6] }\r\n                    ]);\r\n                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');\r\n                }\r\n                break;\r\n            case 'us':\r\n                var areacode = this.areacode(options).toString();\r\n                var exchange = this.natural({ min: 2, max: 9 }).toString() +\r\n                    this.natural({ min: 0, max: 9 }).toString() +\r\n                    this.natural({ min: 0, max: 9 }).toString();\r\n                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}\r\n                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;\r\n        }\r\n        return phone;\r\n    };\r\n\r\n    Chance.prototype.postal = function () {\r\n        // Postal District\r\n        var pd = this.character({pool: \"XVTSRPNKLMHJGECBA\"});\r\n        // Forward Sortation Area (FSA)\r\n        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"});\r\n        // Local Delivery Unut (LDU)\r\n        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: \"upper\"}) + this.natural({max: 9});\r\n\r\n        return fsa + \" \" + ldu;\r\n    };\r\n\r\n    Chance.prototype.provinces = function (options) {\r\n        options = initOptions(options, { country: 'ca' });\r\n        return this.get(\"provinces\")[options.country.toLowerCase()];\r\n    };\r\n\r\n    Chance.prototype.province = function (options) {\r\n        return (options && options.full) ?\r\n            this.pick(this.provinces(options)).name :\r\n            this.pick(this.provinces(options)).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.state = function (options) {\r\n        return (options && options.full) ?\r\n            this.pick(this.states(options)).name :\r\n            this.pick(this.states(options)).abbreviation;\r\n    };\r\n\r\n    Chance.prototype.states = function (options) {\r\n        options = initOptions(options, { country: 'us', us_states_and_dc: true } );\r\n\r\n        var states;\r\n\r\n        switch (options.country.toLowerCase()) {\r\n            case 'us':\r\n                var us_states_and_dc = this.get(\"us_states_and_dc\"),\r\n                    territories = this.get(\"territories\"),\r\n                    armed_forces = this.get(\"armed_forces\");\r\n\r\n                states = [];\r\n\r\n                if (options.us_states_and_dc) {\r\n                    states = states.concat(us_states_and_dc);\r\n                }\r\n                if (options.territories) {\r\n                    states = states.concat(territories);\r\n                }\r\n                if (options.armed_forces) {\r\n                    states = states.concat(armed_forces);\r\n                }\r\n                break;\r\n            case 'it':\r\n                states = this.get(\"country_regions\")[options.country.toLowerCase()];\r\n        }\r\n\r\n        return states;\r\n    };\r\n\r\n    Chance.prototype.street = function (options) {\r\n        options = initOptions(options, { country: 'us', syllables: 2 });\r\n        var     street;\r\n\r\n        switch (options.country.toLowerCase()) {\r\n            case 'us':\r\n                street = this.word({ syllables: options.syllables });\r\n                street = this.capitalize(street);\r\n                street += ' ';\r\n                street += options.short_suffix ?\r\n                    this.street_suffix(options).abbreviation :\r\n                    this.street_suffix(options).name;\r\n                break;\r\n            case 'it':\r\n                street = this.word({ syllables: options.syllables });\r\n                street = this.capitalize(street);\r\n                street = (options.short_suffix ?\r\n                    this.street_suffix(options).abbreviation :\r\n                    this.street_suffix(options).name) + \" \" + street;\r\n                break;\r\n        }\r\n        return street;\r\n    };\r\n\r\n    Chance.prototype.street_suffix = function (options) {\r\n        options = initOptions(options, { country: 'us' });\r\n        return this.pick(this.street_suffixes(options));\r\n    };\r\n\r\n    Chance.prototype.street_suffixes = function (options) {\r\n        options = initOptions(options, { country: 'us' });\r\n        // These are the most common suffixes.\r\n        return this.get(\"street_suffixes\")[options.country.toLowerCase()];\r\n    };\r\n\r\n    // Note: only returning US zip codes, internationalization will be a whole\r\n    // other beast to tackle at some point.\r\n    Chance.prototype.zip = function (options) {\r\n        var zip = this.n(this.natural, 5, {max: 9});\r\n\r\n        if (options && options.plusfour === true) {\r\n            zip.push('-');\r\n            zip = zip.concat(this.n(this.natural, 4, {max: 9}));\r\n        }\r\n\r\n        return zip.join(\"\");\r\n    };\r\n\r\n    // -- End Location --\r\n\r\n    // -- Time\r\n\r\n    Chance.prototype.ampm = function () {\r\n        return this.bool() ? 'am' : 'pm';\r\n    };\r\n\r\n    Chance.prototype.date = function (options) {\r\n        var date_string, date;\r\n\r\n        // If interval is specified we ignore preset\r\n        if(options && (options.min || options.max)) {\r\n            options = initOptions(options, {\r\n                american: true,\r\n                string: false\r\n            });\r\n            var min = typeof options.min !== \"undefined\" ? options.min.getTime() : 1;\r\n            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1\r\n            var max = typeof options.max !== \"undefined\" ? options.max.getTime() : 8640000000000000;\r\n\r\n            date = new Date(this.natural({min: min, max: max}));\r\n        } else {\r\n            var m = this.month({raw: true});\r\n            var daysInMonth = m.days;\r\n\r\n            if(options && options.month) {\r\n                // Mod 12 to allow months outside range of 0-11 (not encouraged, but also not prevented).\r\n                daysInMonth = this.get('months')[((options.month % 12) + 12) % 12].days;\r\n            }\r\n\r\n            options = initOptions(options, {\r\n                year: parseInt(this.year(), 10),\r\n                // Necessary to subtract 1 because Date() 0-indexes month but not day or year\r\n                // for some reason.\r\n                month: m.numeric - 1,\r\n                day: this.natural({min: 1, max: daysInMonth}),\r\n                hour: this.hour(),\r\n                minute: this.minute(),\r\n                second: this.second(),\r\n                millisecond: this.millisecond(),\r\n                american: true,\r\n                string: false\r\n            });\r\n\r\n            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);\r\n        }\r\n\r\n        if (options.american) {\r\n            // Adding 1 to the month is necessary because Date() 0-indexes\r\n            // months but not day for some odd reason.\r\n            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\r\n        } else {\r\n            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();\r\n        }\r\n\r\n        return options.string ? date_string : date;\r\n    };\r\n\r\n    Chance.prototype.hammertime = function (options) {\r\n        return this.date(options).getTime();\r\n    };\r\n\r\n    Chance.prototype.hour = function (options) {\r\n        options = initOptions(options, {\r\n            min: options && options.twentyfour ? 0 : 1,\r\n            max: options && options.twentyfour ? 23 : 12\r\n        });\r\n\r\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\r\n        testRange(options.twentyfour && options.max > 23, \"Chance: Max cannot be greater than 23 for twentyfour option.\");\r\n        testRange(!options.twentyfour && options.max > 12, \"Chance: Max cannot be greater than 12.\");\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        return this.natural({min: options.min, max: options.max});\r\n    };\r\n\r\n    Chance.prototype.millisecond = function () {\r\n        return this.natural({max: 999});\r\n    };\r\n\r\n    Chance.prototype.minute = Chance.prototype.second = function (options) {\r\n        options = initOptions(options, {min: 0, max: 59});\r\n\r\n        testRange(options.min < 0, \"Chance: Min cannot be less than 0.\");\r\n        testRange(options.max > 59, \"Chance: Max cannot be greater than 59.\");\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        return this.natural({min: options.min, max: options.max});\r\n    };\r\n\r\n    Chance.prototype.month = function (options) {\r\n        options = initOptions(options, {min: 1, max: 12});\r\n\r\n        testRange(options.min < 1, \"Chance: Min cannot be less than 1.\");\r\n        testRange(options.max > 12, \"Chance: Max cannot be greater than 12.\");\r\n        testRange(options.min > options.max, \"Chance: Min cannot be greater than Max.\");\r\n\r\n        var month = this.pick(this.months().slice(options.min - 1, options.max));\r\n        return options.raw ? month : month.name;\r\n    };\r\n\r\n    Chance.prototype.months = function () {\r\n        return this.get(\"months\");\r\n    };\r\n\r\n    Chance.prototype.second = function () {\r\n        return this.natural({max: 59});\r\n    };\r\n\r\n    Chance.prototype.timestamp = function () {\r\n        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});\r\n    };\r\n\r\n    Chance.prototype.weekday = function (options) {\r\n        options = initOptions(options, {weekday_only: false});\r\n        var weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\r\n        if (!options.weekday_only) {\r\n            weekdays.push(\"Saturday\");\r\n            weekdays.push(\"Sunday\");\r\n        }\r\n        return this.pickone(weekdays);\r\n    };\r\n\r\n    Chance.prototype.year = function (options) {\r\n        // Default to current year as min if none specified\r\n        options = initOptions(options, {min: new Date().getFullYear()});\r\n\r\n        // Default to one century after current year as max if none specified\r\n        options.max = (typeof options.max !== \"undefined\") ? options.max : options.min + 100;\r\n\r\n        return this.natural(options).toString();\r\n    };\r\n\r\n    // -- End Time\r\n\r\n    // -- Finance --\r\n\r\n    Chance.prototype.cc = function (options) {\r\n        options = initOptions(options);\r\n\r\n        var type, number, to_generate;\r\n\r\n        type = (options.type) ?\r\n                    this.cc_type({ name: options.type, raw: true }) :\r\n                    this.cc_type({ raw: true });\r\n\r\n        number = type.prefix.split(\"\");\r\n        to_generate = type.length - type.prefix.length - 1;\r\n\r\n        // Generates n - 1 digits\r\n        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));\r\n\r\n        // Generates the last digit according to Luhn algorithm\r\n        number.push(this.luhn_calculate(number.join(\"\")));\r\n\r\n        return number.join(\"\");\r\n    };\r\n\r\n    Chance.prototype.cc_types = function () {\r\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\r\n        return this.get(\"cc_types\");\r\n    };\r\n\r\n    Chance.prototype.cc_type = function (options) {\r\n        options = initOptions(options);\r\n        var types = this.cc_types(),\r\n            type = null;\r\n\r\n        if (options.name) {\r\n            for (var i = 0; i < types.length; i++) {\r\n                // Accept either name or short_name to specify card type\r\n                if (types[i].name === options.name || types[i].short_name === options.name) {\r\n                    type = types[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (type === null) {\r\n                throw new RangeError(\"Credit card type '\" + options.name + \"'' is not supported\");\r\n            }\r\n        } else {\r\n            type = this.pick(types);\r\n        }\r\n\r\n        return options.raw ? type : type.name;\r\n    };\r\n\r\n    //return all world currency by ISO 4217\r\n    Chance.prototype.currency_types = function () {\r\n        return this.get(\"currency_types\");\r\n    };\r\n\r\n    //return random world currency by ISO 4217\r\n    Chance.prototype.currency = function () {\r\n        return this.pick(this.currency_types());\r\n    };\r\n\r\n    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code\r\n    Chance.prototype.currency_pair = function (returnAsString) {\r\n        var currencies = this.unique(this.currency, 2, {\r\n            comparator: function(arr, val) {\r\n\r\n                return arr.reduce(function(acc, item) {\r\n                    // If a match has been found, short circuit check and just return\r\n                    return acc || (item.code === val.code);\r\n                }, false);\r\n            }\r\n        });\r\n\r\n        if (returnAsString) {\r\n            return currencies[0].code + '/' + currencies[1].code;\r\n        } else {\r\n            return currencies;\r\n        }\r\n    };\r\n\r\n    Chance.prototype.dollar = function (options) {\r\n        // By default, a somewhat more sane max for dollar than all available numbers\r\n        options = initOptions(options, {max : 10000, min : 0});\r\n\r\n        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),\r\n            cents = dollar.split('.')[1];\r\n\r\n        if (cents === undefined) {\r\n            dollar += '.00';\r\n        } else if (cents.length < 2) {\r\n            dollar = dollar + '0';\r\n        }\r\n\r\n        if (dollar < 0) {\r\n            return '-$' + dollar.replace('-', '');\r\n        } else {\r\n            return '$' + dollar;\r\n        }\r\n    };\r\n\r\n    Chance.prototype.euro = function (options) {\r\n        return Number(this.dollar(options).replace(\"$\", \"\")).toLocaleString() + \"€\";\r\n    };\r\n\r\n    Chance.prototype.exp = function (options) {\r\n        options = initOptions(options);\r\n        var exp = {};\r\n\r\n        exp.year = this.exp_year();\r\n\r\n        // If the year is this year, need to ensure month is greater than the\r\n        // current month or this expiration will not be valid\r\n        if (exp.year === (new Date().getFullYear()).toString()) {\r\n            exp.month = this.exp_month({future: true});\r\n        } else {\r\n            exp.month = this.exp_month();\r\n        }\r\n\r\n        return options.raw ? exp : exp.month + '/' + exp.year;\r\n    };\r\n\r\n    Chance.prototype.exp_month = function (options) {\r\n        options = initOptions(options);\r\n        var month, month_int,\r\n            // Date object months are 0 indexed\r\n            curMonth = new Date().getMonth() + 1;\r\n\r\n        if (options.future && (curMonth !== 12)) {\r\n            do {\r\n                month = this.month({raw: true}).numeric;\r\n                month_int = parseInt(month, 10);\r\n            } while (month_int <= curMonth);\r\n        } else {\r\n            month = this.month({raw: true}).numeric;\r\n        }\r\n\r\n        return month;\r\n    };\r\n\r\n    Chance.prototype.exp_year = function () {\r\n        var curMonth = new Date().getMonth() + 1,\r\n            curYear = new Date().getFullYear();\r\n\r\n        return this.year({min: ((curMonth === 12) ? (curYear + 1) : curYear), max: (curYear + 10)});\r\n    };\r\n\r\n    Chance.prototype.vat = function (options) {\r\n        options = initOptions(options, { country: 'it' });\r\n        switch (options.country.toLowerCase()) {\r\n            case 'it':\r\n                return this.it_vat();\r\n        }\r\n    };\r\n\r\n    // -- End Finance\r\n\r\n    // -- Regional\r\n\r\n    Chance.prototype.it_vat = function () {\r\n        var it_vat = this.natural({min: 1, max: 1800000});\r\n\r\n        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: 'it' })).code, 3);\r\n        return it_vat + this.luhn_calculate(it_vat);\r\n    };\r\n\r\n    /*\r\n     * this generator is written following the official algorithm\r\n     * all data can be passed explicitely or randomized by calling chance.cf() without options\r\n     * the code does not check that the input data is valid (it goes beyond the scope of the generator)\r\n     *\r\n     * @param  [Object] options = { first: first name,\r\n     *                              last: last name,\r\n     *                              gender: female|male,\r\n                                    birthday: JavaScript date object,\r\n                                    city: string(4), 1 letter + 3 numbers\r\n                                   }\r\n     * @return [string] codice fiscale\r\n     *\r\n    */\r\n    Chance.prototype.cf = function (options) {\r\n        options = options || {};\r\n        var gender = !!options.gender ? options.gender : this.gender(),\r\n            first = !!options.first ? options.first : this.first( { gender: gender, nationality: 'it'} ),\r\n            last = !!options.last ? options.last : this.last( { nationality: 'it'} ),\r\n            birthday = !!options.birthday ? options.birthday : this.birthday(),\r\n            city = !!options.city ? options.city : this.pickone(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'Z']) + this.pad(this.natural({max:999}), 3),\r\n            cf = [],\r\n            name_generator = function(name, isLast) {\r\n                var temp,\r\n                    return_value = [];\r\n\r\n                if (name.length < 3) {\r\n                    return_value = name.split(\"\").concat(\"XXX\".split(\"\")).splice(0,3);\r\n                }\r\n                else {\r\n                    temp = name.toUpperCase().split('').map(function(c){\r\n                        return (\"BCDFGHJKLMNPRSTVWZ\".indexOf(c) !== -1) ? c : undefined;\r\n                    }).join('');\r\n                    if (temp.length > 3) {\r\n                        if (isLast) {\r\n                            temp = temp.substr(0,3);\r\n                        } else {                        \r\n                            temp = temp[0] + temp.substr(2,2);\r\n                        }\r\n                    }\r\n                    if (temp.length < 3) {\r\n                        return_value = temp;\r\n                        temp = name.toUpperCase().split('').map(function(c){\r\n                            return (\"AEIOU\".indexOf(c) !== -1) ? c : undefined;\r\n                        }).join('').substr(0, 3 - return_value.length);\r\n                    }\r\n                    return_value = return_value + temp;\r\n                }\r\n\r\n                return return_value;\r\n            },\r\n            date_generator = function(birthday, gender, that) {\r\n                var lettermonths = ['A', 'B', 'C', 'D', 'E', 'H', 'L', 'M', 'P', 'R', 'S', 'T'];\r\n\r\n                return  birthday.getFullYear().toString().substr(2) + \r\n                        lettermonths[birthday.getMonth()] +\r\n                        that.pad(birthday.getDate() + ((gender.toLowerCase() === \"female\") ? 40 : 0), 2);\r\n            },\r\n            checkdigit_generator = function(cf) {\r\n                var range1 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                    range2 = \"ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                    evens  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                    odds   = \"BAKPLCQDREVOSFTGUHMINJWZYX\",\r\n                    digit  = 0;\r\n\r\n\r\n                for(var i = 0; i < 15; i++) {\r\n                    if (i % 2 !== 0) {\r\n                        digit += evens.indexOf(range2[range1.indexOf(cf[i])]);\r\n                    }\r\n                    else {\r\n                        digit +=  odds.indexOf(range2[range1.indexOf(cf[i])]);\r\n                    }\r\n                }\r\n                return evens[digit % 26];\r\n            };\r\n\r\n        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split(\"\")).join(\"\");\r\n        cf += checkdigit_generator(cf.toUpperCase(), this);\r\n\r\n        return cf.toUpperCase();\r\n    };\r\n\r\n    Chance.prototype.pl_pesel = function () {\r\n        var number = this.natural({min: 1, max: 9999999999});\r\n        var arr = this.pad(number, 10).split('');\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = parseInt(arr[i]);\r\n        }\r\n\r\n        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;\r\n        if(controlNumber !== 0) {\r\n            controlNumber = 10 - controlNumber;\r\n        }\r\n\r\n        return arr.join('') + controlNumber;\r\n    };\r\n\r\n    Chance.prototype.pl_nip = function () {\r\n        var number = this.natural({min: 1, max: 999999999});\r\n        var arr = this.pad(number, 9).split('');\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = parseInt(arr[i]);\r\n        }\r\n\r\n        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;\r\n        if(controlNumber === 10) {\r\n            return this.pl_nip();\r\n        }\r\n\r\n        return arr.join('') + controlNumber;\r\n    };\r\n\r\n    Chance.prototype.pl_regon = function () {\r\n        var number = this.natural({min: 1, max: 99999999});\r\n        var arr = this.pad(number, 8).split('');\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = parseInt(arr[i]);\r\n        }\r\n\r\n        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;\r\n        if(controlNumber === 10) {\r\n            controlNumber = 0;\r\n        }\r\n\r\n        return arr.join('') + controlNumber;\r\n    };\r\n\r\n    // -- End Regional\r\n\r\n    // -- Miscellaneous --\r\n\r\n    // Dice - For all the board game geeks out there, myself included ;)\r\n    function diceFn (range) {\r\n        return function () {\r\n            return this.natural(range);\r\n        };\r\n    }\r\n    Chance.prototype.d4 = diceFn({min: 1, max: 4});\r\n    Chance.prototype.d6 = diceFn({min: 1, max: 6});\r\n    Chance.prototype.d8 = diceFn({min: 1, max: 8});\r\n    Chance.prototype.d10 = diceFn({min: 1, max: 10});\r\n    Chance.prototype.d12 = diceFn({min: 1, max: 12});\r\n    Chance.prototype.d20 = diceFn({min: 1, max: 20});\r\n    Chance.prototype.d30 = diceFn({min: 1, max: 30});\r\n    Chance.prototype.d100 = diceFn({min: 1, max: 100});\r\n\r\n    Chance.prototype.rpg = function (thrown, options) {\r\n        options = initOptions(options);\r\n        if (!thrown) {\r\n            throw new RangeError(\"A type of die roll must be included\");\r\n        } else {\r\n            var bits = thrown.toLowerCase().split(\"d\"),\r\n                rolls = [];\r\n\r\n            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {\r\n                throw new Error(\"Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die\");\r\n            }\r\n            for (var i = bits[0]; i > 0; i--) {\r\n                rolls[i - 1] = this.natural({min: 1, max: bits[1]});\r\n            }\r\n            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;\r\n        }\r\n    };\r\n\r\n    // Guid\r\n    Chance.prototype.guid = function (options) {\r\n        options = initOptions(options, { version: 5 });\r\n\r\n        var guid_pool = \"abcdef1234567890\",\r\n            variant_pool = \"ab89\",\r\n            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +\r\n                   this.string({ pool: guid_pool, length: 4 }) + '-' +\r\n                   // The Version\r\n                   options.version +\r\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\r\n                   // The Variant\r\n                   this.string({ pool: variant_pool, length: 1 }) +\r\n                   this.string({ pool: guid_pool, length: 3 }) + '-' +\r\n                   this.string({ pool: guid_pool, length: 12 });\r\n        return guid;\r\n    };\r\n\r\n    // Hash\r\n    Chance.prototype.hash = function (options) {\r\n        options = initOptions(options, {length : 40, casing: 'lower'});\r\n        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;\r\n        return this.string({pool: pool, length: options.length});\r\n    };\r\n\r\n    Chance.prototype.luhn_check = function (num) {\r\n        var str = num.toString();\r\n        var checkDigit = +str.substring(str.length - 1);\r\n        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));\r\n    };\r\n\r\n    Chance.prototype.luhn_calculate = function (num) {\r\n        var digits = num.toString().split(\"\").reverse();\r\n        var sum = 0;\r\n        var digit;\r\n\r\n        for (var i = 0, l = digits.length; l > i; ++i) {\r\n            digit = +digits[i];\r\n            if (i % 2 === 0) {\r\n                digit *= 2;\r\n                if (digit > 9) {\r\n                    digit -= 9;\r\n                }\r\n            }\r\n            sum += digit;\r\n        }\r\n        return (sum * 9) % 10;\r\n    };\r\n\r\n    // MD5 Hash\r\n    Chance.prototype.md5 = function(options) {\r\n        var opts = { str: '', key: null, raw: false };\r\n\r\n        if (!options) {\r\n            opts.str = this.string();\r\n            options = {};\r\n        }\r\n        else if (typeof options === 'string') {\r\n            opts.str = options;\r\n            options = {};\r\n        }\r\n        else if (typeof options !== 'object') {\r\n            return null;\r\n        }\r\n        else if(options.constructor === 'Array') {\r\n            return null;\r\n        }\r\n\r\n        opts = initOptions(options, opts);\r\n\r\n        if(!opts.str){\r\n            throw new Error('A parameter is required to return an md5 hash.');\r\n        }\r\n\r\n        return this.bimd5.md5(opts.str, opts.key, opts.raw);\r\n    };\r\n\r\n    /**\r\n     * #Description:\r\n     * =====================================================\r\n     * Generate random file name with extention\r\n     *\r\n     * The argument provide extention type \r\n     * -> raster \r\n     * -> vector\r\n     * -> 3d\r\n     * -> document\r\n     *\r\n     * If noting is provided the function return random file name with random \r\n     * extention type of any kind\r\n     *\r\n     * The user can validate the file name length range \r\n     * If noting provided the generated file name is radom\r\n     *\r\n     * #Extention Pool :\r\n     * * Currently the supported extentions are \r\n     *  -> some of the most popular raster image extentions\r\n     *  -> some of the most popular vector image extentions\r\n     *  -> some of the most popular 3d image extentions\r\n     *  -> some of the most popular document extentions\r\n     * \r\n     * #Examples :\r\n     * =====================================================\r\n     *\r\n     * Return random file name with random extention. The file extention\r\n     * is provided by a predifined collection of extentions. More abouth the extention\r\n     * pool can be fond in #Extention Pool section\r\n     * \r\n     * chance.file()                        \r\n     * => dsfsdhjf.xml\r\n     *\r\n     * In order to generate a file name with sspecific length, specify the \r\n     * length property and integer value. The extention is going to be random\r\n     *  \r\n     * chance.file({length : 10})           \r\n     * => asrtineqos.pdf\r\n     *\r\n     * In order to geerate file with extention form some of the predifined groups\r\n     * of the extention pool just specify the extenton pool category in fileType property\r\n     *  \r\n     * chance.file({fileType : 'raster'})   \r\n     * => dshgssds.psd\r\n     *\r\n     * You can provide specific extention for your files\r\n     * chance.file({extention : 'html'})    \r\n     * => djfsd.html\r\n     *\r\n     * Or you could pass custom collection of extentons bt array or by object\r\n     * chance.file({extentions : [...]})    \r\n     * => dhgsdsd.psd\r\n     *  \r\n     * chance.file({extentions : { key : [...], key : [...]}})\r\n     * => djsfksdjsd.xml\r\n     * \r\n     * @param  [collection] options \r\n     * @return [string]\r\n     * \r\n     */\r\n    Chance.prototype.file = function(options) {\r\n        \r\n        var fileOptions = options || {};\r\n        var poolCollectionKey = \"fileExtension\";\r\n        var typeRange   = Object.keys(this.get(\"fileExtension\"));//['raster', 'vector', '3d', 'document'];\r\n        var fileName;\r\n        var fileExtention;\r\n\r\n        // Generate random file name \r\n        fileName = this.word({length : fileOptions.length});\r\n\r\n        // Generate file by specific extention provided by the user\r\n        if(fileOptions.extention) {\r\n\r\n            fileExtention = fileOptions.extention;\r\n            return (fileName + '.' + fileExtention);\r\n        }\r\n\r\n        // Generate file by specific axtention collection\r\n        if(fileOptions.extentions) {\r\n\r\n            if(Array.isArray(fileOptions.extentions)) {\r\n\r\n                fileExtention = this.pickone(fileOptions.extentions);\r\n                return (fileName + '.' + fileExtention);\r\n            }\r\n            else if(fileOptions.extentions.constructor === Object) {\r\n                \r\n                var extentionObjectCollection = fileOptions.extentions;\r\n                var keys = Object.keys(extentionObjectCollection);\r\n\r\n                fileExtention = this.pickone(extentionObjectCollection[this.pickone(keys)]);\r\n                return (fileName + '.' + fileExtention);\r\n            }\r\n\r\n            throw new Error(\"Expect collection of type Array or Object to be passed as an argument \");\r\n        } \r\n\r\n        // Generate file extention based on specific file type\r\n        if(fileOptions.fileType) {\r\n\r\n            var fileType = fileOptions.fileType;\r\n            if(typeRange.indexOf(fileType) !== -1) {\r\n\r\n                fileExtention = this.pickone(this.get(poolCollectionKey)[fileType]);\r\n                return (fileName + '.' + fileExtention);\r\n            }\r\n\r\n            throw new Error(\"Expect file type value to be 'raster', 'vector', '3d' or 'document' \");\r\n        }\r\n\r\n        // Generate random file name if no extenton options are passed\r\n        fileExtention = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);\r\n        return (fileName + '.' + fileExtention);\r\n    };     \r\n\r\n    var data = {\r\n\r\n        firstNames: {\r\n            \"male\": {\r\n                \"en\": [\"James\", \"John\", \"Robert\", \"Michael\", \"William\", \"David\", \"Richard\", \"Joseph\", \"Charles\", \"Thomas\", \"Christopher\", \"Daniel\", \"Matthew\", \"George\", \"Donald\", \"Anthony\", \"Paul\", \"Mark\", \"Edward\", \"Steven\", \"Kenneth\", \"Andrew\", \"Brian\", \"Joshua\", \"Kevin\", \"Ronald\", \"Timothy\", \"Jason\", \"Jeffrey\", \"Frank\", \"Gary\", \"Ryan\", \"Nicholas\", \"Eric\", \"Stephen\", \"Jacob\", \"Larry\", \"Jonathan\", \"Scott\", \"Raymond\", \"Justin\", \"Brandon\", \"Gregory\", \"Samuel\", \"Benjamin\", \"Patrick\", \"Jack\", \"Henry\", \"Walter\", \"Dennis\", \"Jerry\", \"Alexander\", \"Peter\", \"Tyler\", \"Douglas\", \"Harold\", \"Aaron\", \"Jose\", \"Adam\", \"Arthur\", \"Zachary\", \"Carl\", \"Nathan\", \"Albert\", \"Kyle\", \"Lawrence\", \"Joe\", \"Willie\", \"Gerald\", \"Roger\", \"Keith\", \"Jeremy\", \"Terry\", \"Harry\", \"Ralph\", \"Sean\", \"Jesse\", \"Roy\", \"Louis\", \"Billy\", \"Austin\", \"Bruce\", \"Eugene\", \"Christian\", \"Bryan\", \"Wayne\", \"Russell\", \"Howard\", \"Fred\", \"Ethan\", \"Jordan\", \"Philip\", \"Alan\", \"Juan\", \"Randy\", \"Vincent\", \"Bobby\", \"Dylan\", \"Johnny\", \"Phillip\", \"Victor\", \"Clarence\", \"Ernest\", \"Martin\", \"Craig\", \"Stanley\", \"Shawn\", \"Travis\", \"Bradley\", \"Leonard\", \"Earl\", \"Gabriel\", \"Jimmy\", \"Francis\", \"Todd\", \"Noah\", \"Danny\", \"Dale\", \"Cody\", \"Carlos\", \"Allen\", \"Frederick\", \"Logan\", \"Curtis\", \"Alex\", \"Joel\", \"Luis\", \"Norman\", \"Marvin\", \"Glenn\", \"Tony\", \"Nathaniel\", \"Rodney\", \"Melvin\", \"Alfred\", \"Steve\", \"Cameron\", \"Chad\", \"Edwin\", \"Caleb\", \"Evan\", \"Antonio\", \"Lee\", \"Herbert\", \"Jeffery\", \"Isaac\", \"Derek\", \"Ricky\", \"Marcus\", \"Theodore\", \"Elijah\", \"Luke\", \"Jesus\", \"Eddie\", \"Troy\", \"Mike\", \"Dustin\", \"Ray\", \"Adrian\", \"Bernard\", \"Leroy\", \"Angel\", \"Randall\", \"Wesley\", \"Ian\", \"Jared\", \"Mason\", \"Hunter\", \"Calvin\", \"Oscar\", \"Clifford\", \"Jay\", \"Shane\", \"Ronnie\", \"Barry\", \"Lucas\", \"Corey\", \"Manuel\", \"Leo\", \"Tommy\", \"Warren\", \"Jackson\", \"Isaiah\", \"Connor\", \"Don\", \"Dean\", \"Jon\", \"Julian\", \"Miguel\", \"Bill\", \"Lloyd\", \"Charlie\", \"Mitchell\", \"Leon\", \"Jerome\", \"Darrell\", \"Jeremiah\", \"Alvin\", \"Brett\", \"Seth\", \"Floyd\", \"Jim\", \"Blake\", \"Micheal\", \"Gordon\", \"Trevor\", \"Lewis\", \"Erik\", \"Edgar\", \"Vernon\", \"Devin\", \"Gavin\", \"Jayden\", \"Chris\", \"Clyde\", \"Tom\", \"Derrick\", \"Mario\", \"Brent\", \"Marc\", \"Herman\", \"Chase\", \"Dominic\", \"Ricardo\", \"Franklin\", \"Maurice\", \"Max\", \"Aiden\", \"Owen\", \"Lester\", \"Gilbert\", \"Elmer\", \"Gene\", \"Francisco\", \"Glen\", \"Cory\", \"Garrett\", \"Clayton\", \"Sam\", \"Jorge\", \"Chester\", \"Alejandro\", \"Jeff\", \"Harvey\", \"Milton\", \"Cole\", \"Ivan\", \"Andre\", \"Duane\", \"Landon\"],\r\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163\r\n                \"it\": [\"Adolfo\", \"Alberto\", \"Aldo\", \"Alessandro\", \"Alessio\", \"Alfredo\", \"Alvaro\", \"Andrea\", \"Angelo\", \"Angiolo\", \"Antonino\", \"Antonio\", \"Attilio\", \"Benito\", \"Bernardo\", \"Bruno\", \"Carlo\", \"Cesare\", \"Christian\", \"Claudio\", \"Corrado\", \"Cosimo\", \"Cristian\", \"Cristiano\", \"Daniele\", \"Dario\", \"David\", \"Davide\", \"Diego\", \"Dino\", \"Domenico\", \"Duccio\", \"Edoardo\", \"Elia\", \"Elio\", \"Emanuele\", \"Emiliano\", \"Emilio\", \"Enrico\", \"Enzo\", \"Ettore\", \"Fabio\", \"Fabrizio\", \"Federico\", \"Ferdinando\", \"Fernando\", \"Filippo\", \"Francesco\", \"Franco\", \"Gabriele\", \"Giacomo\", \"Giampaolo\", \"Giampiero\", \"Giancarlo\", \"Gianfranco\", \"Gianluca\", \"Gianmarco\", \"Gianni\", \"Gino\", \"Giorgio\", \"Giovanni\", \"Giuliano\", \"Giulio\", \"Giuseppe\", \"Graziano\", \"Gregorio\", \"Guido\", \"Iacopo\", \"Jacopo\", \"Lapo\", \"Leonardo\", \"Lorenzo\", \"Luca\", \"Luciano\", \"Luigi\", \"Manuel\", \"Marcello\", \"Marco\", \"Marino\", \"Mario\", \"Massimiliano\", \"Massimo\", \"Matteo\", \"Mattia\", \"Maurizio\", \"Mauro\", \"Michele\", \"Mirko\", \"Mohamed\", \"Nello\", \"Neri\", \"Niccolò\", \"Nicola\", \"Osvaldo\", \"Otello\", \"Paolo\", \"Pier Luigi\", \"Piero\", \"Pietro\", \"Raffaele\", \"Remo\", \"Renato\", \"Renzo\", \"Riccardo\", \"Roberto\", \"Rolando\", \"Romano\", \"Salvatore\", \"Samuele\", \"Sandro\", \"Sergio\", \"Silvano\", \"Simone\", \"Stefano\", \"Thomas\", \"Tommaso\", \"Ubaldo\", \"Ugo\", \"Umberto\", \"Valerio\", \"Valter\", \"Vasco\", \"Vincenzo\", \"Vittorio\"]\r\n            },\r\n            \"female\": {\r\n                \"en\": [\"Mary\", \"Emma\", \"Elizabeth\", \"Minnie\", \"Margaret\", \"Ida\", \"Alice\", \"Bertha\", \"Sarah\", \"Annie\", \"Clara\", \"Ella\", \"Florence\", \"Cora\", \"Martha\", \"Laura\", \"Nellie\", \"Grace\", \"Carrie\", \"Maude\", \"Mabel\", \"Bessie\", \"Jennie\", \"Gertrude\", \"Julia\", \"Hattie\", \"Edith\", \"Mattie\", \"Rose\", \"Catherine\", \"Lillian\", \"Ada\", \"Lillie\", \"Helen\", \"Jessie\", \"Louise\", \"Ethel\", \"Lula\", \"Myrtle\", \"Eva\", \"Frances\", \"Lena\", \"Lucy\", \"Edna\", \"Maggie\", \"Pearl\", \"Daisy\", \"Fannie\", \"Josephine\", \"Dora\", \"Rosa\", \"Katherine\", \"Agnes\", \"Marie\", \"Nora\", \"May\", \"Mamie\", \"Blanche\", \"Stella\", \"Ellen\", \"Nancy\", \"Effie\", \"Sallie\", \"Nettie\", \"Della\", \"Lizzie\", \"Flora\", \"Susie\", \"Maud\", \"Mae\", \"Etta\", \"Harriet\", \"Sadie\", \"Caroline\", \"Katie\", \"Lydia\", \"Elsie\", \"Kate\", \"Susan\", \"Mollie\", \"Alma\", \"Addie\", \"Georgia\", \"Eliza\", \"Lulu\", \"Nannie\", \"Lottie\", \"Amanda\", \"Belle\", \"Charlotte\", \"Rebecca\", \"Ruth\", \"Viola\", \"Olive\", \"Amelia\", \"Hannah\", \"Jane\", \"Virginia\", \"Emily\", \"Matilda\", \"Irene\", \"Kathryn\", \"Esther\", \"Willie\", \"Henrietta\", \"Ollie\", \"Amy\", \"Rachel\", \"Sara\", \"Estella\", \"Theresa\", \"Augusta\", \"Ora\", \"Pauline\", \"Josie\", \"Lola\", \"Sophia\", \"Leona\", \"Anne\", \"Mildred\", \"Ann\", \"Beulah\", \"Callie\", \"Lou\", \"Delia\", \"Eleanor\", \"Barbara\", \"Iva\", \"Louisa\", \"Maria\", \"Mayme\", \"Evelyn\", \"Estelle\", \"Nina\", \"Betty\", \"Marion\", \"Bettie\", \"Dorothy\", \"Luella\", \"Inez\", \"Lela\", \"Rosie\", \"Allie\", \"Millie\", \"Janie\", \"Cornelia\", \"Victoria\", \"Ruby\", \"Winifred\", \"Alta\", \"Celia\", \"Christine\", \"Beatrice\", \"Birdie\", \"Harriett\", \"Mable\", \"Myra\", \"Sophie\", \"Tillie\", \"Isabel\", \"Sylvia\", \"Carolyn\", \"Isabelle\", \"Leila\", \"Sally\", \"Ina\", \"Essie\", \"Bertie\", \"Nell\", \"Alberta\", \"Katharine\", \"Lora\", \"Rena\", \"Mina\", \"Rhoda\", \"Mathilda\", \"Abbie\", \"Eula\", \"Dollie\", \"Hettie\", \"Eunice\", \"Fanny\", \"Ola\", \"Lenora\", \"Adelaide\", \"Christina\", \"Lelia\", \"Nelle\", \"Sue\", \"Johanna\", \"Lilly\", \"Lucinda\", \"Minerva\", \"Lettie\", \"Roxie\", \"Cynthia\", \"Helena\", \"Hilda\", \"Hulda\", \"Bernice\", \"Genevieve\", \"Jean\", \"Cordelia\", \"Marian\", \"Francis\", \"Jeanette\", \"Adeline\", \"Gussie\", \"Leah\", \"Lois\", \"Lura\", \"Mittie\", \"Hallie\", \"Isabella\", \"Olga\", \"Phoebe\", \"Teresa\", \"Hester\", \"Lida\", \"Lina\", \"Winnie\", \"Claudia\", \"Marguerite\", \"Vera\", \"Cecelia\", \"Bess\", \"Emilie\", \"John\", \"Rosetta\", \"Verna\", \"Myrtie\", \"Cecilia\", \"Elva\", \"Olivia\", \"Ophelia\", \"Georgie\", \"Elnora\", \"Violet\", \"Adele\", \"Lily\", \"Linnie\", \"Loretta\", \"Madge\", \"Polly\", \"Virgie\", \"Eugenia\", \"Lucile\", \"Lucille\", \"Mabelle\", \"Rosalie\"],\r\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162\r\n                \"it\": [\"Ada\", \"Adriana\", \"Alessandra\", \"Alessia\", \"Alice\", \"Angela\", \"Anna\", \"Anna Maria\", \"Annalisa\", \"Annita\", \"Annunziata\", \"Antonella\", \"Arianna\", \"Asia\", \"Assunta\", \"Aurora\", \"Barbara\", \"Beatrice\", \"Benedetta\", \"Bianca\", \"Bruna\", \"Camilla\", \"Carla\", \"Carlotta\", \"Carmela\", \"Carolina\", \"Caterina\", \"Catia\", \"Cecilia\", \"Chiara\", \"Cinzia\", \"Clara\", \"Claudia\", \"Costanza\", \"Cristina\", \"Daniela\", \"Debora\", \"Diletta\", \"Dina\", \"Donatella\", \"Elena\", \"Eleonora\", \"Elisa\", \"Elisabetta\", \"Emanuela\", \"Emma\", \"Eva\", \"Federica\", \"Fernanda\", \"Fiorella\", \"Fiorenza\", \"Flora\", \"Franca\", \"Francesca\", \"Gabriella\", \"Gaia\", \"Gemma\", \"Giada\", \"Gianna\", \"Gina\", \"Ginevra\", \"Giorgia\", \"Giovanna\", \"Giulia\", \"Giuliana\", \"Giuseppa\", \"Giuseppina\", \"Grazia\", \"Graziella\", \"Greta\", \"Ida\", \"Ilaria\", \"Ines\", \"Iolanda\", \"Irene\", \"Irma\", \"Isabella\", \"Jessica\", \"Laura\", \"Leda\", \"Letizia\", \"Licia\", \"Lidia\", \"Liliana\", \"Lina\", \"Linda\", \"Lisa\", \"Livia\", \"Loretta\", \"Luana\", \"Lucia\", \"Luciana\", \"Lucrezia\", \"Luisa\", \"Manuela\", \"Mara\", \"Marcella\", \"Margherita\", \"Maria\", \"Maria Cristina\", \"Maria Grazia\", \"Maria Luisa\", \"Maria Pia\", \"Maria Teresa\", \"Marina\", \"Marisa\", \"Marta\", \"Martina\", \"Marzia\", \"Matilde\", \"Melissa\", \"Michela\", \"Milena\", \"Mirella\", \"Monica\", \"Natalina\", \"Nella\", \"Nicoletta\", \"Noemi\", \"Olga\", \"Paola\", \"Patrizia\", \"Piera\", \"Pierina\", \"Raffaella\", \"Rebecca\", \"Renata\", \"Rina\", \"Rita\", \"Roberta\", \"Rosa\", \"Rosanna\", \"Rossana\", \"Rossella\", \"Sabrina\", \"Sandra\", \"Sara\", \"Serena\", \"Silvana\", \"Silvia\", \"Simona\", \"Simonetta\", \"Sofia\", \"Sonia\", \"Stefania\", \"Susanna\", \"Teresa\", \"Tina\", \"Tiziana\", \"Tosca\", \"Valentina\", \"Valeria\", \"Vanda\", \"Vanessa\", \"Vanna\", \"Vera\", \"Veronica\", \"Vilma\", \"Viola\", \"Virginia\", \"Vittoria\"]\r\n            }\r\n        },\r\n\r\n        lastNames: {\r\n            \"en\": ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],\r\n                // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)\r\n            \"it\": [\"Acciai\", \"Aglietti\", \"Agostini\", \"Agresti\", \"Ahmed\", \"Aiazzi\", \"Albanese\", \"Alberti\", \"Alessi\", \"Alfani\", \"Alinari\", \"Alterini\", \"Amato\", \"Ammannati\", \"Ancillotti\", \"Andrei\", \"Andreini\", \"Andreoni\", \"Angeli\", \"Anichini\", \"Antonelli\", \"Antonini\", \"Arena\", \"Ariani\", \"Arnetoli\", \"Arrighi\", \"Baccani\", \"Baccetti\", \"Bacci\", \"Bacherini\", \"Badii\", \"Baggiani\", \"Baglioni\", \"Bagni\", \"Bagnoli\", \"Baldassini\", \"Baldi\", \"Baldini\", \"Ballerini\", \"Balli\", \"Ballini\", \"Balloni\", \"Bambi\", \"Banchi\", \"Bandinelli\", \"Bandini\", \"Bani\", \"Barbetti\", \"Barbieri\", \"Barchielli\", \"Bardazzi\", \"Bardelli\", \"Bardi\", \"Barducci\", \"Bargellini\", \"Bargiacchi\", \"Barni\", \"Baroncelli\", \"Baroncini\", \"Barone\", \"Baroni\", \"Baronti\", \"Bartalesi\", \"Bartoletti\", \"Bartoli\", \"Bartolini\", \"Bartoloni\", \"Bartolozzi\", \"Basagni\", \"Basile\", \"Bassi\", \"Batacchi\", \"Battaglia\", \"Battaglini\", \"Bausi\", \"Becagli\", \"Becattini\", \"Becchi\", \"Becucci\", \"Bellandi\", \"Bellesi\", \"Belli\", \"Bellini\", \"Bellucci\", \"Bencini\", \"Benedetti\", \"Benelli\", \"Beni\", \"Benini\", \"Bensi\", \"Benucci\", \"Benvenuti\", \"Berlincioni\", \"Bernacchioni\", \"Bernardi\", \"Bernardini\", \"Berni\", \"Bernini\", \"Bertelli\", \"Berti\", \"Bertini\", \"Bessi\", \"Betti\", \"Bettini\", \"Biagi\", \"Biagini\", \"Biagioni\", \"Biagiotti\", \"Biancalani\", \"Bianchi\", \"Bianchini\", \"Bianco\", \"Biffoli\", \"Bigazzi\", \"Bigi\", \"Biliotti\", \"Billi\", \"Binazzi\", \"Bindi\", \"Bini\", \"Biondi\", \"Bizzarri\", \"Bocci\", \"Bogani\", \"Bolognesi\", \"Bonaiuti\", \"Bonanni\", \"Bonciani\", \"Boncinelli\", \"Bondi\", \"Bonechi\", \"Bongini\", \"Boni\", \"Bonini\", \"Borchi\", \"Boretti\", \"Borghi\", \"Borghini\", \"Borgioli\", \"Borri\", \"Borselli\", \"Boschi\", \"Bottai\", \"Bracci\", \"Braccini\", \"Brandi\", \"Braschi\", \"Bravi\", \"Brazzini\", \"Breschi\", \"Brilli\", \"Brizzi\", \"Brogelli\", \"Brogi\", \"Brogioni\", \"Brunelli\", \"Brunetti\", \"Bruni\", \"Bruno\", \"Brunori\", \"Bruschi\", \"Bucci\", \"Bucciarelli\", \"Buccioni\", \"Bucelli\", \"Bulli\", \"Burberi\", \"Burchi\", \"Burgassi\", \"Burroni\", \"Bussotti\", \"Buti\", \"Caciolli\", \"Caiani\", \"Calabrese\", \"Calamai\", \"Calamandrei\", \"Caldini\", \"Calo'\", \"Calonaci\", \"Calosi\", \"Calvelli\", \"Cambi\", \"Camiciottoli\", \"Cammelli\", \"Cammilli\", \"Campolmi\", \"Cantini\", \"Capanni\", \"Capecchi\", \"Caponi\", \"Cappelletti\", \"Cappelli\", \"Cappellini\", \"Cappugi\", \"Capretti\", \"Caputo\", \"Carbone\", \"Carboni\", \"Cardini\", \"Carlesi\", \"Carletti\", \"Carli\", \"Caroti\", \"Carotti\", \"Carrai\", \"Carraresi\", \"Carta\", \"Caruso\", \"Casalini\", \"Casati\", \"Caselli\", \"Casini\", \"Castagnoli\", \"Castellani\", \"Castelli\", \"Castellucci\", \"Catalano\", \"Catarzi\", \"Catelani\", \"Cavaciocchi\", \"Cavallaro\", \"Cavallini\", \"Cavicchi\", \"Cavini\", \"Ceccarelli\", \"Ceccatelli\", \"Ceccherelli\", \"Ceccherini\", \"Cecchi\", \"Cecchini\", \"Cecconi\", \"Cei\", \"Cellai\", \"Celli\", \"Cellini\", \"Cencetti\", \"Ceni\", \"Cenni\", \"Cerbai\", \"Cesari\", \"Ceseri\", \"Checcacci\", \"Checchi\", \"Checcucci\", \"Cheli\", \"Chellini\", \"Chen\", \"Cheng\", \"Cherici\", \"Cherubini\", \"Chiaramonti\", \"Chiarantini\", \"Chiarelli\", \"Chiari\", \"Chiarini\", \"Chiarugi\", \"Chiavacci\", \"Chiesi\", \"Chimenti\", \"Chini\", \"Chirici\", \"Chiti\", \"Ciabatti\", \"Ciampi\", \"Cianchi\", \"Cianfanelli\", \"Cianferoni\", \"Ciani\", \"Ciapetti\", \"Ciappi\", \"Ciardi\", \"Ciatti\", \"Cicali\", \"Ciccone\", \"Cinelli\", \"Cini\", \"Ciobanu\", \"Ciolli\", \"Cioni\", \"Cipriani\", \"Cirillo\", \"Cirri\", \"Ciucchi\", \"Ciuffi\", \"Ciulli\", \"Ciullini\", \"Clemente\", \"Cocchi\", \"Cognome\", \"Coli\", \"Collini\", \"Colombo\", \"Colzi\", \"Comparini\", \"Conforti\", \"Consigli\", \"Conte\", \"Conti\", \"Contini\", \"Coppini\", \"Coppola\", \"Corsi\", \"Corsini\", \"Corti\", \"Cortini\", \"Cosi\", \"Costa\", \"Costantini\", \"Costantino\", \"Cozzi\", \"Cresci\", \"Crescioli\", \"Cresti\", \"Crini\", \"Curradi\", \"D'Agostino\", \"D'Alessandro\", \"D'Amico\", \"D'Angelo\", \"Daddi\", \"Dainelli\", \"Dallai\", \"Danti\", \"Davitti\", \"De Angelis\", \"De Luca\", \"De Marco\", \"De Rosa\", \"De Santis\", \"De Simone\", \"De Vita\", \"Degl'Innocenti\", \"Degli Innocenti\", \"Dei\", \"Del Lungo\", \"Del Re\", \"Di Marco\", \"Di Stefano\", \"Dini\", \"Diop\", \"Dobre\", \"Dolfi\", \"Donati\", \"Dondoli\", \"Dong\", \"Donnini\", \"Ducci\", \"Dumitru\", \"Ermini\", \"Esposito\", \"Evangelisti\", \"Fabbri\", \"Fabbrini\", \"Fabbrizzi\", \"Fabbroni\", \"Fabbrucci\", \"Fabiani\", \"Facchini\", \"Faggi\", \"Fagioli\", \"Failli\", \"Faini\", \"Falciani\", \"Falcini\", \"Falcone\", \"Fallani\", \"Falorni\", \"Falsini\", \"Falugiani\", \"Fancelli\", \"Fanelli\", \"Fanetti\", \"Fanfani\", \"Fani\", \"Fantappie'\", \"Fantechi\", \"Fanti\", \"Fantini\", \"Fantoni\", \"Farina\", \"Fattori\", \"Favilli\", \"Fedi\", \"Fei\", \"Ferrante\", \"Ferrara\", \"Ferrari\", \"Ferraro\", \"Ferretti\", \"Ferri\", \"Ferrini\", \"Ferroni\", \"Fiaschi\", \"Fibbi\", \"Fiesoli\", \"Filippi\", \"Filippini\", \"Fini\", \"Fioravanti\", \"Fiore\", \"Fiorentini\", \"Fiorini\", \"Fissi\", \"Focardi\", \"Foggi\", \"Fontana\", \"Fontanelli\", \"Fontani\", \"Forconi\", \"Formigli\", \"Forte\", \"Forti\", \"Fortini\", \"Fossati\", \"Fossi\", \"Francalanci\", \"Franceschi\", \"Franceschini\", \"Franchi\", \"Franchini\", \"Franci\", \"Francini\", \"Francioni\", \"Franco\", \"Frassineti\", \"Frati\", \"Fratini\", \"Frilli\", \"Frizzi\", \"Frosali\", \"Frosini\", \"Frullini\", \"Fusco\", \"Fusi\", \"Gabbrielli\", \"Gabellini\", \"Gagliardi\", \"Galanti\", \"Galardi\", \"Galeotti\", \"Galletti\", \"Galli\", \"Gallo\", \"Gallori\", \"Gambacciani\", \"Gargani\", \"Garofalo\", \"Garuglieri\", \"Gashi\", \"Gasperini\", \"Gatti\", \"Gelli\", \"Gensini\", \"Gentile\", \"Gentili\", \"Geri\", \"Gerini\", \"Gheri\", \"Ghini\", \"Giachetti\", \"Giachi\", \"Giacomelli\", \"Gianassi\", \"Giani\", \"Giannelli\", \"Giannetti\", \"Gianni\", \"Giannini\", \"Giannoni\", \"Giannotti\", \"Giannozzi\", \"Gigli\", \"Giordano\", \"Giorgetti\", \"Giorgi\", \"Giovacchini\", \"Giovannelli\", \"Giovannetti\", \"Giovannini\", \"Giovannoni\", \"Giuliani\", \"Giunti\", \"Giuntini\", \"Giusti\", \"Gonnelli\", \"Goretti\", \"Gori\", \"Gradi\", \"Gramigni\", \"Grassi\", \"Grasso\", \"Graziani\", \"Grazzini\", \"Greco\", \"Grifoni\", \"Grillo\", \"Grimaldi\", \"Grossi\", \"Gualtieri\", \"Guarducci\", \"Guarino\", \"Guarnieri\", \"Guasti\", \"Guerra\", \"Guerri\", \"Guerrini\", \"Guidi\", \"Guidotti\", \"He\", \"Hoxha\", \"Hu\", \"Huang\", \"Iandelli\", \"Ignesti\", \"Innocenti\", \"Jin\", \"La Rosa\", \"Lai\", \"Landi\", \"Landini\", \"Lanini\", \"Lapi\", \"Lapini\", \"Lari\", \"Lascialfari\", \"Lastrucci\", \"Latini\", \"Lazzeri\", \"Lazzerini\", \"Lelli\", \"Lenzi\", \"Leonardi\", \"Leoncini\", \"Leone\", \"Leoni\", \"Lepri\", \"Li\", \"Liao\", \"Lin\", \"Linari\", \"Lippi\", \"Lisi\", \"Livi\", \"Lombardi\", \"Lombardini\", \"Lombardo\", \"Longo\", \"Lopez\", \"Lorenzi\", \"Lorenzini\", \"Lorini\", \"Lotti\", \"Lu\", \"Lucchesi\", \"Lucherini\", \"Lunghi\", \"Lupi\", \"Madiai\", \"Maestrini\", \"Maffei\", \"Maggi\", \"Maggini\", \"Magherini\", \"Magini\", \"Magnani\", \"Magnelli\", \"Magni\", \"Magnolfi\", \"Magrini\", \"Malavolti\", \"Malevolti\", \"Manca\", \"Mancini\", \"Manetti\", \"Manfredi\", \"Mangani\", \"Mannelli\", \"Manni\", \"Mannini\", \"Mannucci\", \"Manuelli\", \"Manzini\", \"Marcelli\", \"Marchese\", \"Marchetti\", \"Marchi\", \"Marchiani\", \"Marchionni\", \"Marconi\", \"Marcucci\", \"Margheri\", \"Mari\", \"Mariani\", \"Marilli\", \"Marinai\", \"Marinari\", \"Marinelli\", \"Marini\", \"Marino\", \"Mariotti\", \"Marsili\", \"Martelli\", \"Martinelli\", \"Martini\", \"Martino\", \"Marzi\", \"Masi\", \"Masini\", \"Masoni\", \"Massai\", \"Materassi\", \"Mattei\", \"Matteini\", \"Matteucci\", \"Matteuzzi\", \"Mattioli\", \"Mattolini\", \"Matucci\", \"Mauro\", \"Mazzanti\", \"Mazzei\", \"Mazzetti\", \"Mazzi\", \"Mazzini\", \"Mazzocchi\", \"Mazzoli\", \"Mazzoni\", \"Mazzuoli\", \"Meacci\", \"Mecocci\", \"Meini\", \"Melani\", \"Mele\", \"Meli\", \"Mengoni\", \"Menichetti\", \"Meoni\", \"Merlini\", \"Messeri\", \"Messina\", \"Meucci\", \"Miccinesi\", \"Miceli\", \"Micheli\", \"Michelini\", \"Michelozzi\", \"Migliori\", \"Migliorini\", \"Milani\", \"Miniati\", \"Misuri\", \"Monaco\", \"Montagnani\", \"Montagni\", \"Montanari\", \"Montelatici\", \"Monti\", \"Montigiani\", \"Montini\", \"Morandi\", \"Morandini\", \"Morelli\", \"Moretti\", \"Morganti\", \"Mori\", \"Morini\", \"Moroni\", \"Morozzi\", \"Mugnai\", \"Mugnaini\", \"Mustafa\", \"Naldi\", \"Naldini\", \"Nannelli\", \"Nanni\", \"Nannini\", \"Nannucci\", \"Nardi\", \"Nardini\", \"Nardoni\", \"Natali\", \"Ndiaye\", \"Nencetti\", \"Nencini\", \"Nencioni\", \"Neri\", \"Nesi\", \"Nesti\", \"Niccolai\", \"Niccoli\", \"Niccolini\", \"Nigi\", \"Nistri\", \"Nocentini\", \"Noferini\", \"Novelli\", \"Nucci\", \"Nuti\", \"Nutini\", \"Oliva\", \"Olivieri\", \"Olmi\", \"Orlandi\", \"Orlandini\", \"Orlando\", \"Orsini\", \"Ortolani\", \"Ottanelli\", \"Pacciani\", \"Pace\", \"Paci\", \"Pacini\", \"Pagani\", \"Pagano\", \"Paggetti\", \"Pagliai\", \"Pagni\", \"Pagnini\", \"Paladini\", \"Palagi\", \"Palchetti\", \"Palloni\", \"Palmieri\", \"Palumbo\", \"Pampaloni\", \"Pancani\", \"Pandolfi\", \"Pandolfini\", \"Panerai\", \"Panichi\", \"Paoletti\", \"Paoli\", \"Paolini\", \"Papi\", \"Papini\", \"Papucci\", \"Parenti\", \"Parigi\", \"Parisi\", \"Parri\", \"Parrini\", \"Pasquini\", \"Passeri\", \"Pecchioli\", \"Pecorini\", \"Pellegrini\", \"Pepi\", \"Perini\", \"Perrone\", \"Peruzzi\", \"Pesci\", \"Pestelli\", \"Petri\", \"Petrini\", \"Petrucci\", \"Pettini\", \"Pezzati\", \"Pezzatini\", \"Piani\", \"Piazza\", \"Piazzesi\", \"Piazzini\", \"Piccardi\", \"Picchi\", \"Piccini\", \"Piccioli\", \"Pieraccini\", \"Pieraccioni\", \"Pieralli\", \"Pierattini\", \"Pieri\", \"Pierini\", \"Pieroni\", \"Pietrini\", \"Pini\", \"Pinna\", \"Pinto\", \"Pinzani\", \"Pinzauti\", \"Piras\", \"Pisani\", \"Pistolesi\", \"Poggesi\", \"Poggi\", \"Poggiali\", \"Poggiolini\", \"Poli\", \"Pollastri\", \"Porciani\", \"Pozzi\", \"Pratellesi\", \"Pratesi\", \"Prosperi\", \"Pruneti\", \"Pucci\", \"Puccini\", \"Puccioni\", \"Pugi\", \"Pugliese\", \"Puliti\", \"Querci\", \"Quercioli\", \"Raddi\", \"Radu\", \"Raffaelli\", \"Ragazzini\", \"Ranfagni\", \"Ranieri\", \"Rastrelli\", \"Raugei\", \"Raveggi\", \"Renai\", \"Renzi\", \"Rettori\", \"Ricci\", \"Ricciardi\", \"Ridi\", \"Ridolfi\", \"Rigacci\", \"Righi\", \"Righini\", \"Rinaldi\", \"Risaliti\", \"Ristori\", \"Rizzo\", \"Rocchi\", \"Rocchini\", \"Rogai\", \"Romagnoli\", \"Romanelli\", \"Romani\", \"Romano\", \"Romei\", \"Romeo\", \"Romiti\", \"Romoli\", \"Romolini\", \"Rontini\", \"Rosati\", \"Roselli\", \"Rosi\", \"Rossetti\", \"Rossi\", \"Rossini\", \"Rovai\", \"Ruggeri\", \"Ruggiero\", \"Russo\", \"Sabatini\", \"Saccardi\", \"Sacchetti\", \"Sacchi\", \"Sacco\", \"Salerno\", \"Salimbeni\", \"Salucci\", \"Salvadori\", \"Salvestrini\", \"Salvi\", \"Salvini\", \"Sanesi\", \"Sani\", \"Sanna\", \"Santi\", \"Santini\", \"Santoni\", \"Santoro\", \"Santucci\", \"Sardi\", \"Sarri\", \"Sarti\", \"Sassi\", \"Sbolci\", \"Scali\", \"Scarpelli\", \"Scarselli\", \"Scopetani\", \"Secci\", \"Selvi\", \"Senatori\", \"Senesi\", \"Serafini\", \"Sereni\", \"Serra\", \"Sestini\", \"Sguanci\", \"Sieni\", \"Signorini\", \"Silvestri\", \"Simoncini\", \"Simonetti\", \"Simoni\", \"Singh\", \"Sodi\", \"Soldi\", \"Somigli\", \"Sorbi\", \"Sorelli\", \"Sorrentino\", \"Sottili\", \"Spina\", \"Spinelli\", \"Staccioli\", \"Staderini\", \"Stefanelli\", \"Stefani\", \"Stefanini\", \"Stella\", \"Susini\", \"Tacchi\", \"Tacconi\", \"Taddei\", \"Tagliaferri\", \"Tamburini\", \"Tanganelli\", \"Tani\", \"Tanini\", \"Tapinassi\", \"Tarchi\", \"Tarchiani\", \"Targioni\", \"Tassi\", \"Tassini\", \"Tempesti\", \"Terzani\", \"Tesi\", \"Testa\", \"Testi\", \"Tilli\", \"Tinti\", \"Tirinnanzi\", \"Toccafondi\", \"Tofanari\", \"Tofani\", \"Tognaccini\", \"Tonelli\", \"Tonini\", \"Torelli\", \"Torrini\", \"Tosi\", \"Toti\", \"Tozzi\", \"Trambusti\", \"Trapani\", \"Tucci\", \"Turchi\", \"Ugolini\", \"Ulivi\", \"Valente\", \"Valenti\", \"Valentini\", \"Vangelisti\", \"Vanni\", \"Vannini\", \"Vannoni\", \"Vannozzi\", \"Vannucchi\", \"Vannucci\", \"Ventura\", \"Venturi\", \"Venturini\", \"Vestri\", \"Vettori\", \"Vichi\", \"Viciani\", \"Vieri\", \"Vigiani\", \"Vignoli\", \"Vignolini\", \"Vignozzi\", \"Villani\", \"Vinci\", \"Visani\", \"Vitale\", \"Vitali\", \"Viti\", \"Viviani\", \"Vivoli\", \"Volpe\", \"Volpi\", \"Wang\", \"Wu\", \"Xu\", \"Yang\", \"Ye\", \"Zagli\", \"Zani\", \"Zanieri\", \"Zanobini\", \"Zecchi\", \"Zetti\", \"Zhang\", \"Zheng\", \"Zhou\", \"Zhu\", \"Zingoni\", \"Zini\", \"Zoppi\"]\r\n        },\r\n\r\n        // Data taken from https://github.com/umpirsky/country-list/blob/master/country/cldr/en_US/country.json\r\n        countries: [{\"name\":\"Afghanistan\",\"abbreviation\":\"AF\"},{\"name\":\"Albania\",\"abbreviation\":\"AL\"},{\"name\":\"Algeria\",\"abbreviation\":\"DZ\"},{\"name\":\"American Samoa\",\"abbreviation\":\"AS\"},{\"name\":\"Andorra\",\"abbreviation\":\"AD\"},{\"name\":\"Angola\",\"abbreviation\":\"AO\"},{\"name\":\"Anguilla\",\"abbreviation\":\"AI\"},{\"name\":\"Antarctica\",\"abbreviation\":\"AQ\"},{\"name\":\"Antigua and Barbuda\",\"abbreviation\":\"AG\"},{\"name\":\"Argentina\",\"abbreviation\":\"AR\"},{\"name\":\"Armenia\",\"abbreviation\":\"AM\"},{\"name\":\"Aruba\",\"abbreviation\":\"AW\"},{\"name\":\"Australia\",\"abbreviation\":\"AU\"},{\"name\":\"Austria\",\"abbreviation\":\"AT\"},{\"name\":\"Azerbaijan\",\"abbreviation\":\"AZ\"},{\"name\":\"Bahamas\",\"abbreviation\":\"BS\"},{\"name\":\"Bahrain\",\"abbreviation\":\"BH\"},{\"name\":\"Bangladesh\",\"abbreviation\":\"BD\"},{\"name\":\"Barbados\",\"abbreviation\":\"BB\"},{\"name\":\"Belarus\",\"abbreviation\":\"BY\"},{\"name\":\"Belgium\",\"abbreviation\":\"BE\"},{\"name\":\"Belize\",\"abbreviation\":\"BZ\"},{\"name\":\"Benin\",\"abbreviation\":\"BJ\"},{\"name\":\"Bermuda\",\"abbreviation\":\"BM\"},{\"name\":\"Bhutan\",\"abbreviation\":\"BT\"},{\"name\":\"Bolivia\",\"abbreviation\":\"BO\"},{\"name\":\"Bosnia and Herzegovina\",\"abbreviation\":\"BA\"},{\"name\":\"Botswana\",\"abbreviation\":\"BW\"},{\"name\":\"Bouvet Island\",\"abbreviation\":\"BV\"},{\"name\":\"Brazil\",\"abbreviation\":\"BR\"},{\"name\":\"British Antarctic Territory\",\"abbreviation\":\"BQ\"},{\"name\":\"British Indian Ocean Territory\",\"abbreviation\":\"IO\"},{\"name\":\"British Virgin Islands\",\"abbreviation\":\"VG\"},{\"name\":\"Brunei\",\"abbreviation\":\"BN\"},{\"name\":\"Bulgaria\",\"abbreviation\":\"BG\"},{\"name\":\"Burkina Faso\",\"abbreviation\":\"BF\"},{\"name\":\"Burundi\",\"abbreviation\":\"BI\"},{\"name\":\"Cambodia\",\"abbreviation\":\"KH\"},{\"name\":\"Cameroon\",\"abbreviation\":\"CM\"},{\"name\":\"Canada\",\"abbreviation\":\"CA\"},{\"name\":\"Canton and Enderbury Islands\",\"abbreviation\":\"CT\"},{\"name\":\"Cape Verde\",\"abbreviation\":\"CV\"},{\"name\":\"Cayman Islands\",\"abbreviation\":\"KY\"},{\"name\":\"Central African Republic\",\"abbreviation\":\"CF\"},{\"name\":\"Chad\",\"abbreviation\":\"TD\"},{\"name\":\"Chile\",\"abbreviation\":\"CL\"},{\"name\":\"China\",\"abbreviation\":\"CN\"},{\"name\":\"Christmas Island\",\"abbreviation\":\"CX\"},{\"name\":\"Cocos [Keeling] Islands\",\"abbreviation\":\"CC\"},{\"name\":\"Colombia\",\"abbreviation\":\"CO\"},{\"name\":\"Comoros\",\"abbreviation\":\"KM\"},{\"name\":\"Congo - Brazzaville\",\"abbreviation\":\"CG\"},{\"name\":\"Congo - Kinshasa\",\"abbreviation\":\"CD\"},{\"name\":\"Cook Islands\",\"abbreviation\":\"CK\"},{\"name\":\"Costa Rica\",\"abbreviation\":\"CR\"},{\"name\":\"Croatia\",\"abbreviation\":\"HR\"},{\"name\":\"Cuba\",\"abbreviation\":\"CU\"},{\"name\":\"Cyprus\",\"abbreviation\":\"CY\"},{\"name\":\"Czech Republic\",\"abbreviation\":\"CZ\"},{\"name\":\"Côte d’Ivoire\",\"abbreviation\":\"CI\"},{\"name\":\"Denmark\",\"abbreviation\":\"DK\"},{\"name\":\"Djibouti\",\"abbreviation\":\"DJ\"},{\"name\":\"Dominica\",\"abbreviation\":\"DM\"},{\"name\":\"Dominican Republic\",\"abbreviation\":\"DO\"},{\"name\":\"Dronning Maud Land\",\"abbreviation\":\"NQ\"},{\"name\":\"East Germany\",\"abbreviation\":\"DD\"},{\"name\":\"Ecuador\",\"abbreviation\":\"EC\"},{\"name\":\"Egypt\",\"abbreviation\":\"EG\"},{\"name\":\"El Salvador\",\"abbreviation\":\"SV\"},{\"name\":\"Equatorial Guinea\",\"abbreviation\":\"GQ\"},{\"name\":\"Eritrea\",\"abbreviation\":\"ER\"},{\"name\":\"Estonia\",\"abbreviation\":\"EE\"},{\"name\":\"Ethiopia\",\"abbreviation\":\"ET\"},{\"name\":\"Falkland Islands\",\"abbreviation\":\"FK\"},{\"name\":\"Faroe Islands\",\"abbreviation\":\"FO\"},{\"name\":\"Fiji\",\"abbreviation\":\"FJ\"},{\"name\":\"Finland\",\"abbreviation\":\"FI\"},{\"name\":\"France\",\"abbreviation\":\"FR\"},{\"name\":\"French Guiana\",\"abbreviation\":\"GF\"},{\"name\":\"French Polynesia\",\"abbreviation\":\"PF\"},{\"name\":\"French Southern Territories\",\"abbreviation\":\"TF\"},{\"name\":\"French Southern and Antarctic Territories\",\"abbreviation\":\"FQ\"},{\"name\":\"Gabon\",\"abbreviation\":\"GA\"},{\"name\":\"Gambia\",\"abbreviation\":\"GM\"},{\"name\":\"Georgia\",\"abbreviation\":\"GE\"},{\"name\":\"Germany\",\"abbreviation\":\"DE\"},{\"name\":\"Ghana\",\"abbreviation\":\"GH\"},{\"name\":\"Gibraltar\",\"abbreviation\":\"GI\"},{\"name\":\"Greece\",\"abbreviation\":\"GR\"},{\"name\":\"Greenland\",\"abbreviation\":\"GL\"},{\"name\":\"Grenada\",\"abbreviation\":\"GD\"},{\"name\":\"Guadeloupe\",\"abbreviation\":\"GP\"},{\"name\":\"Guam\",\"abbreviation\":\"GU\"},{\"name\":\"Guatemala\",\"abbreviation\":\"GT\"},{\"name\":\"Guernsey\",\"abbreviation\":\"GG\"},{\"name\":\"Guinea\",\"abbreviation\":\"GN\"},{\"name\":\"Guinea-Bissau\",\"abbreviation\":\"GW\"},{\"name\":\"Guyana\",\"abbreviation\":\"GY\"},{\"name\":\"Haiti\",\"abbreviation\":\"HT\"},{\"name\":\"Heard Island and McDonald Islands\",\"abbreviation\":\"HM\"},{\"name\":\"Honduras\",\"abbreviation\":\"HN\"},{\"name\":\"Hong Kong SAR China\",\"abbreviation\":\"HK\"},{\"name\":\"Hungary\",\"abbreviation\":\"HU\"},{\"name\":\"Iceland\",\"abbreviation\":\"IS\"},{\"name\":\"India\",\"abbreviation\":\"IN\"},{\"name\":\"Indonesia\",\"abbreviation\":\"ID\"},{\"name\":\"Iran\",\"abbreviation\":\"IR\"},{\"name\":\"Iraq\",\"abbreviation\":\"IQ\"},{\"name\":\"Ireland\",\"abbreviation\":\"IE\"},{\"name\":\"Isle of Man\",\"abbreviation\":\"IM\"},{\"name\":\"Israel\",\"abbreviation\":\"IL\"},{\"name\":\"Italy\",\"abbreviation\":\"IT\"},{\"name\":\"Jamaica\",\"abbreviation\":\"JM\"},{\"name\":\"Japan\",\"abbreviation\":\"JP\"},{\"name\":\"Jersey\",\"abbreviation\":\"JE\"},{\"name\":\"Johnston Island\",\"abbreviation\":\"JT\"},{\"name\":\"Jordan\",\"abbreviation\":\"JO\"},{\"name\":\"Kazakhstan\",\"abbreviation\":\"KZ\"},{\"name\":\"Kenya\",\"abbreviation\":\"KE\"},{\"name\":\"Kiribati\",\"abbreviation\":\"KI\"},{\"name\":\"Kuwait\",\"abbreviation\":\"KW\"},{\"name\":\"Kyrgyzstan\",\"abbreviation\":\"KG\"},{\"name\":\"Laos\",\"abbreviation\":\"LA\"},{\"name\":\"Latvia\",\"abbreviation\":\"LV\"},{\"name\":\"Lebanon\",\"abbreviation\":\"LB\"},{\"name\":\"Lesotho\",\"abbreviation\":\"LS\"},{\"name\":\"Liberia\",\"abbreviation\":\"LR\"},{\"name\":\"Libya\",\"abbreviation\":\"LY\"},{\"name\":\"Liechtenstein\",\"abbreviation\":\"LI\"},{\"name\":\"Lithuania\",\"abbreviation\":\"LT\"},{\"name\":\"Luxembourg\",\"abbreviation\":\"LU\"},{\"name\":\"Macau SAR China\",\"abbreviation\":\"MO\"},{\"name\":\"Macedonia\",\"abbreviation\":\"MK\"},{\"name\":\"Madagascar\",\"abbreviation\":\"MG\"},{\"name\":\"Malawi\",\"abbreviation\":\"MW\"},{\"name\":\"Malaysia\",\"abbreviation\":\"MY\"},{\"name\":\"Maldives\",\"abbreviation\":\"MV\"},{\"name\":\"Mali\",\"abbreviation\":\"ML\"},{\"name\":\"Malta\",\"abbreviation\":\"MT\"},{\"name\":\"Marshall Islands\",\"abbreviation\":\"MH\"},{\"name\":\"Martinique\",\"abbreviation\":\"MQ\"},{\"name\":\"Mauritania\",\"abbreviation\":\"MR\"},{\"name\":\"Mauritius\",\"abbreviation\":\"MU\"},{\"name\":\"Mayotte\",\"abbreviation\":\"YT\"},{\"name\":\"Metropolitan France\",\"abbreviation\":\"FX\"},{\"name\":\"Mexico\",\"abbreviation\":\"MX\"},{\"name\":\"Micronesia\",\"abbreviation\":\"FM\"},{\"name\":\"Midway Islands\",\"abbreviation\":\"MI\"},{\"name\":\"Moldova\",\"abbreviation\":\"MD\"},{\"name\":\"Monaco\",\"abbreviation\":\"MC\"},{\"name\":\"Mongolia\",\"abbreviation\":\"MN\"},{\"name\":\"Montenegro\",\"abbreviation\":\"ME\"},{\"name\":\"Montserrat\",\"abbreviation\":\"MS\"},{\"name\":\"Morocco\",\"abbreviation\":\"MA\"},{\"name\":\"Mozambique\",\"abbreviation\":\"MZ\"},{\"name\":\"Myanmar [Burma]\",\"abbreviation\":\"MM\"},{\"name\":\"Namibia\",\"abbreviation\":\"NA\"},{\"name\":\"Nauru\",\"abbreviation\":\"NR\"},{\"name\":\"Nepal\",\"abbreviation\":\"NP\"},{\"name\":\"Netherlands\",\"abbreviation\":\"NL\"},{\"name\":\"Netherlands Antilles\",\"abbreviation\":\"AN\"},{\"name\":\"Neutral Zone\",\"abbreviation\":\"NT\"},{\"name\":\"New Caledonia\",\"abbreviation\":\"NC\"},{\"name\":\"New Zealand\",\"abbreviation\":\"NZ\"},{\"name\":\"Nicaragua\",\"abbreviation\":\"NI\"},{\"name\":\"Niger\",\"abbreviation\":\"NE\"},{\"name\":\"Nigeria\",\"abbreviation\":\"NG\"},{\"name\":\"Niue\",\"abbreviation\":\"NU\"},{\"name\":\"Norfolk Island\",\"abbreviation\":\"NF\"},{\"name\":\"North Korea\",\"abbreviation\":\"KP\"},{\"name\":\"North Vietnam\",\"abbreviation\":\"VD\"},{\"name\":\"Northern Mariana Islands\",\"abbreviation\":\"MP\"},{\"name\":\"Norway\",\"abbreviation\":\"NO\"},{\"name\":\"Oman\",\"abbreviation\":\"OM\"},{\"name\":\"Pacific Islands Trust Territory\",\"abbreviation\":\"PC\"},{\"name\":\"Pakistan\",\"abbreviation\":\"PK\"},{\"name\":\"Palau\",\"abbreviation\":\"PW\"},{\"name\":\"Palestinian Territories\",\"abbreviation\":\"PS\"},{\"name\":\"Panama\",\"abbreviation\":\"PA\"},{\"name\":\"Panama Canal Zone\",\"abbreviation\":\"PZ\"},{\"name\":\"Papua New Guinea\",\"abbreviation\":\"PG\"},{\"name\":\"Paraguay\",\"abbreviation\":\"PY\"},{\"name\":\"People's Democratic Republic of Yemen\",\"abbreviation\":\"YD\"},{\"name\":\"Peru\",\"abbreviation\":\"PE\"},{\"name\":\"Philippines\",\"abbreviation\":\"PH\"},{\"name\":\"Pitcairn Islands\",\"abbreviation\":\"PN\"},{\"name\":\"Poland\",\"abbreviation\":\"PL\"},{\"name\":\"Portugal\",\"abbreviation\":\"PT\"},{\"name\":\"Puerto Rico\",\"abbreviation\":\"PR\"},{\"name\":\"Qatar\",\"abbreviation\":\"QA\"},{\"name\":\"Romania\",\"abbreviation\":\"RO\"},{\"name\":\"Russia\",\"abbreviation\":\"RU\"},{\"name\":\"Rwanda\",\"abbreviation\":\"RW\"},{\"name\":\"Réunion\",\"abbreviation\":\"RE\"},{\"name\":\"Saint Barthélemy\",\"abbreviation\":\"BL\"},{\"name\":\"Saint Helena\",\"abbreviation\":\"SH\"},{\"name\":\"Saint Kitts and Nevis\",\"abbreviation\":\"KN\"},{\"name\":\"Saint Lucia\",\"abbreviation\":\"LC\"},{\"name\":\"Saint Martin\",\"abbreviation\":\"MF\"},{\"name\":\"Saint Pierre and Miquelon\",\"abbreviation\":\"PM\"},{\"name\":\"Saint Vincent and the Grenadines\",\"abbreviation\":\"VC\"},{\"name\":\"Samoa\",\"abbreviation\":\"WS\"},{\"name\":\"San Marino\",\"abbreviation\":\"SM\"},{\"name\":\"Saudi Arabia\",\"abbreviation\":\"SA\"},{\"name\":\"Senegal\",\"abbreviation\":\"SN\"},{\"name\":\"Serbia\",\"abbreviation\":\"RS\"},{\"name\":\"Serbia and Montenegro\",\"abbreviation\":\"CS\"},{\"name\":\"Seychelles\",\"abbreviation\":\"SC\"},{\"name\":\"Sierra Leone\",\"abbreviation\":\"SL\"},{\"name\":\"Singapore\",\"abbreviation\":\"SG\"},{\"name\":\"Slovakia\",\"abbreviation\":\"SK\"},{\"name\":\"Slovenia\",\"abbreviation\":\"SI\"},{\"name\":\"Solomon Islands\",\"abbreviation\":\"SB\"},{\"name\":\"Somalia\",\"abbreviation\":\"SO\"},{\"name\":\"South Africa\",\"abbreviation\":\"ZA\"},{\"name\":\"South Georgia and the South Sandwich Islands\",\"abbreviation\":\"GS\"},{\"name\":\"South Korea\",\"abbreviation\":\"KR\"},{\"name\":\"Spain\",\"abbreviation\":\"ES\"},{\"name\":\"Sri Lanka\",\"abbreviation\":\"LK\"},{\"name\":\"Sudan\",\"abbreviation\":\"SD\"},{\"name\":\"Suriname\",\"abbreviation\":\"SR\"},{\"name\":\"Svalbard and Jan Mayen\",\"abbreviation\":\"SJ\"},{\"name\":\"Swaziland\",\"abbreviation\":\"SZ\"},{\"name\":\"Sweden\",\"abbreviation\":\"SE\"},{\"name\":\"Switzerland\",\"abbreviation\":\"CH\"},{\"name\":\"Syria\",\"abbreviation\":\"SY\"},{\"name\":\"São Tomé and Príncipe\",\"abbreviation\":\"ST\"},{\"name\":\"Taiwan\",\"abbreviation\":\"TW\"},{\"name\":\"Tajikistan\",\"abbreviation\":\"TJ\"},{\"name\":\"Tanzania\",\"abbreviation\":\"TZ\"},{\"name\":\"Thailand\",\"abbreviation\":\"TH\"},{\"name\":\"Timor-Leste\",\"abbreviation\":\"TL\"},{\"name\":\"Togo\",\"abbreviation\":\"TG\"},{\"name\":\"Tokelau\",\"abbreviation\":\"TK\"},{\"name\":\"Tonga\",\"abbreviation\":\"TO\"},{\"name\":\"Trinidad and Tobago\",\"abbreviation\":\"TT\"},{\"name\":\"Tunisia\",\"abbreviation\":\"TN\"},{\"name\":\"Turkey\",\"abbreviation\":\"TR\"},{\"name\":\"Turkmenistan\",\"abbreviation\":\"TM\"},{\"name\":\"Turks and Caicos Islands\",\"abbreviation\":\"TC\"},{\"name\":\"Tuvalu\",\"abbreviation\":\"TV\"},{\"name\":\"U.S. Minor Outlying Islands\",\"abbreviation\":\"UM\"},{\"name\":\"U.S. Miscellaneous Pacific Islands\",\"abbreviation\":\"PU\"},{\"name\":\"U.S. Virgin Islands\",\"abbreviation\":\"VI\"},{\"name\":\"Uganda\",\"abbreviation\":\"UG\"},{\"name\":\"Ukraine\",\"abbreviation\":\"UA\"},{\"name\":\"Union of Soviet Socialist Republics\",\"abbreviation\":\"SU\"},{\"name\":\"United Arab Emirates\",\"abbreviation\":\"AE\"},{\"name\":\"United Kingdom\",\"abbreviation\":\"GB\"},{\"name\":\"United States\",\"abbreviation\":\"US\"},{\"name\":\"Unknown or Invalid Region\",\"abbreviation\":\"ZZ\"},{\"name\":\"Uruguay\",\"abbreviation\":\"UY\"},{\"name\":\"Uzbekistan\",\"abbreviation\":\"UZ\"},{\"name\":\"Vanuatu\",\"abbreviation\":\"VU\"},{\"name\":\"Vatican City\",\"abbreviation\":\"VA\"},{\"name\":\"Venezuela\",\"abbreviation\":\"VE\"},{\"name\":\"Vietnam\",\"abbreviation\":\"VN\"},{\"name\":\"Wake Island\",\"abbreviation\":\"WK\"},{\"name\":\"Wallis and Futuna\",\"abbreviation\":\"WF\"},{\"name\":\"Western Sahara\",\"abbreviation\":\"EH\"},{\"name\":\"Yemen\",\"abbreviation\":\"YE\"},{\"name\":\"Zambia\",\"abbreviation\":\"ZM\"},{\"name\":\"Zimbabwe\",\"abbreviation\":\"ZW\"},{\"name\":\"Åland Islands\",\"abbreviation\":\"AX\"}],\r\n\r\n        provinces: {\r\n            \"ca\": [\r\n                {name: 'Alberta', abbreviation: 'AB'},\r\n                {name: 'British Columbia', abbreviation: 'BC'},\r\n                {name: 'Manitoba', abbreviation: 'MB'},\r\n                {name: 'New Brunswick', abbreviation: 'NB'},\r\n                {name: 'Newfoundland and Labrador', abbreviation: 'NL'},\r\n                {name: 'Nova Scotia', abbreviation: 'NS'},\r\n                {name: 'Ontario', abbreviation: 'ON'},\r\n                {name: 'Prince Edward Island', abbreviation: 'PE'},\r\n                {name: 'Quebec', abbreviation: 'QC'},\r\n                {name: 'Saskatchewan', abbreviation: 'SK'},\r\n\r\n                // The case could be made that the following are not actually provinces\r\n                // since they are technically considered \"territories\" however they all\r\n                // look the same on an envelope!\r\n                {name: 'Northwest Territories', abbreviation: 'NT'},\r\n                {name: 'Nunavut', abbreviation: 'NU'},\r\n                {name: 'Yukon', abbreviation: 'YT'}\r\n            ],\r\n            \"it\": [\r\n                { name: \"Agrigento\", abbreviation: \"AG\", code: 84 },\r\n                { name: \"Alessandria\", abbreviation: \"AL\", code: 6 },\r\n                { name: \"Ancona\", abbreviation: \"AN\", code: 42 },\r\n                { name: \"Aosta\", abbreviation: \"AO\", code: 7 },\r\n                { name: \"L'Aquila\", abbreviation: \"AQ\", code: 66 },\r\n                { name: \"Arezzo\", abbreviation: \"AR\", code: 51 },\r\n                { name: \"Ascoli-Piceno\", abbreviation: \"AP\", code: 44 },\r\n                { name: \"Asti\", abbreviation: \"AT\", code: 5 },\r\n                { name: \"Avellino\", abbreviation: \"AV\", code: 64 },\r\n                { name: \"Bari\", abbreviation: \"BA\", code: 72 },\r\n                { name: \"Barletta-Andria-Trani\", abbreviation: \"BT\", code: 72 },\r\n                { name: \"Belluno\", abbreviation: \"BL\", code: 25 },\r\n                { name: \"Benevento\", abbreviation: \"BN\", code: 62 },\r\n                { name: \"Bergamo\", abbreviation: \"BG\", code: 16 },\r\n                { name: \"Biella\", abbreviation: \"BI\", code: 96 },\r\n                { name: \"Bologna\", abbreviation: \"BO\", code: 37 },\r\n                { name: \"Bolzano\", abbreviation: \"BZ\", code: 21 },\r\n                { name: \"Brescia\", abbreviation: \"BS\", code: 17 },\r\n                { name: \"Brindisi\", abbreviation: \"BR\", code: 74 },\r\n                { name: \"Cagliari\", abbreviation: \"CA\", code: 92 },\r\n                { name: \"Caltanissetta\", abbreviation: \"CL\", code: 85 },\r\n                { name: \"Campobasso\", abbreviation: \"CB\", code: 70 },\r\n                { name: \"Carbonia Iglesias\", abbreviation: \"CI\", code: 70 },\r\n                { name: \"Caserta\", abbreviation: \"CE\", code: 61 },\r\n                { name: \"Catania\", abbreviation: \"CT\", code: 87 },\r\n                { name: \"Catanzaro\", abbreviation: \"CZ\", code: 79 },\r\n                { name: \"Chieti\", abbreviation: \"CH\", code: 69 },\r\n                { name: \"Como\", abbreviation: \"CO\", code: 13 },\r\n                { name: \"Cosenza\", abbreviation: \"CS\", code: 78 },\r\n                { name: \"Cremona\", abbreviation: \"CR\", code: 19 },\r\n                { name: \"Crotone\", abbreviation: \"KR\", code: 101 },\r\n                { name: \"Cuneo\", abbreviation: \"CN\", code: 4 },\r\n                { name: \"Enna\", abbreviation: \"EN\", code: 86 },\r\n                { name: \"Fermo\", abbreviation: \"FM\", code: 86 },\r\n                { name: \"Ferrara\", abbreviation: \"FE\", code: 38 },\r\n                { name: \"Firenze\", abbreviation: \"FI\", code: 48 },\r\n                { name: \"Foggia\", abbreviation: \"FG\", code: 71 },\r\n                { name: \"Forli-Cesena\", abbreviation: \"FC\", code: 71 },\r\n                { name: \"Frosinone\", abbreviation: \"FR\", code: 60 },\r\n                { name: \"Genova\", abbreviation: \"GE\", code: 10 },\r\n                { name: \"Gorizia\", abbreviation: \"GO\", code: 31 },\r\n                { name: \"Grosseto\", abbreviation: \"GR\", code: 53 },\r\n                { name: \"Imperia\", abbreviation: \"IM\", code: 8 },\r\n                { name: \"Isernia\", abbreviation: \"IS\", code: 94 },\r\n                { name: \"La-Spezia\", abbreviation: \"SP\", code: 66 },\r\n                { name: \"Latina\", abbreviation: \"LT\", code: 59 },\r\n                { name: \"Lecce\", abbreviation: \"LE\", code: 75 },\r\n                { name: \"Lecco\", abbreviation: \"LC\", code: 97 },\r\n                { name: \"Livorno\", abbreviation: \"LI\", code: 49 },\r\n                { name: \"Lodi\", abbreviation: \"LO\", code: 98 },\r\n                { name: \"Lucca\", abbreviation: \"LU\", code: 46 },\r\n                { name: \"Macerata\", abbreviation: \"MC\", code: 43 },\r\n                { name: \"Mantova\", abbreviation: \"MN\", code: 20 },\r\n                { name: \"Massa-Carrara\", abbreviation: \"MS\", code: 45 },\r\n                { name: \"Matera\", abbreviation: \"MT\", code: 77 },\r\n                { name: \"Medio Campidano\", abbreviation: \"VS\", code: 77 },\r\n                { name: \"Messina\", abbreviation: \"ME\", code: 83 },\r\n                { name: \"Milano\", abbreviation: \"MI\", code: 15 },\r\n                { name: \"Modena\", abbreviation: \"MO\", code: 36 },\r\n                { name: \"Monza-Brianza\", abbreviation: \"MB\", code: 36 },\r\n                { name: \"Napoli\", abbreviation: \"NA\", code: 63 },\r\n                { name: \"Novara\", abbreviation: \"NO\", code: 3 },\r\n                { name: \"Nuoro\", abbreviation: \"NU\", code: 91 },\r\n                { name: \"Ogliastra\", abbreviation: \"OG\", code: 91 },\r\n                { name: \"Olbia Tempio\", abbreviation: \"OT\", code: 91 },\r\n                { name: \"Oristano\", abbreviation: \"OR\", code: 95 },\r\n                { name: \"Padova\", abbreviation: \"PD\", code: 28 },\r\n                { name: \"Palermo\", abbreviation: \"PA\", code: 82 },\r\n                { name: \"Parma\", abbreviation: \"PR\", code: 34 },\r\n                { name: \"Pavia\", abbreviation: \"PV\", code: 18 },\r\n                { name: \"Perugia\", abbreviation: \"PG\", code: 54 },\r\n                { name: \"Pesaro-Urbino\", abbreviation: \"PU\", code: 41 },\r\n                { name: \"Pescara\", abbreviation: \"PE\", code: 68 },\r\n                { name: \"Piacenza\", abbreviation: \"PC\", code: 33 },\r\n                { name: \"Pisa\", abbreviation: \"PI\", code: 50 },\r\n                { name: \"Pistoia\", abbreviation: \"PT\", code: 47 },\r\n                { name: \"Pordenone\", abbreviation: \"PN\", code: 93 },\r\n                { name: \"Potenza\", abbreviation: \"PZ\", code: 76 },\r\n                { name: \"Prato\", abbreviation: \"PO\", code: 100 },\r\n                { name: \"Ragusa\", abbreviation: \"RG\", code: 88 },\r\n                { name: \"Ravenna\", abbreviation: \"RA\", code: 39 },\r\n                { name: \"Reggio-Calabria\", abbreviation: \"RC\", code: 35 },\r\n                { name: \"Reggio-Emilia\", abbreviation: \"RE\", code: 35 },\r\n                { name: \"Rieti\", abbreviation: \"RI\", code: 57 },\r\n                { name: \"Rimini\", abbreviation: \"RN\", code: 99 },\r\n                { name: \"Roma\", abbreviation: \"Roma\", code: 58 },\r\n                { name: \"Rovigo\", abbreviation: \"RO\", code: 29 },\r\n                { name: \"Salerno\", abbreviation: \"SA\", code: 65 },\r\n                { name: \"Sassari\", abbreviation: \"SS\", code: 90 },\r\n                { name: \"Savona\", abbreviation: \"SV\", code: 9 },\r\n                { name: \"Siena\", abbreviation: \"SI\", code: 52 },\r\n                { name: \"Siracusa\", abbreviation: \"SR\", code: 89 },\r\n                { name: \"Sondrio\", abbreviation: \"SO\", code: 14 },\r\n                { name: \"Taranto\", abbreviation: \"TA\", code: 73 },\r\n                { name: \"Teramo\", abbreviation: \"TE\", code: 67 },\r\n                { name: \"Terni\", abbreviation: \"TR\", code: 55 },\r\n                { name: \"Torino\", abbreviation: \"TO\", code: 1 },\r\n                { name: \"Trapani\", abbreviation: \"TP\", code: 81 },\r\n                { name: \"Trento\", abbreviation: \"TN\", code: 22 },\r\n                { name: \"Treviso\", abbreviation: \"TV\", code: 26 },\r\n                { name: \"Trieste\", abbreviation: \"TS\", code: 32 },\r\n                { name: \"Udine\", abbreviation: \"UD\", code: 30 },\r\n                { name: \"Varese\", abbreviation: \"VA\", code: 12 },\r\n                { name: \"Venezia\", abbreviation: \"VE\", code: 27 },\r\n                { name: \"Verbania\", abbreviation: \"VB\", code: 27 },\r\n                { name: \"Vercelli\", abbreviation: \"VC\", code: 2 },\r\n                { name: \"Verona\", abbreviation: \"VR\", code: 23 },\r\n                { name: \"Vibo-Valentia\", abbreviation: \"VV\", code: 102 },\r\n                { name: \"Vicenza\", abbreviation: \"VI\", code: 24 },\r\n                { name: \"Viterbo\", abbreviation: \"VT\", code: 56 }   \r\n            ]\r\n        },\r\n\r\n            // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json\r\n        nationalities: [\r\n           {name: 'Afghan'},\r\n           {name: 'Albanian'},\r\n           {name: 'Algerian'},\r\n           {name: 'American'},\r\n           {name: 'Andorran'},\r\n           {name: 'Angolan'},\r\n           {name: 'Antiguans'},\r\n           {name: 'Argentinean'},\r\n           {name: 'Armenian'},\r\n           {name: 'Australian'},\r\n           {name: 'Austrian'},\r\n           {name: 'Azerbaijani'},\r\n           {name: 'Bahami'},\r\n           {name: 'Bahraini'},\r\n           {name: 'Bangladeshi'},\r\n           {name: 'Barbadian'},\r\n           {name: 'Barbudans'},\r\n           {name: 'Batswana'},\r\n           {name: 'Belarusian'},\r\n           {name: 'Belgian'},\r\n           {name: 'Belizean'},\r\n           {name: 'Beninese'},\r\n           {name: 'Bhutanese'},\r\n           {name: 'Bolivian'},\r\n           {name: 'Bosnian'},\r\n           {name: 'Brazilian'},\r\n           {name: 'British'},\r\n           {name: 'Bruneian'},\r\n           {name: 'Bulgarian'},\r\n           {name: 'Burkinabe'},\r\n           {name: 'Burmese'},\r\n           {name: 'Burundian'},\r\n           {name: 'Cambodian'},\r\n           {name: 'Cameroonian'},\r\n           {name: 'Canadian'},\r\n           {name: 'Cape Verdean'},\r\n           {name: 'Central African'},\r\n           {name: 'Chadian'},\r\n           {name: 'Chilean'},\r\n           {name: 'Chinese'},\r\n           {name: 'Colombian'},\r\n           {name: 'Comoran'},\r\n           {name: 'Congolese'},\r\n           {name: 'Costa Rican'},\r\n           {name: 'Croatian'},\r\n           {name: 'Cuban'},\r\n           {name: 'Cypriot'},\r\n           {name: 'Czech'},\r\n           {name: 'Danish'},\r\n           {name: 'Djibouti'},\r\n           {name: 'Dominican'},\r\n           {name: 'Dutch'},\r\n           {name: 'East Timorese'},\r\n           {name: 'Ecuadorean'},\r\n           {name: 'Egyptian'},\r\n           {name: 'Emirian'},\r\n           {name: 'Equatorial Guinean'},\r\n           {name: 'Eritrean'},\r\n           {name: 'Estonian'},\r\n           {name: 'Ethiopian'},\r\n           {name: 'Fijian'},\r\n           {name: 'Filipino'},\r\n           {name: 'Finnish'},\r\n           {name: 'French'},\r\n           {name: 'Gabonese'},\r\n           {name: 'Gambian'},\r\n           {name: 'Georgian'},\r\n           {name: 'German'},\r\n           {name: 'Ghanaian'},\r\n           {name: 'Greek'},\r\n           {name: 'Grenadian'},\r\n           {name: 'Guatemalan'},\r\n           {name: 'Guinea-Bissauan'},\r\n           {name: 'Guinean'},\r\n           {name: 'Guyanese'},\r\n           {name: 'Haitian'},\r\n           {name: 'Herzegovinian'},\r\n           {name: 'Honduran'},\r\n           {name: 'Hungarian'},\r\n           {name: 'I-Kiribati'},\r\n           {name: 'Icelander'},\r\n           {name: 'Indian'},\r\n           {name: 'Indonesian'},\r\n           {name: 'Iranian'},\r\n           {name: 'Iraqi'},\r\n           {name: 'Irish'},\r\n           {name: 'Israeli'},\r\n           {name: 'Italian'},\r\n           {name: 'Ivorian'},\r\n           {name: 'Jamaican'},\r\n           {name: 'Japanese'},\r\n           {name: 'Jordanian'},\r\n           {name: 'Kazakhstani'},\r\n           {name: 'Kenyan'},\r\n           {name: 'Kittian and Nevisian'},\r\n           {name: 'Kuwaiti'},\r\n           {name: 'Kyrgyz'},\r\n           {name: 'Laotian'},\r\n           {name: 'Latvian'},\r\n           {name: 'Lebanese'},\r\n           {name: 'Liberian'},\r\n           {name: 'Libyan'},\r\n           {name: 'Liechtensteiner'},\r\n           {name: 'Lithuanian'},\r\n           {name: 'Luxembourger'},\r\n           {name: 'Macedonian'},\r\n           {name: 'Malagasy'},\r\n           {name: 'Malawian'},\r\n           {name: 'Malaysian'},\r\n           {name: 'Maldivan'},\r\n           {name: 'Malian'},\r\n           {name: 'Maltese'},\r\n           {name: 'Marshallese'},\r\n           {name: 'Mauritanian'},\r\n           {name: 'Mauritian'},\r\n           {name: 'Mexican'},\r\n           {name: 'Micronesian'},\r\n           {name: 'Moldovan'},\r\n           {name: 'Monacan'},\r\n           {name: 'Mongolian'},\r\n           {name: 'Moroccan'},\r\n           {name: 'Mosotho'},\r\n           {name: 'Motswana'},\r\n           {name: 'Mozambican'},\r\n           {name: 'Namibian'},\r\n           {name: 'Nauruan'},\r\n           {name: 'Nepalese'},\r\n           {name: 'New Zealander'},\r\n           {name: 'Nicaraguan'},\r\n           {name: 'Nigerian'},\r\n           {name: 'Nigerien'},\r\n           {name: 'North Korean'},\r\n           {name: 'Northern Irish'},\r\n           {name: 'Norwegian'},\r\n           {name: 'Omani'},\r\n           {name: 'Pakistani'},\r\n           {name: 'Palauan'},\r\n           {name: 'Panamanian'},\r\n           {name: 'Papua New Guinean'},\r\n           {name: 'Paraguayan'},\r\n           {name: 'Peruvian'},\r\n           {name: 'Polish'},\r\n           {name: 'Portuguese'},\r\n           {name: 'Qatari'},\r\n           {name: 'Romani'},          \r\n           {name: 'Russian'},\r\n           {name: 'Rwandan'},\r\n           {name: 'Saint Lucian'},\r\n           {name: 'Salvadoran'},\r\n           {name: 'Samoan'},\r\n           {name: 'San Marinese'},\r\n           {name: 'Sao Tomean'},\r\n           {name: 'Saudi'},\r\n           {name: 'Scottish'},\r\n           {name: 'Senegalese'},\r\n           {name: 'Serbian'},\r\n           {name: 'Seychellois'},\r\n           {name: 'Sierra Leonean'},\r\n           {name: 'Singaporean'},\r\n           {name: 'Slovakian'},\r\n           {name: 'Slovenian'},\r\n           {name: 'Solomon Islander'},\r\n           {name: 'Somali'},\r\n           {name: 'South African'},\r\n           {name: 'South Korean'},\r\n           {name: 'Spanish'},\r\n           {name: 'Sri Lankan'},\r\n           {name: 'Sudanese'},\r\n           {name: 'Surinamer'},\r\n           {name: 'Swazi'},\r\n           {name: 'Swedish'},\r\n           {name: 'Swiss'},\r\n           {name: 'Syrian'},\r\n           {name: 'Taiwanese'},\r\n           {name: 'Tajik'},\r\n           {name: 'Tanzanian'},\r\n           {name: 'Thai'},\r\n           {name: 'Togolese'},\r\n           {name: 'Tongan'},\r\n           {name: 'Trinidadian or Tobagonian'},\r\n           {name: 'Tunisian'},\r\n           {name: 'Turkish'},\r\n           {name: 'Tuvaluan'},\r\n           {name: 'Ugandan'},\r\n           {name: 'Ukrainian'},\r\n           {name: 'Uruguaya'},\r\n           {name: 'Uzbekistani'},\r\n           {name: 'Venezuela'},\r\n           {name: 'Vietnamese'},\r\n           {name: 'Wels'},\r\n           {name: 'Yemenit'},\r\n           {name: 'Zambia'},\r\n           {name: 'Zimbabwe'},\r\n        ],\r\n\r\n        us_states_and_dc: [\r\n            {name: 'Alabama', abbreviation: 'AL'},\r\n            {name: 'Alaska', abbreviation: 'AK'},\r\n            {name: 'Arizona', abbreviation: 'AZ'},\r\n            {name: 'Arkansas', abbreviation: 'AR'},\r\n            {name: 'California', abbreviation: 'CA'},\r\n            {name: 'Colorado', abbreviation: 'CO'},\r\n            {name: 'Connecticut', abbreviation: 'CT'},\r\n            {name: 'Delaware', abbreviation: 'DE'},\r\n            {name: 'District of Columbia', abbreviation: 'DC'},\r\n            {name: 'Florida', abbreviation: 'FL'},\r\n            {name: 'Georgia', abbreviation: 'GA'},\r\n            {name: 'Hawaii', abbreviation: 'HI'},\r\n            {name: 'Idaho', abbreviation: 'ID'},\r\n            {name: 'Illinois', abbreviation: 'IL'},\r\n            {name: 'Indiana', abbreviation: 'IN'},\r\n            {name: 'Iowa', abbreviation: 'IA'},\r\n            {name: 'Kansas', abbreviation: 'KS'},\r\n            {name: 'Kentucky', abbreviation: 'KY'},\r\n            {name: 'Louisiana', abbreviation: 'LA'},\r\n            {name: 'Maine', abbreviation: 'ME'},\r\n            {name: 'Maryland', abbreviation: 'MD'},\r\n            {name: 'Massachusetts', abbreviation: 'MA'},\r\n            {name: 'Michigan', abbreviation: 'MI'},\r\n            {name: 'Minnesota', abbreviation: 'MN'},\r\n            {name: 'Mississippi', abbreviation: 'MS'},\r\n            {name: 'Missouri', abbreviation: 'MO'},\r\n            {name: 'Montana', abbreviation: 'MT'},\r\n            {name: 'Nebraska', abbreviation: 'NE'},\r\n            {name: 'Nevada', abbreviation: 'NV'},\r\n            {name: 'New Hampshire', abbreviation: 'NH'},\r\n            {name: 'New Jersey', abbreviation: 'NJ'},\r\n            {name: 'New Mexico', abbreviation: 'NM'},\r\n            {name: 'New York', abbreviation: 'NY'},\r\n            {name: 'North Carolina', abbreviation: 'NC'},\r\n            {name: 'North Dakota', abbreviation: 'ND'},\r\n            {name: 'Ohio', abbreviation: 'OH'},\r\n            {name: 'Oklahoma', abbreviation: 'OK'},\r\n            {name: 'Oregon', abbreviation: 'OR'},\r\n            {name: 'Pennsylvania', abbreviation: 'PA'},\r\n            {name: 'Rhode Island', abbreviation: 'RI'},\r\n            {name: 'South Carolina', abbreviation: 'SC'},\r\n            {name: 'South Dakota', abbreviation: 'SD'},\r\n            {name: 'Tennessee', abbreviation: 'TN'},\r\n            {name: 'Texas', abbreviation: 'TX'},\r\n            {name: 'Utah', abbreviation: 'UT'},\r\n            {name: 'Vermont', abbreviation: 'VT'},\r\n            {name: 'Virginia', abbreviation: 'VA'},\r\n            {name: 'Washington', abbreviation: 'WA'},\r\n            {name: 'West Virginia', abbreviation: 'WV'},\r\n            {name: 'Wisconsin', abbreviation: 'WI'},\r\n            {name: 'Wyoming', abbreviation: 'WY'}\r\n        ],\r\n\r\n        territories: [\r\n            {name: 'American Samoa', abbreviation: 'AS'},\r\n            {name: 'Federated States of Micronesia', abbreviation: 'FM'},\r\n            {name: 'Guam', abbreviation: 'GU'},\r\n            {name: 'Marshall Islands', abbreviation: 'MH'},\r\n            {name: 'Northern Mariana Islands', abbreviation: 'MP'},\r\n            {name: 'Puerto Rico', abbreviation: 'PR'},\r\n            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}\r\n        ],\r\n\r\n        armed_forces: [\r\n            {name: 'Armed Forces Europe', abbreviation: 'AE'},\r\n            {name: 'Armed Forces Pacific', abbreviation: 'AP'},\r\n            {name: 'Armed Forces the Americas', abbreviation: 'AA'}\r\n        ],\r\n\r\n        country_regions: {\r\n            it: [\r\n                { name: \"Valle d'Aosta\", abbreviation: \"VDA\" },\r\n                { name: \"Piemonte\", abbreviation: \"PIE\" },\r\n                { name: \"Lombardia\", abbreviation: \"LOM\" },\r\n                { name: \"Veneto\", abbreviation: \"VEN\" },\r\n                { name: \"Trentino Alto Adige\", abbreviation: \"TAA\" },\r\n                { name: \"Friuli Venezia Giulia\", abbreviation: \"FVG\" },\r\n                { name: \"Liguria\", abbreviation: \"LIG\" },\r\n                { name: \"Emilia Romagna\", abbreviation: \"EMR\" },\r\n                { name: \"Toscana\", abbreviation: \"TOS\" },\r\n                { name: \"Umbria\", abbreviation: \"UMB\" },\r\n                { name: \"Marche\", abbreviation: \"MAR\" },\r\n                { name: \"Abruzzo\", abbreviation: \"ABR\" },\r\n                { name: \"Lazio\", abbreviation: \"LAZ\" },\r\n                { name: \"Campania\", abbreviation: \"CAM\" },\r\n                { name: \"Puglia\", abbreviation: \"PUG\" },\r\n                { name: \"Basilicata\", abbreviation: \"BAS\" },\r\n                { name: \"Molise\", abbreviation: \"MOL\" },\r\n                { name: \"Calabria\", abbreviation: \"CAL\" },\r\n                { name: \"Sicilia\", abbreviation: \"SIC\" },\r\n                { name: \"Sardegna\", abbreviation: \"SAR\" }\r\n            ]\r\n        },\r\n\r\n        street_suffixes: {\r\n            'us': [\r\n                {name: 'Avenue', abbreviation: 'Ave'},\r\n                {name: 'Boulevard', abbreviation: 'Blvd'},\r\n                {name: 'Center', abbreviation: 'Ctr'},\r\n                {name: 'Circle', abbreviation: 'Cir'},\r\n                {name: 'Court', abbreviation: 'Ct'},\r\n                {name: 'Drive', abbreviation: 'Dr'},\r\n                {name: 'Extension', abbreviation: 'Ext'},\r\n                {name: 'Glen', abbreviation: 'Gln'},\r\n                {name: 'Grove', abbreviation: 'Grv'},\r\n                {name: 'Heights', abbreviation: 'Hts'},\r\n                {name: 'Highway', abbreviation: 'Hwy'},\r\n                {name: 'Junction', abbreviation: 'Jct'},\r\n                {name: 'Key', abbreviation: 'Key'},\r\n                {name: 'Lane', abbreviation: 'Ln'},\r\n                {name: 'Loop', abbreviation: 'Loop'},\r\n                {name: 'Manor', abbreviation: 'Mnr'},\r\n                {name: 'Mill', abbreviation: 'Mill'},\r\n                {name: 'Park', abbreviation: 'Park'},\r\n                {name: 'Parkway', abbreviation: 'Pkwy'},\r\n                {name: 'Pass', abbreviation: 'Pass'},\r\n                {name: 'Path', abbreviation: 'Path'},\r\n                {name: 'Pike', abbreviation: 'Pike'},\r\n                {name: 'Place', abbreviation: 'Pl'},\r\n                {name: 'Plaza', abbreviation: 'Plz'},\r\n                {name: 'Point', abbreviation: 'Pt'},\r\n                {name: 'Ridge', abbreviation: 'Rdg'},\r\n                {name: 'River', abbreviation: 'Riv'},\r\n                {name: 'Road', abbreviation: 'Rd'},\r\n                {name: 'Square', abbreviation: 'Sq'},\r\n                {name: 'Street', abbreviation: 'St'},\r\n                {name: 'Terrace', abbreviation: 'Ter'},\r\n                {name: 'Trail', abbreviation: 'Trl'},\r\n                {name: 'Turnpike', abbreviation: 'Tpke'},\r\n                {name: 'View', abbreviation: 'Vw'},\r\n                {name: 'Way', abbreviation: 'Way'}\r\n            ],\r\n            'it': [\r\n                { name: 'Accesso', abbreviation: 'Acc.' },\r\n                { name: 'Alzaia', abbreviation: 'Alz.' },\r\n                { name: 'Arco', abbreviation: 'Arco' },\r\n                { name: 'Archivolto', abbreviation: 'Acv.' },\r\n                { name: 'Arena', abbreviation: 'Arena' },\r\n                { name: 'Argine', abbreviation: 'Argine' },\r\n                { name: 'Bacino', abbreviation: 'Bacino' },\r\n                { name: 'Banchi', abbreviation: 'Banchi' },\r\n                { name: 'Banchina', abbreviation: 'Ban.' },\r\n                { name: 'Bastioni', abbreviation: 'Bas.' },\r\n                { name: 'Belvedere', abbreviation: 'Belv.' },\r\n                { name: 'Borgata', abbreviation: 'B.ta' },\r\n                { name: 'Borgo', abbreviation: 'B.go' },\r\n                { name: 'Calata', abbreviation: 'Cal.' },\r\n                { name: 'Calle', abbreviation: 'Calle' },\r\n                { name: 'Campiello', abbreviation: 'Cam.' },\r\n                { name: 'Campo', abbreviation: 'Cam.' },\r\n                { name: 'Canale', abbreviation: 'Can.' },\r\n                { name: 'Carraia', abbreviation: 'Carr.' },\r\n                { name: 'Cascina', abbreviation: 'Cascina' },\r\n                { name: 'Case sparse', abbreviation: 'c.s.' },\r\n                { name: 'Cavalcavia', abbreviation: 'Cv.' },\r\n                { name: 'Circonvallazione', abbreviation: 'Cv.' },\r\n                { name: 'Complanare', abbreviation: 'C.re' },\r\n                { name: 'Contrada', abbreviation: 'C.da' },\r\n                { name: 'Corso', abbreviation: 'C.so' },\r\n                { name: 'Corte', abbreviation: 'C.te' },\r\n                { name: 'Cortile', abbreviation: 'C.le' },\r\n                { name: 'Diramazione', abbreviation: 'Dir.' },\r\n                { name: 'Fondaco', abbreviation: 'F.co' },\r\n                { name: 'Fondamenta', abbreviation: 'F.ta' },\r\n                { name: 'Fondo', abbreviation: 'F.do' },\r\n                { name: 'Frazione', abbreviation: 'Fr.' },\r\n                { name: 'Isola', abbreviation: 'Is.' },\r\n                { name: 'Largo', abbreviation: 'L.go' },\r\n                { name: 'Litoranea', abbreviation: 'Lit.' },\r\n                { name: 'Lungolago', abbreviation: 'L.go lago' },\r\n                { name: 'Lungo Po', abbreviation: 'l.go Po' },\r\n                { name: 'Molo', abbreviation: 'Molo' },\r\n                { name: 'Mura', abbreviation: 'Mura' },\r\n                { name: 'Passaggio privato', abbreviation: 'pass. priv.' },\r\n                { name: 'Passeggiata', abbreviation: 'Pass.' },\r\n                { name: 'Piazza', abbreviation: 'P.zza' },\r\n                { name: 'Piazzale', abbreviation: 'P.le' },\r\n                { name: 'Ponte', abbreviation: 'P.te' },\r\n                { name: 'Portico', abbreviation: 'P.co' },\r\n                { name: 'Rampa', abbreviation: 'Rampa' },\r\n                { name: 'Regione', abbreviation: 'Reg.' },\r\n                { name: 'Rione', abbreviation: 'R.ne' },\r\n                { name: 'Rio', abbreviation: 'Rio' },\r\n                { name: 'Ripa', abbreviation: 'Ripa' },\r\n                { name: 'Riva', abbreviation: 'Riva' },\r\n                { name: 'Rondò', abbreviation: 'Rondò' },\r\n                { name: 'Rotonda', abbreviation: 'Rot.' },\r\n                { name: 'Sagrato', abbreviation: 'Sagr.' },\r\n                { name: 'Salita', abbreviation: 'Sal.' },\r\n                { name: 'Scalinata', abbreviation: 'Scal.' },\r\n                { name: 'Scalone', abbreviation: 'Scal.' },\r\n                { name: 'Slargo', abbreviation: 'Sl.' },\r\n                { name: 'Sottoportico', abbreviation: 'Sott.' },\r\n                { name: 'Strada', abbreviation: 'Str.' },\r\n                { name: 'Stradale', abbreviation: 'Str.le' },\r\n                { name: 'Strettoia', abbreviation: 'Strett.' },\r\n                { name: 'Traversa', abbreviation: 'Trav.' },\r\n                { name: 'Via', abbreviation: 'V.' },\r\n                { name: 'Viale', abbreviation: 'V.le' },\r\n                { name: 'Vicinale', abbreviation: 'Vic.le' },\r\n                { name: 'Vicolo', abbreviation: 'Vic.' }\r\n            ]\r\n        },\r\n\r\n        months: [\r\n            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},\r\n            // Not messing with leap years...\r\n            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},\r\n            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},\r\n            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},\r\n            {name: 'May', short_name: 'May', numeric: '05', days: 31},\r\n            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},\r\n            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},\r\n            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},\r\n            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},\r\n            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},\r\n            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},\r\n            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}\r\n        ],\r\n\r\n        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29\r\n        cc_types: [\r\n            {name: \"American Express\", short_name: 'amex', prefix: '34', length: 15},\r\n            {name: \"Bankcard\", short_name: 'bankcard', prefix: '5610', length: 16},\r\n            {name: \"China UnionPay\", short_name: 'chinaunion', prefix: '62', length: 16},\r\n            {name: \"Diners Club Carte Blanche\", short_name: 'dccarte', prefix: '300', length: 14},\r\n            {name: \"Diners Club enRoute\", short_name: 'dcenroute', prefix: '2014', length: 15},\r\n            {name: \"Diners Club International\", short_name: 'dcintl', prefix: '36', length: 14},\r\n            {name: \"Diners Club United States & Canada\", short_name: 'dcusc', prefix: '54', length: 16},\r\n            {name: \"Discover Card\", short_name: 'discover', prefix: '6011', length: 16},\r\n            {name: \"InstaPayment\", short_name: 'instapay', prefix: '637', length: 16},\r\n            {name: \"JCB\", short_name: 'jcb', prefix: '3528', length: 16},\r\n            {name: \"Laser\", short_name: 'laser', prefix: '6304', length: 16},\r\n            {name: \"Maestro\", short_name: 'maestro', prefix: '5018', length: 16},\r\n            {name: \"Mastercard\", short_name: 'mc', prefix: '51', length: 16},\r\n            {name: \"Solo\", short_name: 'solo', prefix: '6334', length: 16},\r\n            {name: \"Switch\", short_name: 'switch', prefix: '4903', length: 16},\r\n            {name: \"Visa\", short_name: 'visa', prefix: '4', length: 16},\r\n            {name: \"Visa Electron\", short_name: 'electron', prefix: '4026', length: 16}\r\n        ],\r\n\r\n        //return all world currency by ISO 4217\r\n        currency_types: [\r\n            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},\r\n            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},\r\n            {'code' : 'ALL', 'name' : 'Albania Lek'},\r\n            {'code' : 'AMD', 'name' : 'Armenia Dram'},\r\n            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},\r\n            {'code' : 'AOA', 'name' : 'Angola Kwanza'},\r\n            {'code' : 'ARS', 'name' : 'Argentina Peso'},\r\n            {'code' : 'AUD', 'name' : 'Australia Dollar'},\r\n            {'code' : 'AWG', 'name' : 'Aruba Guilder'},\r\n            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},\r\n            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},\r\n            {'code' : 'BBD', 'name' : 'Barbados Dollar'},\r\n            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},\r\n            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},\r\n            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},\r\n            {'code' : 'BIF', 'name' : 'Burundi Franc'},\r\n            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},\r\n            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},\r\n            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},\r\n            {'code' : 'BRL', 'name' : 'Brazil Real'},\r\n            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},\r\n            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},\r\n            {'code' : 'BWP', 'name' : 'Botswana Pula'},\r\n            {'code' : 'BYR', 'name' : 'Belarus Ruble'},\r\n            {'code' : 'BZD', 'name' : 'Belize Dollar'},\r\n            {'code' : 'CAD', 'name' : 'Canada Dollar'},\r\n            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},\r\n            {'code' : 'CHF', 'name' : 'Switzerland Franc'},\r\n            {'code' : 'CLP', 'name' : 'Chile Peso'},\r\n            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},\r\n            {'code' : 'COP', 'name' : 'Colombia Peso'},\r\n            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},\r\n            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},\r\n            {'code' : 'CUP', 'name' : 'Cuba Peso'},\r\n            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},\r\n            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},\r\n            {'code' : 'DJF', 'name' : 'Djibouti Franc'},\r\n            {'code' : 'DKK', 'name' : 'Denmark Krone'},\r\n            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},\r\n            {'code' : 'DZD', 'name' : 'Algeria Dinar'},\r\n            {'code' : 'EGP', 'name' : 'Egypt Pound'},\r\n            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},\r\n            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},\r\n            {'code' : 'EUR', 'name' : 'Euro Member Countries'},\r\n            {'code' : 'FJD', 'name' : 'Fiji Dollar'},\r\n            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},\r\n            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},\r\n            {'code' : 'GEL', 'name' : 'Georgia Lari'},\r\n            {'code' : 'GGP', 'name' : 'Guernsey Pound'},\r\n            {'code' : 'GHS', 'name' : 'Ghana Cedi'},\r\n            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},\r\n            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},\r\n            {'code' : 'GNF', 'name' : 'Guinea Franc'},\r\n            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},\r\n            {'code' : 'GYD', 'name' : 'Guyana Dollar'},\r\n            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},\r\n            {'code' : 'HNL', 'name' : 'Honduras Lempira'},\r\n            {'code' : 'HRK', 'name' : 'Croatia Kuna'},\r\n            {'code' : 'HTG', 'name' : 'Haiti Gourde'},\r\n            {'code' : 'HUF', 'name' : 'Hungary Forint'},\r\n            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},\r\n            {'code' : 'ILS', 'name' : 'Israel Shekel'},\r\n            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},\r\n            {'code' : 'INR', 'name' : 'India Rupee'},\r\n            {'code' : 'IQD', 'name' : 'Iraq Dinar'},\r\n            {'code' : 'IRR', 'name' : 'Iran Rial'},\r\n            {'code' : 'ISK', 'name' : 'Iceland Krona'},\r\n            {'code' : 'JEP', 'name' : 'Jersey Pound'},\r\n            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},\r\n            {'code' : 'JOD', 'name' : 'Jordan Dinar'},\r\n            {'code' : 'JPY', 'name' : 'Japan Yen'},\r\n            {'code' : 'KES', 'name' : 'Kenya Shilling'},\r\n            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},\r\n            {'code' : 'KHR', 'name' : 'Cambodia Riel'},\r\n            {'code' : 'KMF', 'name' : 'Comoros Franc'},\r\n            {'code' : 'KPW', 'name' : 'Korea (North) Won'},\r\n            {'code' : 'KRW', 'name' : 'Korea (South) Won'},\r\n            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},\r\n            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},\r\n            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},\r\n            {'code' : 'LAK', 'name' : 'Laos Kip'},\r\n            {'code' : 'LBP', 'name' : 'Lebanon Pound'},\r\n            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},\r\n            {'code' : 'LRD', 'name' : 'Liberia Dollar'},\r\n            {'code' : 'LSL', 'name' : 'Lesotho Loti'},\r\n            {'code' : 'LTL', 'name' : 'Lithuania Litas'},\r\n            {'code' : 'LYD', 'name' : 'Libya Dinar'},\r\n            {'code' : 'MAD', 'name' : 'Morocco Dirham'},\r\n            {'code' : 'MDL', 'name' : 'Moldova Leu'},\r\n            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},\r\n            {'code' : 'MKD', 'name' : 'Macedonia Denar'},\r\n            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},\r\n            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},\r\n            {'code' : 'MOP', 'name' : 'Macau Pataca'},\r\n            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},\r\n            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},\r\n            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},\r\n            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},\r\n            {'code' : 'MXN', 'name' : 'Mexico Peso'},\r\n            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},\r\n            {'code' : 'MZN', 'name' : 'Mozambique Metical'},\r\n            {'code' : 'NAD', 'name' : 'Namibia Dollar'},\r\n            {'code' : 'NGN', 'name' : 'Nigeria Naira'},\r\n            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},\r\n            {'code' : 'NOK', 'name' : 'Norway Krone'},\r\n            {'code' : 'NPR', 'name' : 'Nepal Rupee'},\r\n            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},\r\n            {'code' : 'OMR', 'name' : 'Oman Rial'},\r\n            {'code' : 'PAB', 'name' : 'Panama Balboa'},\r\n            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},\r\n            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},\r\n            {'code' : 'PHP', 'name' : 'Philippines Peso'},\r\n            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},\r\n            {'code' : 'PLN', 'name' : 'Poland Zloty'},\r\n            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},\r\n            {'code' : 'QAR', 'name' : 'Qatar Riyal'},\r\n            {'code' : 'RON', 'name' : 'Romania New Leu'},\r\n            {'code' : 'RSD', 'name' : 'Serbia Dinar'},\r\n            {'code' : 'RUB', 'name' : 'Russia Ruble'},\r\n            {'code' : 'RWF', 'name' : 'Rwanda Franc'},\r\n            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},\r\n            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},\r\n            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},\r\n            {'code' : 'SDG', 'name' : 'Sudan Pound'},\r\n            {'code' : 'SEK', 'name' : 'Sweden Krona'},\r\n            {'code' : 'SGD', 'name' : 'Singapore Dollar'},\r\n            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},\r\n            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},\r\n            {'code' : 'SOS', 'name' : 'Somalia Shilling'},\r\n            {'code' : 'SPL', 'name' : 'Seborga Luigino'},\r\n            {'code' : 'SRD', 'name' : 'Suriname Dollar'},\r\n            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},\r\n            {'code' : 'SVC', 'name' : 'El Salvador Colon'},\r\n            {'code' : 'SYP', 'name' : 'Syria Pound'},\r\n            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},\r\n            {'code' : 'THB', 'name' : 'Thailand Baht'},\r\n            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},\r\n            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},\r\n            {'code' : 'TND', 'name' : 'Tunisia Dinar'},\r\n            {'code' : 'TOP', 'name' : 'Tonga Pa\\'anga'},\r\n            {'code' : 'TRY', 'name' : 'Turkey Lira'},\r\n            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},\r\n            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},\r\n            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},\r\n            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},\r\n            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},\r\n            {'code' : 'UGX', 'name' : 'Uganda Shilling'},\r\n            {'code' : 'USD', 'name' : 'United States Dollar'},\r\n            {'code' : 'UYU', 'name' : 'Uruguay Peso'},\r\n            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},\r\n            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},\r\n            {'code' : 'VND', 'name' : 'Viet Nam Dong'},\r\n            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},\r\n            {'code' : 'WST', 'name' : 'Samoa Tala'},\r\n            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},\r\n            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},\r\n            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},\r\n            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},\r\n            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},\r\n            {'code' : 'YER', 'name' : 'Yemen Rial'},\r\n            {'code' : 'ZAR', 'name' : 'South Africa Rand'},\r\n            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},\r\n            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}\r\n        ],\r\n        \r\n        // return the names of all valide colors\r\n        colorNames : [  \"AliceBlue\", \"Black\", \"Navy\", \"DarkBlue\", \"MediumBlue\", \"Blue\", \"DarkGreen\", \"Green\", \"Teal\", \"DarkCyan\", \"DeepSkyBlue\", \"DarkTurquoise\", \"MediumSpringGreen\", \"Lime\", \"SpringGreen\",\r\n            \"Aqua\", \"Cyan\", \"MidnightBlue\", \"DodgerBlue\", \"LightSeaGreen\", \"ForestGreen\", \"SeaGreen\", \"DarkSlateGray\", \"LimeGreen\", \"MediumSeaGreen\", \"Turquoise\", \"RoyalBlue\", \"SteelBlue\", \"DarkSlateBlue\", \"MediumTurquoise\",\r\n            \"Indigo\", \"DarkOliveGreen\", \"CadetBlue\", \"CornflowerBlue\", \"RebeccaPurple\", \"MediumAquaMarine\", \"DimGray\", \"SlateBlue\", \"OliveDrab\", \"SlateGray\", \"LightSlateGray\", \"MediumSlateBlue\", \"LawnGreen\", \"Chartreuse\",\r\n            \"Aquamarine\", \"Maroon\", \"Purple\", \"Olive\", \"Gray\", \"SkyBlue\", \"LightSkyBlue\", \"BlueViolet\", \"DarkRed\", \"DarkMagenta\", \"SaddleBrown\", \"Ivory\", \"White\",\r\n            \"DarkSeaGreen\", \"LightGreen\", \"MediumPurple\", \"DarkViolet\", \"PaleGreen\", \"DarkOrchid\", \"YellowGreen\", \"Sienna\", \"Brown\", \"DarkGray\", \"LightBlue\", \"GreenYellow\", \"PaleTurquoise\", \"LightSteelBlue\", \"PowderBlue\",\r\n            \"FireBrick\", \"DarkGoldenRod\", \"MediumOrchid\", \"RosyBrown\", \"DarkKhaki\", \"Silver\", \"MediumVioletRed\", \"IndianRed\", \"Peru\", \"Chocolate\", \"Tan\", \"LightGray\", \"Thistle\", \"Orchid\", \"GoldenRod\", \"PaleVioletRed\",\r\n            \"Crimson\", \"Gainsboro\", \"Plum\", \"BurlyWood\", \"LightCyan\", \"Lavender\", \"DarkSalmon\", \"Violet\", \"PaleGoldenRod\", \"LightCoral\", \"Khaki\", \"AliceBlue\", \"HoneyDew\", \"Azure\", \"SandyBrown\", \"Wheat\", \"Beige\", \"WhiteSmoke\",\r\n            \"MintCream\", \"GhostWhite\", \"Salmon\", \"AntiqueWhite\", \"Linen\", \"LightGoldenRodYellow\", \"OldLace\", \"Red\", \"Fuchsia\", \"Magenta\", \"DeepPink\", \"OrangeRed\", \"Tomato\", \"HotPink\", \"Coral\", \"DarkOrange\", \"LightSalmon\", \"Orange\",\r\n            \"LightPink\", \"Pink\", \"Gold\", \"PeachPuff\", \"NavajoWhite\", \"Moccasin\", \"Bisque\", \"MistyRose\", \"BlanchedAlmond\", \"PapayaWhip\", \"LavenderBlush\", \"SeaShell\", \"Cornsilk\", \"LemonChiffon\", \"FloralWhite\", \"Snow\", \"Yellow\", \"LightYellow\"\r\n        ],        \r\n\r\n        fileExtension : {\r\n            \"raster\"    : [\"bmp\", \"gif\", \"gpl\", \"ico\", \"jpeg\", \"psd\", \"png\", \"psp\", \"raw\", \"tiff\"],\r\n            \"vector\"    : [\"3dv\", \"amf\", \"awg\", \"ai\", \"cgm\", \"cdr\", \"cmx\", \"dxf\", \"e2d\", \"egt\", \"eps\", \"fs\", \"odg\", \"svg\", \"xar\"],\r\n            \"3d\"        : [\"3dmf\", \"3dm\", \"3mf\", \"3ds\", \"an8\", \"aoi\", \"blend\", \"cal3d\", \"cob\", \"ctm\", \"iob\", \"jas\", \"max\", \"mb\", \"mdx\", \"obj\", \"x\", \"x3d\"],\r\n            \"document\"  : [\"doc\", \"docx\", \"dot\", \"html\", \"xml\", \"odt\", \"odm\", \"ott\", \"csv\", \"rtf\", \"tex\", \"xhtml\", \"xps\"]\r\n        }\r\n    };\r\n\r\n    var o_hasOwnProperty = Object.prototype.hasOwnProperty;\r\n    var o_keys = (Object.keys || function(obj) {\r\n      var result = [];\r\n      for (var key in obj) {\r\n        if (o_hasOwnProperty.call(obj, key)) {\r\n          result.push(key);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    });\r\n\r\n    function _copyObject(source, target) {\r\n      var keys = o_keys(source);\r\n      var key;\r\n\r\n      for (var i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        target[key] = source[key] || target[key];\r\n      }\r\n    }\r\n\r\n    function _copyArray(source, target) {\r\n      for (var i = 0, l = source.length; i < l; i++) {\r\n        target[i] = source[i];\r\n      }\r\n    }\r\n\r\n    function copyObject(source, _target) {\r\n        var isArray = Array.isArray(source);\r\n        var target = _target || (isArray ? new Array(source.length) : {});\r\n\r\n        if (isArray) {\r\n          _copyArray(source, target);\r\n        } else {\r\n          _copyObject(source, target);\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /** Get the data based on key**/\r\n    Chance.prototype.get = function (name) {\r\n        return copyObject(data[name]);\r\n    };\r\n\r\n    // Mac Address\r\n    Chance.prototype.mac_address = function(options){\r\n        // typically mac addresses are separated by \":\"\r\n        // however they can also be separated by \"-\"\r\n        // the network variant uses a dot every fourth byte\r\n\r\n        options = initOptions(options);\r\n        if(!options.separator) {\r\n            options.separator =  options.networkVersion ? \".\" : \":\";\r\n        }\r\n\r\n        var mac_pool=\"ABCDEF1234567890\",\r\n            mac = \"\";\r\n        if(!options.networkVersion) {\r\n            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);\r\n        } else {\r\n            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);\r\n        }\r\n\r\n        return mac;\r\n    };\r\n\r\n    Chance.prototype.normal = function (options) {\r\n        options = initOptions(options, {mean : 0, dev : 1, pool : []});\r\n\r\n        testRange(\r\n            options.pool.constructor !== Array,\r\n            \"Chance: The pool option must be a valid array.\"\r\n        );\r\n\r\n        // If a pool has been passed, then we are returning an item from that pool,\r\n        // using the normal distribution settings that were passed in\r\n        if (options.pool.length > 0) {\r\n            return this.normal_pool(options);\r\n        }\r\n\r\n        // The Marsaglia Polar method\r\n        var s, u, v, norm,\r\n            mean = options.mean,\r\n            dev = options.dev;\r\n\r\n        do {\r\n            // U and V are from the uniform distribution on (-1, 1)\r\n            u = this.random() * 2 - 1;\r\n            v = this.random() * 2 - 1;\r\n\r\n            s = u * u + v * v;\r\n        } while (s >= 1);\r\n\r\n        // Compute the standard normal variate\r\n        norm = u * Math.sqrt(-2 * Math.log(s) / s);\r\n\r\n        // Shape and scale\r\n        return dev * norm + mean;\r\n    };\r\n\r\n    Chance.prototype.normal_pool = function(options) {\r\n        var performanceCounter = 0;\r\n        do {\r\n            var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));\r\n            if (idx < options.pool.length && idx >= 0) {\r\n                return options.pool[idx];\r\n            } else {\r\n                performanceCounter++;\r\n            }\r\n        } while(performanceCounter < 100);\r\n\r\n        throw new RangeError(\"Chance: Your pool is too small for the given mean and standard deviation. Please adjust.\");\r\n    };\r\n\r\n    Chance.prototype.radio = function (options) {\r\n        // Initial Letter (Typically Designated by Side of Mississippi River)\r\n        options = initOptions(options, {side : \"?\"});\r\n        var fl = \"\";\r\n        switch (options.side.toLowerCase()) {\r\n        case \"east\":\r\n        case \"e\":\r\n            fl = \"W\";\r\n            break;\r\n        case \"west\":\r\n        case \"w\":\r\n            fl = \"K\";\r\n            break;\r\n        default:\r\n            fl = this.character({pool: \"KW\"});\r\n            break;\r\n        }\r\n\r\n        return fl + this.character({alpha: true, casing: \"upper\"}) +\r\n                this.character({alpha: true, casing: \"upper\"}) +\r\n                this.character({alpha: true, casing: \"upper\"});\r\n    };\r\n\r\n    // Set the data as key and data or the data map\r\n    Chance.prototype.set = function (name, values) {\r\n        if (typeof name === \"string\") {\r\n            data[name] = values;\r\n        } else {\r\n            data = copyObject(name, data);\r\n        }\r\n    };\r\n\r\n    Chance.prototype.tv = function (options) {\r\n        return this.radio(options);\r\n    };\r\n\r\n    // ID number for Brazil companies\r\n    Chance.prototype.cnpj = function () {\r\n        var n = this.n(this.natural, 8, { max: 9 });\r\n        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;\r\n        d1 = 11 - (d1 % 11);\r\n        if (d1>=10){\r\n            d1 = 0;\r\n        }\r\n        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;\r\n        d2 = 11 - (d2 % 11);\r\n        if (d2>=10){\r\n            d2 = 0;\r\n        }\r\n        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;\r\n    };\r\n\r\n    // -- End Miscellaneous --\r\n\r\n    Chance.prototype.mersenne_twister = function (seed) {\r\n        return new MersenneTwister(seed);\r\n    };\r\n\r\n    Chance.prototype.blueimp_md5 = function () {\r\n        return new BlueImpMD5();\r\n    };\r\n\r\n    // Mersenne Twister from https://gist.github.com/banksean/300494\r\n    var MersenneTwister = function (seed) {\r\n        if (seed === undefined) {\r\n            // kept random number same size as time used previously to ensure no unexpected results downstream\r\n            seed = Math.floor(Math.random()*Math.pow(10,13));\r\n        }\r\n        /* Period parameters */\r\n        this.N = 624;\r\n        this.M = 397;\r\n        this.MATRIX_A = 0x9908b0df;   /* constant vector a */\r\n        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\r\n        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\r\n\r\n        this.mt = new Array(this.N); /* the array for the state vector */\r\n        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */\r\n\r\n        this.init_genrand(seed);\r\n    };\r\n\r\n    /* initializes mt[N] with a seed */\r\n    MersenneTwister.prototype.init_genrand = function (s) {\r\n        this.mt[0] = s >>> 0;\r\n        for (this.mti = 1; this.mti < this.N; this.mti++) {\r\n            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\r\n            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;\r\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\r\n            /* In the previous versions, MSBs of the seed affect   */\r\n            /* only MSBs of the array mt[].                        */\r\n            /* 2002/01/09 modified by Makoto Matsumoto             */\r\n            this.mt[this.mti] >>>= 0;\r\n            /* for >32 bit machines */\r\n        }\r\n    };\r\n\r\n    /* initialize by an array with array-length */\r\n    /* init_key is the array for initializing keys */\r\n    /* key_length is its length */\r\n    /* slight change for C++, 2004/2/26 */\r\n    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {\r\n        var i = 1, j = 0, k, s;\r\n        this.init_genrand(19650218);\r\n        k = (this.N > key_length ? this.N : key_length);\r\n        for (; k; k--) {\r\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\r\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */\r\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\r\n            i++;\r\n            j++;\r\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\r\n            if (j >= key_length) { j = 0; }\r\n        }\r\n        for (k = this.N - 1; k; k--) {\r\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\r\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */\r\n            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\r\n            i++;\r\n            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\r\n        }\r\n\r\n        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\r\n    };\r\n\r\n    /* generates a random number on [0,0xffffffff]-interval */\r\n    MersenneTwister.prototype.genrand_int32 = function () {\r\n        var y;\r\n        var mag01 = new Array(0x0, this.MATRIX_A);\r\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\r\n\r\n        if (this.mti >= this.N) { /* generate N words at one time */\r\n            var kk;\r\n\r\n            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */\r\n                this.init_genrand(5489); /* a default initial seed is used */\r\n            }\r\n            for (kk = 0; kk < this.N - this.M; kk++) {\r\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\r\n                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n            }\r\n            for (;kk < this.N - 1; kk++) {\r\n                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);\r\n                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n            }\r\n            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\r\n            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\r\n\r\n            this.mti = 0;\r\n        }\r\n\r\n        y = this.mt[this.mti++];\r\n\r\n        /* Tempering */\r\n        y ^= (y >>> 11);\r\n        y ^= (y << 7) & 0x9d2c5680;\r\n        y ^= (y << 15) & 0xefc60000;\r\n        y ^= (y >>> 18);\r\n\r\n        return y >>> 0;\r\n    };\r\n\r\n    /* generates a random number on [0,0x7fffffff]-interval */\r\n    MersenneTwister.prototype.genrand_int31 = function () {\r\n        return (this.genrand_int32() >>> 1);\r\n    };\r\n\r\n    /* generates a random number on [0,1]-real-interval */\r\n    MersenneTwister.prototype.genrand_real1 = function () {\r\n        return this.genrand_int32() * (1.0 / 4294967295.0);\r\n        /* divided by 2^32-1 */\r\n    };\r\n\r\n    /* generates a random number on [0,1)-real-interval */\r\n    MersenneTwister.prototype.random = function () {\r\n        return this.genrand_int32() * (1.0 / 4294967296.0);\r\n        /* divided by 2^32 */\r\n    };\r\n\r\n    /* generates a random number on (0,1)-real-interval */\r\n    MersenneTwister.prototype.genrand_real3 = function () {\r\n        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);\r\n        /* divided by 2^32 */\r\n    };\r\n\r\n    /* generates a random number on [0,1) with 53-bit resolution*/\r\n    MersenneTwister.prototype.genrand_res53 = function () {\r\n        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;\r\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\r\n    };\r\n\r\n    // BlueImp MD5 hashing algorithm from https://github.com/blueimp/JavaScript-MD5\r\n    var BlueImpMD5 = function () {};\r\n\r\n    BlueImpMD5.prototype.VERSION = '1.0.1';\r\n\r\n    /*\r\n    * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n    * to work around bugs in some JS interpreters.\r\n    */\r\n    BlueImpMD5.prototype.safe_add = function safe_add(x, y) {\r\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF),\r\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n        return (msw << 16) | (lsw & 0xFFFF);\r\n    };\r\n\r\n    /*\r\n    * Bitwise rotate a 32-bit number to the left.\r\n    */\r\n    BlueImpMD5.prototype.bit_roll = function (num, cnt) {\r\n        return (num << cnt) | (num >>> (32 - cnt));\r\n    };\r\n\r\n    /*\r\n    * These functions implement the five basic operations the algorithm uses.\r\n    */\r\n    BlueImpMD5.prototype.md5_cmn = function (q, a, b, x, s, t) {\r\n        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);\r\n    };\r\n    BlueImpMD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\r\n    };\r\n    BlueImpMD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\r\n    };\r\n    BlueImpMD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);\r\n    };\r\n    BlueImpMD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {\r\n        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\r\n    };\r\n\r\n    /*\r\n    * Calculate the MD5 of an array of little-endian words, and a bit length.\r\n    */\r\n    BlueImpMD5.prototype.binl_md5 = function (x, len) {\r\n        /* append padding */\r\n        x[len >> 5] |= 0x80 << (len % 32);\r\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\r\n\r\n        var i, olda, oldb, oldc, oldd,\r\n            a =  1732584193,\r\n            b = -271733879,\r\n            c = -1732584194,\r\n            d =  271733878;\r\n\r\n        for (i = 0; i < x.length; i += 16) {\r\n            olda = a;\r\n            oldb = b;\r\n            oldc = c;\r\n            oldd = d;\r\n\r\n            a = this.md5_ff(a, b, c, d, x[i],       7, -680876936);\r\n            d = this.md5_ff(d, a, b, c, x[i +  1], 12, -389564586);\r\n            c = this.md5_ff(c, d, a, b, x[i +  2], 17,  606105819);\r\n            b = this.md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);\r\n            a = this.md5_ff(a, b, c, d, x[i +  4],  7, -176418897);\r\n            d = this.md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);\r\n            c = this.md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);\r\n            b = this.md5_ff(b, c, d, a, x[i +  7], 22, -45705983);\r\n            a = this.md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);\r\n            d = this.md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);\r\n            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);\r\n            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\r\n            a = this.md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);\r\n            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\r\n            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\r\n            b = this.md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);\r\n\r\n            a = this.md5_gg(a, b, c, d, x[i +  1],  5, -165796510);\r\n            d = this.md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);\r\n            c = this.md5_gg(c, d, a, b, x[i + 11], 14,  643717713);\r\n            b = this.md5_gg(b, c, d, a, x[i],      20, -373897302);\r\n            a = this.md5_gg(a, b, c, d, x[i +  5],  5, -701558691);\r\n            d = this.md5_gg(d, a, b, c, x[i + 10],  9,  38016083);\r\n            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\r\n            b = this.md5_gg(b, c, d, a, x[i +  4], 20, -405537848);\r\n            a = this.md5_gg(a, b, c, d, x[i +  9],  5,  568446438);\r\n            d = this.md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);\r\n            c = this.md5_gg(c, d, a, b, x[i +  3], 14, -187363961);\r\n            b = this.md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);\r\n            a = this.md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);\r\n            d = this.md5_gg(d, a, b, c, x[i +  2],  9, -51403784);\r\n            c = this.md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);\r\n            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\r\n\r\n            a = this.md5_hh(a, b, c, d, x[i +  5],  4, -378558);\r\n            d = this.md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);\r\n            c = this.md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);\r\n            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\r\n            a = this.md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);\r\n            d = this.md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);\r\n            c = this.md5_hh(c, d, a, b, x[i +  7], 16, -155497632);\r\n            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\r\n            a = this.md5_hh(a, b, c, d, x[i + 13],  4,  681279174);\r\n            d = this.md5_hh(d, a, b, c, x[i],      11, -358537222);\r\n            c = this.md5_hh(c, d, a, b, x[i +  3], 16, -722521979);\r\n            b = this.md5_hh(b, c, d, a, x[i +  6], 23,  76029189);\r\n            a = this.md5_hh(a, b, c, d, x[i +  9],  4, -640364487);\r\n            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\r\n            c = this.md5_hh(c, d, a, b, x[i + 15], 16,  530742520);\r\n            b = this.md5_hh(b, c, d, a, x[i +  2], 23, -995338651);\r\n\r\n            a = this.md5_ii(a, b, c, d, x[i],       6, -198630844);\r\n            d = this.md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);\r\n            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\r\n            b = this.md5_ii(b, c, d, a, x[i +  5], 21, -57434055);\r\n            a = this.md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);\r\n            d = this.md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);\r\n            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\r\n            b = this.md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);\r\n            a = this.md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);\r\n            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\r\n            c = this.md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);\r\n            b = this.md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);\r\n            a = this.md5_ii(a, b, c, d, x[i +  4],  6, -145523070);\r\n            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\r\n            c = this.md5_ii(c, d, a, b, x[i +  2], 15,  718787259);\r\n            b = this.md5_ii(b, c, d, a, x[i +  9], 21, -343485551);\r\n\r\n            a = this.safe_add(a, olda);\r\n            b = this.safe_add(b, oldb);\r\n            c = this.safe_add(c, oldc);\r\n            d = this.safe_add(d, oldd);\r\n        }\r\n        return [a, b, c, d];\r\n    };\r\n\r\n    /*\r\n    * Convert an array of little-endian words to a string\r\n    */\r\n    BlueImpMD5.prototype.binl2rstr = function (input) {\r\n        var i,\r\n            output = '';\r\n        for (i = 0; i < input.length * 32; i += 8) {\r\n            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    /*\r\n    * Convert a raw string to an array of little-endian words\r\n    * Characters >255 have their high-byte silently ignored.\r\n    */\r\n    BlueImpMD5.prototype.rstr2binl = function (input) {\r\n        var i,\r\n            output = [];\r\n        output[(input.length >> 2) - 1] = undefined;\r\n        for (i = 0; i < output.length; i += 1) {\r\n            output[i] = 0;\r\n        }\r\n        for (i = 0; i < input.length * 8; i += 8) {\r\n            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    /*\r\n    * Calculate the MD5 of a raw string\r\n    */\r\n    BlueImpMD5.prototype.rstr_md5 = function (s) {\r\n        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));\r\n    };\r\n\r\n    /*\r\n    * Calculate the HMAC-MD5, of a key and some data (raw strings)\r\n    */\r\n    BlueImpMD5.prototype.rstr_hmac_md5 = function (key, data) {\r\n        var i,\r\n            bkey = this.rstr2binl(key),\r\n            ipad = [],\r\n            opad = [],\r\n            hash;\r\n        ipad[15] = opad[15] = undefined;\r\n        if (bkey.length > 16) {\r\n            bkey = this.binl_md5(bkey, key.length * 8);\r\n        }\r\n        for (i = 0; i < 16; i += 1) {\r\n            ipad[i] = bkey[i] ^ 0x36363636;\r\n            opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n        }\r\n        hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);\r\n        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));\r\n    };\r\n\r\n    /*\r\n    * Convert a raw string to a hex string\r\n    */\r\n    BlueImpMD5.prototype.rstr2hex = function (input) {\r\n        var hex_tab = '0123456789abcdef',\r\n            output = '',\r\n            x,\r\n            i;\r\n        for (i = 0; i < input.length; i += 1) {\r\n            x = input.charCodeAt(i);\r\n            output += hex_tab.charAt((x >>> 4) & 0x0F) +\r\n                hex_tab.charAt(x & 0x0F);\r\n        }\r\n        return output;\r\n    };\r\n\r\n    /*\r\n    * Encode a string as utf-8\r\n    */\r\n    BlueImpMD5.prototype.str2rstr_utf8 = function (input) {\r\n        return unescape(encodeURIComponent(input));\r\n    };\r\n\r\n    /*\r\n    * Take string arguments and return either raw or hex encoded strings\r\n    */\r\n    BlueImpMD5.prototype.raw_md5 = function (s) {\r\n        return this.rstr_md5(this.str2rstr_utf8(s));\r\n    };\r\n    BlueImpMD5.prototype.hex_md5 = function (s) {\r\n        return this.rstr2hex(this.raw_md5(s));\r\n    };\r\n    BlueImpMD5.prototype.raw_hmac_md5 = function (k, d) {\r\n        return this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d));\r\n    };\r\n    BlueImpMD5.prototype.hex_hmac_md5 = function (k, d) {\r\n        return this.rstr2hex(this.raw_hmac_md5(k, d));\r\n    };\r\n\r\n    BlueImpMD5.prototype.md5 = function (string, key, raw) {\r\n        if (!key) {\r\n            if (!raw) {\r\n                return this.hex_md5(string);\r\n            }\r\n\r\n            return this.raw_md5(string);\r\n        }\r\n\r\n        if (!raw) {\r\n            return this.hex_hmac_md5(key, string);\r\n        }\r\n\r\n        return this.raw_hmac_md5(key, string);\r\n    };\r\n\r\n    // CommonJS module\r\n    if (typeof exports !== 'undefined') {\r\n        if (typeof module !== 'undefined' && module.exports) {\r\n            exports = module.exports = Chance;\r\n        }\r\n        exports.Chance = Chance;\r\n    }\r\n\r\n    // Register as an anonymous AMD module\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], function () {\r\n            return Chance;\r\n        });\r\n    }\r\n\r\n    // if there is a importsScrips object define chance for worker\r\n    if (typeof importScripts !== 'undefined') {\r\n        chance = new Chance();\r\n    }\r\n\r\n    // If there is a window object, that at least has a document property,\r\n    // instantiate and define chance on the window\r\n    if (typeof window === \"object\" && typeof window.document === \"object\") {\r\n        window.Chance = Chance;\r\n        window.chance = new Chance();\r\n    }\r\n})();\r\n"],"sourceRoot":"/source/"}